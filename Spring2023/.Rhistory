edge.color = edge.color,
type = "fan",
edge.width = 1.5,
label.offset = 0.1)
plot(tree2,
edge.color = edge.color,
type = "fan",
edge.width = 1.5,
label.offset = 0.1,
show.tip.label = FALSE)
# EXAMPLE
tree2 <- phytools::pbtree(n = 1500)
nodes <- c(1152, 1169, 1185, 1196, 1176, 1174)
edge.color <- color_clades(tree = tree2,
nodes = nodes)
plot(tree2,
edge.color = edge.color,
type = "fan",
edge.width = 1.5,
label.offset = 0.1,
show.tip.label = FALSE)
# EXAMPLE
tree2 <- phytools::pbtree(n = 1500)
nodes <- c(2152, 3169, 2185, 4196, 2176, 5174)
edge.color <- color_clades(tree = tree2,
nodes = nodes)
plot(tree2,
edge.color = edge.color,
type = "fan",
edge.width = 1.5,
label.offset = 0.1,
show.tip.label = FALSE)
edge.color
# EXAMPLE
tree2 <- phytools::pbtree(n = 1500)
nodes <- c(5152, 5169, 5185, 5196, 5176, 5174)
edge.color <- color_clades(tree = tree2,
nodes = nodes)
plot(tree2,
edge.color = edge.color,
type = "fan",
edge.width = 1.5,
label.offset = 0.1,
show.tip.label = FALSE)
# EXAMPLE
tree2 <- phytools::pbtree(n = 1500)
nodes <- c(3152, 4169, 3185, 4196, 3176, 4174)
edge.color <- color_clades(tree = tree2,
nodes = nodes)
plot(tree2,
edge.color = edge.color,
type = "fan",
edge.width = 1.5,
label.offset = 0.1,
show.tip.label = FALSE)
tree2
# EXAMPLE
tree2 <- phytools::pbtree(n = 2000)
nodes <- c(3152, 4169, 3185, 4196, 3176, 4174)
edge.color <- color_clades(tree = tree2,
nodes = nodes)
plot(tree2,
edge.color = edge.color,
type = "fan",
edge.width = 1.5,
label.offset = 0.1,
show.tip.label = FALSE)
# EXAMPLE
tree2 <- phytools::pbtree(n = 50)
nodes <- c(52, 69, 85, 96, 76, 74)
edge.color <- color_clades(tree = tree2,
nodes = nodes)
plot(tree2,
edge.color = edge.color,
type = "fan",
edge.width = 1.5,
label.offset = 0.1,
show.tip.label = FALSE)
plot(tree2,
edge.color = edge.color,
type = "fan",
edge.width = 1.5,
label.offset = 0.1,
show.tip.label = TRUE)
pic_test <- function(data, tree, tip_states, anc = TRUE, ..){
map <- purrr:::map
select <- dplyr:::select
tips <- colnames(select_if(data, function(col) is.factor(col) | is.character(col)))
trait_data <- data %>% select(-tips) %>% colnames()
#checking to make sure data and tree in same order and re-ordering data if not
if(!all(data[[tips]] == tree$tip.label)) {
data <- data %>%
filter_(.[[tips]] %in% tree$tip.label) %>%
arrange(match(.[[tips]], tree$tip.label))
}
if(!all(data[[tips]] == tree$tip.label)) stop("phylogeny and data are not in the same order")
#make simmaps if phylogeny doesn't have mapped states
if(!any(class(tree) %in% c("simmap", "multiSimmap"))){
if(!hasArg(tip_states)) stop("need to include argument tip_states to make simmaps")
tree <- make.simmap(tree, tip_states, ...)
}
# function to get the mapped edge from each simmap
get_mapped_edge <- function(x){
data.frame(x$mapped.edge) %>%
rownames_to_column("edges") %>%
as_tibble() %>%
separate(edges, c("node_1", "node_2"), sep = ",")
}
if(any(class(tree) == "multiPhylo")){
n <- length(tree)
# getting mapped edge from each simmap
sim_tib <- tibble(sim_id = 1:n) %>%
mutate(simmap = tree,
mapped.edge = purrr:::map(simmap, get_mapped_edge))
} else {
n <- 1
# getting mapped edge from each simmap
sim_tib <- tibble(sim_id = 1:n) %>%
mutate(simmap = list(tree),
mapped.edge = purrr:::map(simmap, get_mapped_edge))
}
get_node_state <- function(x){
y <- sapply(x$maps,function(x) names(x)[1])
names(y) <- x$edge[,1]
y <- y[as.character(length(x$tip) + 1:x$Nnode)]
tibble(node = names(y), state = y)
}
#classifying nodes as transition or not based on occurance (i.e. occurs > 1)
node_states <- sim_tib %>%
mutate(state = map(simmap, get_node_state)) %>%
select(sim_id, state) %>%
unnest()
node_df <- sim_tib %>%
select(sim_id, mapped.edge) %>%
unnest() %>%
group_by(sim_id, node_1) %>%
mutate(edge = row_number(),
edge = ifelse(edge == 1, "right", "left")) %>%
gather(state, prob, -node_1, -node_2, -sim_id, -edge) %>%
filter(prob != 0) %>%
group_by(sim_id, node_1, node_2) %>%
add_count() %>%
mutate(node_type = ifelse(n > 1, "transition", state))
# data frame with all nodes
all_nodes <- node_df %>%
filter(node_type == "transition") %>%
ungroup() %>%
select(-prob) %>%
arrange(sim_id, node_1, node_2) %>%
right_join(node_states, by = c("sim_id", "node_1" = "node")) %>%
filter(state.x != state.y | is.na(state.x)) %>%
mutate(state = ifelse(is.na(node_type), state.y,
paste0(state.y, "_to_", state.x)),
node_type = ifelse(is.na(node_type), "same", "transition")) %>%
group_by(sim_id, state) %>%
add_count() %>%
select(sim_id, node_1, n, edge, node_type, state)
if(anc == TRUE){
# combines transition nodes with their associated PICs into a complete df
if(any(class(tree) == "multiPhylo")){
pics <- pic(data %>% select(trait_data) %>% .[[trait_data]], tree[[1]])
v <- setNames(data[[trait_data]], data[[tips]])
aces <- fastAnc(tree[[1]], v)
} else {
pics <- pic(data %>% select(trait_data) %>% .[[trait_data]], tree)
v <- setNames(data[[trait_data]], data[[tips]])
aces <- fastAnc(tree, v)
}
stopifnot(all(names(pics) == names(aces)))
pic_df <- data.frame(node_1 = names(pics), pic = pics, ace = as.vector(aces)) %>%
mutate(node_1 = as.character(node_1))
full_df <- all_nodes %>%
inner_join(pic_df, by = "node_1")
return(full_df)
} else {
return(all_nodes)
}
}
n <- 30
tr <- ladderize(pbtree(n = n))
reg <- c("a", "b", "c")
data <- cbind.data.frame(tips = tr$tip.label, x = rnorm(n, 0, 1))
states <- setNames(rep(reg, each = n/length(reg)), tr$tip.label)
states
tree <- make.simmap(tr, states, nsim = 5)
test <- pic_test(data, tree)
library(tidyverse)
test <- pic_test(data, tree)
pic_test(data, tree)
tree
tree[[1]]
pic_test(data, tree[[1]])
test <- pic_test(data, tree[[1]])
View(test)
a <- test %>% filter(node_type == "transition" & sim_id == 1)
a
plot(tree[[1]])
nodelabels(node = as.numeric(a$node_1), pch = 16, cex = 2, col = "black")
get_mapped_edge <- function(x){
data.frame(x$mapped.edge) %>%
rownames_to_column("edges") %>%
as_tibble() %>%
separate(edges, c("node_1", "node_2"), sep = ",")
}
get_mapped_edge(x = tree)
get_mapped_edge(x = tree[[1]])
get_mapped_edge(x = tree[[1]]) %>%
view()
pic_test(data, tree[[1]])
setwd("Dropbox/Macrosystems_BIRDS/")
load("OUTPUT/phylo_models_HWI_RData")
library(brms)
fit_mig_phy
conditional_effects(fit_hwi_bmass_phy)
fit_hwi_bmass_phy
fit_hwi_rs_phy
conditional_effects(fit_hwi_rs_phy)
fit_mig_phy
conditional_effects(fit_mig_phy)
library(tidyverse)
library(brms)
library(tidybayes)
library(cowplot)
library(ggtext)
#### Visualization #####
clrs <- NatParksPalettes::natparks.pals("BryceCanyon")
theme_nice <- function() {
theme_bw() + #base_family = "Noto Sans") +
theme(panel.grid.minor = element_blank(),
plot.background = element_rect(fill = "white", color = NA),
#plot.title = element_text(face = "bold"),
#strip.text = element_text(face = "bold"),
strip.background = element_rect(fill = "grey80", color = NA),
legend.title = element_text(face = "bold", size = 15),
legend.text = element_text(size = 12))
}
fit_hwi_phy
hyp <- paste(
"sd_Sciname__Intercept^2 /",
"(sd_Sciname__Intercept^2 + sd_Species1__Intercept^2 + sigma^2) = 0"
)
hypothesis(fit_hwi_phy, hyp, class = NULL)
hyp <- paste(
"sd_Sciname__Intercept^2 /",
"(sd_Sciname__Intercept^2 + sd__Intercept^2 + sigma^2) = 0"
)
hypothesis(fit_hwi_phy, hyp, class = NULL)
hyp <- "sd_phylo__Intercept^2 / (sd_phylo__Intercept^2 + sigma^2) = 0"
hyp <- "sd_Sciname__Intercept^2 / (sd_Sciname__Intercept^2 + sigma^2) = 0"
hypothesis(fit_hwi_phy, hyp, class = NULL)
hwi_psig <- hypothesis(fit_hwi_phy, hyp, class = NULL)
plot(hwi_psig)
hyp <- paste(
"sd_Sciname__Intercept^2 /",
"(sd_Sciname__Intercept^2 + sd_Species1__Intercept^2 + sigma^2) = 0"
)
hwi_psig <- hypothesis(fit_hwi_phy, hyp, class = NULL)
plot(hwi_psig)
hwi_psig
psig <- plot(hwi_psig)
psig
psig[[1]] +
theme_nice()
psig[[1]] +
theme_nice() +
theme(plot.subtitle = element_markdown(),
legend.position = "none",
axis.text = element_text(size = 15, colour = "black"),
axis.title = element_text(size = 17, colour = "black"))
psig[[1]] +
labs(x = expression(paste(lambda, sep = " - HWI")),
y = "Posterior distribution",# fill = "Covariable",
) +
theme_nice() +
theme(plot.subtitle = element_markdown(),
legend.position = "none",
axis.text = element_text(size = 15, colour = "black"),
axis.title = element_text(size = 17, colour = "black"))
psig[[1]] +
labs(x = expression(paste(lambda, sep = " - HWI")),
y = "Posterior distribution",# fill = "Covariable",
) +
theme_nice() +
theme(
plot.title = element_blank(),
legend.position = "none",
axis.text = element_text(size = 15, colour = "black"),
axis.title = element_text(size = 17, colour = "black")
)
psig[[1]] +
labs(x = expression(paste(lambda, sep = " - HWI")),
y = "Posterior distribution",# fill = "Covariable",
) +
theme_nice() +
theme(
plot.title = "none",
legend.position = "none",
axis.text = element_text(size = 15, colour = "black"),
axis.title = element_text(size = 17, colour = "black")
)
psig[[1]] +
labs(x = expression(paste(lambda, sep = " - HWI")),
y = "Posterior distribution",# fill = "Covariable",
) +
theme_nice() +
theme(
plot.title = NULL,
legend.position = "none",
axis.text = element_text(size = 15, colour = "black"),
axis.title = element_text(size = 17, colour = "black")
)
psig[[1]] +
labs(x = expression(paste(lambda, sep = " - HWI")),
y = "Posterior distribution",# fill = "Covariable",
) +
theme_nice() +
theme(
strip.background = element_blank(),
strip.text.x = element_blank(),
legend.position = "none",
axis.text = element_text(size = 15, colour = "black"),
axis.title = element_text(size = 17, colour = "black")
)
psig <- psig[[1]] +
labs(x = expression(paste(lambda, sep = " - HWI")),
y = "Posterior distribution",# fill = "Covariable",
) +
theme_nice() +
theme(
strip.background = element_blank(),
strip.text.x = element_blank(),
legend.position = "none",
axis.text = element_text(size = 15, colour = "black"),
axis.title = element_text(size = 17, colour = "black")
)
### save figures
pdf("FIGURES/phyloSig_HWI.pdf", width = 5, height = 5)
psig
dev.off()
fit_mig_phy
## probability of migration
post_hwi <- posterior_samples(fit_mig_phy) %>%
select(b_Intercept, b_scaleHWI) %>%
rename(intercept = b_Intercept, slope = b_scaleHWI) %>%
mutate(covar = "HWI")
post_hd <- posterior_samples(fit_mig_phy) %>%
select(b_Intercept, b_Habitat.Density) %>%
rename(intercept = b_Intercept, slope = b_Habitat.Density) %>%
mutate(covar = "HD")
post <- bind_rows(post_hwi, post_hd)
post %>%
ggplot(aes(x = slope, fill = factor(covar))) +
stat_halfeye(alpha = 0.85) +
scale_fill_manual(values = c(clrs[5], clrs[1])) +
geom_vline(xintercept = 0, size = 1, lty = 2, color = "darkgray") +
labs(x = expression(paste(beta, sep = "")),
y = "Posterior distribution", fill = "Covariable",
) +
scale_x_continuous(n.breaks = 6) +
#coord_cartesian(xlim = c(-0.6, 0.05)) +
theme_nice() +
theme(plot.subtitle = element_markdown(),
legend.position = c(0.15, 0.8),
axis.text = element_text(size = 15, colour = "black"),
axis.title = element_text(size = 17, colour = "black"))
load("OUTPUT/simple_models_HWI_RData")
post_hwi <- posterior_samples(fit_mig) %>%
select(b_Intercept, b_scaleHWI) %>%
rename(intercept = b_Intercept, slope = b_scaleHWI) %>%
mutate(covar = "HWI")
post_hd <- posterior_samples(fit_mig) %>%
select(b_Intercept, b_Habitat.Density) %>%
rename(intercept = b_Intercept, slope = b_Habitat.Density) %>%
mutate(covar = "HD")
post <- bind_rows(post_hwi, post_hd)
post %>%
ggplot(aes(x = slope, fill = factor(covar))) +
stat_halfeye(alpha = 0.85) +
scale_fill_manual(values = c(clrs[5], clrs[1])) +
geom_vline(xintercept = 0, size = 1, lty = 2, color = "darkgray") +
labs(x = expression(paste(beta, sep = "")),
y = "Posterior distribution", fill = "Covariable",
) +
scale_x_continuous(n.breaks = 6) +
#coord_cartesian(xlim = c(-0.6, 0.05)) +
theme_nice() +
theme(plot.subtitle = element_markdown(),
legend.position = c(0.15, 0.8),
axis.text = element_text(size = 15, colour = "black"),
axis.title = element_text(size = 17, colour = "black"))
pdf("FIGURES/betas_migration.pdf", width = 5, height = 5)
post %>%
ggplot(aes(x = slope, fill = factor(covar))) +
stat_halfeye(alpha = 0.85) +
scale_fill_manual(values = c(clrs[5], clrs[1])) +
geom_vline(xintercept = 0, size = 1, lty = 2, color = "darkgray") +
labs(x = expression(paste(beta, sep = "")),
y = "Posterior distribution", fill = "Covariable",
) +
scale_x_continuous(n.breaks = 6) +
#coord_cartesian(xlim = c(-0.6, 0.05)) +
theme_nice() +
theme(plot.subtitle = element_markdown(),
legend.position = c(0.15, 0.8),
axis.text = element_text(size = 15, colour = "black"),
axis.title = element_text(size = 17, colour = "black"))
dev.off()
pdf("FIGURES/betas_migration.pdf", width = 6, height = 5)
post %>%
ggplot(aes(x = slope, fill = factor(covar))) +
stat_halfeye(alpha = 0.85) +
scale_fill_manual(values = c(clrs[5], clrs[1])) +
geom_vline(xintercept = 0, size = 1, lty = 2, color = "darkgray") +
labs(x = expression(paste(beta, sep = "")),
y = "Posterior distribution", fill = "Covariable",
) +
scale_x_continuous(n.breaks = 6) +
#coord_cartesian(xlim = c(-0.6, 0.05)) +
theme_nice() +
theme(plot.subtitle = element_markdown(),
legend.position = c(0.15, 0.8),
axis.text = element_text(size = 15, colour = "black"),
axis.title = element_text(size = 17, colour = "black"))
dev.off()
pdf("FIGURES/betas_migration.pdf", width = 5, height = 5)
post %>%
ggplot(aes(x = slope, fill = factor(covar))) +
stat_halfeye(alpha = 0.85) +
scale_fill_manual(values = c(clrs[5], clrs[1])) +
geom_vline(xintercept = 0, size = 1, lty = 2, color = "darkgray") +
labs(x = expression(paste(beta, sep = "")),
y = "Posterior distribution", fill = "Covariable",
) +
scale_x_continuous(n.breaks = 6) +
#coord_cartesian(xlim = c(-0.6, 0.05)) +
theme_nice() +
theme(plot.subtitle = element_markdown(),
legend.position = c(0.15, 0.8),
axis.text = element_text(size = 15, colour = "black"),
axis.title = element_text(size = 17, colour = "black"))
dev.off()
# https://covid.cdc.gov/covid-data-tracker/#trends_weeklycases_select_27
# Get data from the CDC
url_data <- "https://data.cdc.gov/api/views/9mfq-cb36/rows.csv?accessType=DOWNLOAD"
covid_us <- read.csv(url_data)
posterior_samples(fit_mig_phy)
post_hwi
poste <- posterior_samples(fit_mig_phy)
View(poste)
postPhy <- posterior_samples(fit_mig_phy) %>%
select(sd_sciname__Intercept) %>%
rename(Phylogenetic = sd_sciname__Intercept) %>%
mutate(covar = "Phylogeny")
postPhy <- posterior_samples(fit_mig_phy) %>%
select("sd_sciname__Intercept") %>%
rename(Phylogenetic = "sd_sciname__Intercept") %>%
mutate(covar = "Phylogeny")
postPhy <- posterior_samples(fit_mig_phy) %>%
select("sd_Sciname__Intercept") %>%
rename(Phylogenetic = "sd_Sciname__Intercept") %>%
mutate(covar = "Phylogeny")
postSpp <- posterior_samples(fit_mig_phy) %>%
select("sd_Species1__Intercept") %>%
rename(Phylogenetic = "sd_Species1__Intercept") %>%
mutate(covar = "Taxonomy")
post2 <- bind_rows(postPhy, postSpp)
post2 %>%
ggplot(aes(x = Phylogenetic, fill = factor(covar))) +
stat_halfeye(alpha = 0.85) +
scale_fill_manual(values = c(clrs[5], clrs[1])) +
geom_vline(xintercept = 0, size = 1, lty = 2, color = "darkgray")
post2 %>%
ggplot(aes(x = Phylogenetic, fill = factor(covar))) +
stat_halfeye(alpha = 0.85) +
scale_fill_manual(values = c(clrs[5], clrs[1])) +
geom_vline(xintercept = 0, size = 1, lty = 2, color = "darkgray") +
labs(x = expression(paste(beta, sep = "")),
y = "Posterior distribution", fill = "Effect",
) +
scale_x_continuous(n.breaks = 6) +
#coord_cartesian(xlim = c(-0.6, 0.05)) +
theme_nice() +
theme(plot.subtitle = element_markdown(),
legend.position = c(0.15, 0.8),
axis.text = element_text(size = 15, colour = "black"),
axis.title = element_text(size = 17, colour = "black"))
covid_us <- read.csv(url_data)
glimpse(covid_us)
#| eval: false
covid_us %>%
arrange(state) %>%
drop_na(tot_cases) %>%
ggplot(aes(y = state, x = tot_cases)) +
geom_bar(stat = "identity") +
labs(x = "Number of cases", y = "Reported cases by State") +
scale_x_continuous(labels = scales::label_number(suffix = " M", scale = 1e-6)) +
theme_nice()
setwd("../../Documents/GitHub/BiodiversityScience/Spring2023/")
save(covid_us, file = "Lab_3/Data/covidUS.RData")
#| eval: false
covid_us <- covid_us %>%
mutate(Date = submission_date) %>%
mutate(Date = mdy(Date)) %>%
select(Date, everything()) %>%
separate(submission_date, sep = "/", into = c("month", "day", "year"))
#| eval: false
library(tidyverse)
library(lubridate)
library(coronavirus)
library(PrettyCols)
library(scales)
library(deSolve)
