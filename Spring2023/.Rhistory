type = "fan",
edge.width = 1.5,
label.offset = 0.1,
show.tip.label = FALSE)
# EXAMPLE
tree2 <- phytools::pbtree(n = 1500)
nodes <- c(3152, 4169, 3185, 4196, 3176, 4174)
edge.color <- color_clades(tree = tree2,
nodes = nodes)
plot(tree2,
edge.color = edge.color,
type = "fan",
edge.width = 1.5,
label.offset = 0.1,
show.tip.label = FALSE)
tree2
# EXAMPLE
tree2 <- phytools::pbtree(n = 2000)
nodes <- c(3152, 4169, 3185, 4196, 3176, 4174)
edge.color <- color_clades(tree = tree2,
nodes = nodes)
plot(tree2,
edge.color = edge.color,
type = "fan",
edge.width = 1.5,
label.offset = 0.1,
show.tip.label = FALSE)
# EXAMPLE
tree2 <- phytools::pbtree(n = 50)
nodes <- c(52, 69, 85, 96, 76, 74)
edge.color <- color_clades(tree = tree2,
nodes = nodes)
plot(tree2,
edge.color = edge.color,
type = "fan",
edge.width = 1.5,
label.offset = 0.1,
show.tip.label = FALSE)
plot(tree2,
edge.color = edge.color,
type = "fan",
edge.width = 1.5,
label.offset = 0.1,
show.tip.label = TRUE)
pic_test <- function(data, tree, tip_states, anc = TRUE, ..){
map <- purrr:::map
select <- dplyr:::select
tips <- colnames(select_if(data, function(col) is.factor(col) | is.character(col)))
trait_data <- data %>% select(-tips) %>% colnames()
#checking to make sure data and tree in same order and re-ordering data if not
if(!all(data[[tips]] == tree$tip.label)) {
data <- data %>%
filter_(.[[tips]] %in% tree$tip.label) %>%
arrange(match(.[[tips]], tree$tip.label))
}
if(!all(data[[tips]] == tree$tip.label)) stop("phylogeny and data are not in the same order")
#make simmaps if phylogeny doesn't have mapped states
if(!any(class(tree) %in% c("simmap", "multiSimmap"))){
if(!hasArg(tip_states)) stop("need to include argument tip_states to make simmaps")
tree <- make.simmap(tree, tip_states, ...)
}
# function to get the mapped edge from each simmap
get_mapped_edge <- function(x){
data.frame(x$mapped.edge) %>%
rownames_to_column("edges") %>%
as_tibble() %>%
separate(edges, c("node_1", "node_2"), sep = ",")
}
if(any(class(tree) == "multiPhylo")){
n <- length(tree)
# getting mapped edge from each simmap
sim_tib <- tibble(sim_id = 1:n) %>%
mutate(simmap = tree,
mapped.edge = purrr:::map(simmap, get_mapped_edge))
} else {
n <- 1
# getting mapped edge from each simmap
sim_tib <- tibble(sim_id = 1:n) %>%
mutate(simmap = list(tree),
mapped.edge = purrr:::map(simmap, get_mapped_edge))
}
get_node_state <- function(x){
y <- sapply(x$maps,function(x) names(x)[1])
names(y) <- x$edge[,1]
y <- y[as.character(length(x$tip) + 1:x$Nnode)]
tibble(node = names(y), state = y)
}
#classifying nodes as transition or not based on occurance (i.e. occurs > 1)
node_states <- sim_tib %>%
mutate(state = map(simmap, get_node_state)) %>%
select(sim_id, state) %>%
unnest()
node_df <- sim_tib %>%
select(sim_id, mapped.edge) %>%
unnest() %>%
group_by(sim_id, node_1) %>%
mutate(edge = row_number(),
edge = ifelse(edge == 1, "right", "left")) %>%
gather(state, prob, -node_1, -node_2, -sim_id, -edge) %>%
filter(prob != 0) %>%
group_by(sim_id, node_1, node_2) %>%
add_count() %>%
mutate(node_type = ifelse(n > 1, "transition", state))
# data frame with all nodes
all_nodes <- node_df %>%
filter(node_type == "transition") %>%
ungroup() %>%
select(-prob) %>%
arrange(sim_id, node_1, node_2) %>%
right_join(node_states, by = c("sim_id", "node_1" = "node")) %>%
filter(state.x != state.y | is.na(state.x)) %>%
mutate(state = ifelse(is.na(node_type), state.y,
paste0(state.y, "_to_", state.x)),
node_type = ifelse(is.na(node_type), "same", "transition")) %>%
group_by(sim_id, state) %>%
add_count() %>%
select(sim_id, node_1, n, edge, node_type, state)
if(anc == TRUE){
# combines transition nodes with their associated PICs into a complete df
if(any(class(tree) == "multiPhylo")){
pics <- pic(data %>% select(trait_data) %>% .[[trait_data]], tree[[1]])
v <- setNames(data[[trait_data]], data[[tips]])
aces <- fastAnc(tree[[1]], v)
} else {
pics <- pic(data %>% select(trait_data) %>% .[[trait_data]], tree)
v <- setNames(data[[trait_data]], data[[tips]])
aces <- fastAnc(tree, v)
}
stopifnot(all(names(pics) == names(aces)))
pic_df <- data.frame(node_1 = names(pics), pic = pics, ace = as.vector(aces)) %>%
mutate(node_1 = as.character(node_1))
full_df <- all_nodes %>%
inner_join(pic_df, by = "node_1")
return(full_df)
} else {
return(all_nodes)
}
}
n <- 30
tr <- ladderize(pbtree(n = n))
reg <- c("a", "b", "c")
data <- cbind.data.frame(tips = tr$tip.label, x = rnorm(n, 0, 1))
states <- setNames(rep(reg, each = n/length(reg)), tr$tip.label)
states
tree <- make.simmap(tr, states, nsim = 5)
test <- pic_test(data, tree)
library(tidyverse)
test <- pic_test(data, tree)
pic_test(data, tree)
tree
tree[[1]]
pic_test(data, tree[[1]])
test <- pic_test(data, tree[[1]])
View(test)
a <- test %>% filter(node_type == "transition" & sim_id == 1)
a
plot(tree[[1]])
nodelabels(node = as.numeric(a$node_1), pch = 16, cex = 2, col = "black")
get_mapped_edge <- function(x){
data.frame(x$mapped.edge) %>%
rownames_to_column("edges") %>%
as_tibble() %>%
separate(edges, c("node_1", "node_2"), sep = ",")
}
get_mapped_edge(x = tree)
get_mapped_edge(x = tree[[1]])
get_mapped_edge(x = tree[[1]]) %>%
view()
pic_test(data, tree[[1]])
githubURL <- "https://github.com/jesusNPL/BiodiversityScience/raw/master/Spring2023/Lab_3/Data/covidUS.RData"
load(url(githubURL))
glimpse(covid_us)
#| eval: false
library(tidyverse)
library(lubridate)
library(coronavirus)
library(PrettyCols)
library(scales)
library(deSolve)
#| eval: false
data("coronavirus")
glimpse(coronavirus)
#| eval: false
corona <- refresh_coronavirus_jhu()
corona %>%
head(10)
setwd("Documents/GitHub/BiodiversityScience/Spring2023/")
#| eval: false
library(tidyverse)
library(lubridate)
library(coronavirus)
library(PrettyCols)
library(scales)
library(deSolve)
#| eval: false
data("coronavirus")
glimpse(coronavirus)
#| eval: false
corona <- refresh_coronavirus_jhu()
corona %>%
head(10)
#| eval: false
# Get top confirmed cases by country
corona %>%
filter(data_type == "cases_new") %>%
group_by(location) %>%
summarise(total = sum(value)) %>%
arrange(-total) %>%
head(20) %>%
ggplot(aes(y = as.factor(location), x = total)) +
geom_bar(stat = "identity")
#| eval: false
# Aux function for visualization
theme_nice <- function() {
theme_bw() + #base_family = "Noto Sans") +
theme(panel.grid.minor = element_blank(),
plot.background = element_rect(fill = "white", color = NA),
#plot.title = element_text(face = "bold"),
#strip.text = element_text(face = "bold"),
strip.background = element_rect(fill = "grey80", color = NA),
legend.title = element_text(face = "bold", size = 15),
legend.text = element_text(size = 12))
}
# Get top confirmed cases by country
corona %>%
filter(data_type == "cases_new") %>%
group_by(location) %>%
summarise(total = sum(value)) %>%
arrange(-total) %>%
head(20) %>%
ggplot(aes(y = as.factor(location), x = total)) +
geom_bar(stat = "identity", alpha = 0.7) +
scale_x_continuous(labels = scales::label_number(suffix = " M", scale = 1e-6)) +
labs(x = "Number of cases", y = "Countries with more reported cases") +
theme_nice()
#| eval: false
corona_us <- corona %>%
filter(location == "US") %>%
arrange(desc(date)) # sort the data according dates
#| eval: false
infected_us <- corona %>%
filter(location == "US") %>%
arrange(desc(date)) %>%
filter(data_type == "cases_new")
deaths_us <- corona %>%
filter(location == "US") %>%
arrange(desc(date)) %>%
filter(data_type == "deaths_new")
recovered_us <- corona %>%
filter(location == "US") %>%
arrange(desc(date)) %>%
filter(data_type == "recovered_new")
head(infected_us)
#| eval: false
corona_us %>%
filter(data_type == "cases_new") %>%
ggplot(aes(x = as.POSIXct(date), y = value)) +
geom_point(color = "gray") +
labs(x = NULL, y = "COVID-19 new cases") +
geom_line(mapping = aes(x = as.POSIXct(date)), linewidth = 2,
colour = alpha(PrettyCols::prettycols("Purples")[4], 0.3)) +
geom_smooth(colour = PrettyCols::prettycols("Purples")[1], linewidth = 2) +
scale_y_continuous(labels = scales::label_number(suffix = " M", scale = 1e-6)) +
scale_x_datetime(date_breaks = "2 month", labels = scales::label_date_short()) +
theme_nice()
#| eval: false
# https://covid.cdc.gov/covid-data-tracker/#trends_weeklycases_select_27
# Get data from the CDC
url_data <- "https://data.cdc.gov/api/views/9mfq-cb36/rows.csv?accessType=DOWNLOAD"
covid_us <- read.csv(url_data)
glimpse(covid_us)
#| eval: false
covid_us %>%
arrange(state) %>%
drop_na(tot_cases) %>%
ggplot(aes(y = state, x = tot_cases)) +
geom_bar(stat = "identity") +
labs(x = "Number of cases", y = "Reported cases by State") +
scale_x_continuous(labels = scales::label_number(suffix = " M", scale = 1e-6)) +
theme_nice()
#| eval: false
covid_us <- covid_us %>%
mutate(Date = submission_date) %>%
mutate(Date = mdy(Date)) %>%
select(Date, everything()) %>%
separate(submission_date, sep = "/", into = c("month", "day", "year"))
# Sort the data in an increasing order
covid_us <- covid_us[order(covid_us$Date), ]
head(covid_us)
#| eval: false
covid_mn <- covid_us %>%
filter(state == "MN")
head(covid_mn)
#| eval: false
covid_mn %>%
ggplot(aes(x = as.POSIXct(Date), y = new_case)) +
geom_point(color = "gray") +
labs(x = NULL, y = "COVID-19 new cases") +
geom_line(mapping = aes(x = as.POSIXct(Date)), linewidth = 2,
colour = alpha(PrettyCols::prettycols("Purples")[4], 0.3)) +
geom_smooth(colour = PrettyCols::prettycols("Purples")[1], linewidth = 2) +
scale_y_continuous(labels = scales::label_number(suffix = " M", scale = 1e-6)) +
scale_x_datetime(date_breaks = "2 month", labels = label_date_short()) +
theme_nice()
#| eval: false
covid_mn %>%
ggplot(aes(x = as.POSIXct(Date), y = tot_cases)) +
geom_point(color = "gray") +
labs(x = NULL, y = "Total COVID-19 cases") +
geom_line(mapping = aes(x = as.POSIXct(Date)), linewidth = 2,
colour = alpha(PrettyCols::prettycols("Purples")[4], 0.3)) +
geom_smooth(colour = PrettyCols::prettycols("Purples")[1], linewidth = 1) +
scale_y_continuous(labels = scales::label_number(suffix = " M", scale = 1e-6)) +
scale_x_datetime(date_breaks = "2 month", labels = label_date_short()) +
theme_nice()
#| eval: false
covid_mn %>%
ggplot(aes(x = as.POSIXct(Date), y = abs(new_death))) +
geom_point(color = "gray") +
labs(x = NULL, y = "Number of Deaths") +
geom_line(mapping = aes(x = as.POSIXct(Date)), linewidth = 2,
colour = alpha(PrettyCols::prettycols("Purples")[4], 0.3)) +
geom_smooth(colour = PrettyCols::prettycols("Purples")[1], linewidth = 1) +
scale_y_continuous(labels = scales::label_number(suffix = " K", scale = 1e-6)) +
scale_x_datetime(date_breaks = "2 month", labels = label_date_short()) +
theme_nice()
#| eval: false
SIR <- function(time, state, parameters) {
par <- as.list(c(state, parameters))
with(par, {
dS <- -Beta * I * S / N # Equation one
dI <- Beta * I * S / N - Gamma * I # Equation two
dR <- Gamma * I # Equation three
list(c(dS, dI, dR))
})
}
N <- 5686649 # Total population for the State of Minnesota for the 2020
start_date <- "2020-03-06"
end_date <- "2020-05-10"
# isolating the infected subjects in the state of Minnesota since the start date
Infections <- covid_mn %>%
filter(Date >= ymd(start_date) & Date <= ymd(end_date))
#Infected2 <- subset(covid_mn, Date >= ymd(start_date) & Date <= ymd(end_date))$new_case
#| eval: false
Infections %>%
ggplot(aes(x = as.POSIXct(Date), y = log(new_case))) +
geom_point(color = "gray") +
#geom_line(mapping = aes(x = as.POSIXct(Date)), linewidth = 2,
#         colour = alpha(PrettyCols::prettycols("Purples")[4], 0.3)) +
geom_smooth(colour = PrettyCols::prettycols("Purples")[1], linewidth = 1) +
labs(x = NULL, y = "log - COVID-19 cases") +
theme_nice()
#| eval: false
# ODE does not like tidy format, so we are going to isolate the number of cases in R base.
Infected <- Infections$new_case
Days <- 1:length(Infected) # Number of days since the first case
init <- c(
S = N - Infected[1], # Susceptible group
I = Infected[1], # Infected group
R = 0 # Recovered group.
)
#| eval: false
Opt <- optim(c(0.5, 0.5),
RSS,
method = "L-BFGS-B",
lower = c(0, 0),
upper = c(1, 1)
)
#| eval: false
RSS <- function(parameters) {
names(parameters) <- c("Beta", "Gamma")
out <- ode(y = init, times = Days, func = SIR, parms = parameters)
# the out object includes the SIR function we wrote above
fit <- out[, 3]
sum((Infected - fit)^2)
}
#| eval: false
SIR <- function(time, state, parameters) {
par <- as.list(c(state, parameters))
with(par, {
dS <- -Beta * I * S / N # Equation one
dI <- Beta * I * S / N - Gamma * I # Equation two
dR <- Gamma * I # Equation three
list(c(dS, dI, dR))
})
}
#| eval: false
RSS <- function(parameters) {
names(parameters) <- c("Beta", "Gamma")
out <- ode(y = init, times = Days, func = SIR, parms = parameters)
# the out object includes the SIR function we wrote above
fit <- out[, 3]
sum((Infected - fit)^2)
}
N <- 5686649 # Total population for the State of Minnesota for the 2020
start_date <- "2020-03-06"
end_date <- "2020-05-10"
# isolating the infected subjects in the state of Minnesota since the start date
Infections <- covid_mn %>%
filter(Date >= ymd(start_date) & Date <= ymd(end_date))
#Infected2 <- subset(covid_mn, Date >= ymd(start_date) & Date <= ymd(end_date))$new_case
#| eval: false
Infections %>%
ggplot(aes(x = as.POSIXct(Date), y = log(new_case))) +
geom_point(color = "gray") +
#geom_line(mapping = aes(x = as.POSIXct(Date)), linewidth = 2,
#         colour = alpha(PrettyCols::prettycols("Purples")[4], 0.3)) +
geom_smooth(colour = PrettyCols::prettycols("Purples")[1], linewidth = 1) +
labs(x = NULL, y = "log - COVID-19 cases") +
theme_nice()
#| eval: false
# ODE does not like tidy format, so we are going to isolate the number of cases in R base.
Infected <- Infections$new_case
Days <- 1:length(Infected) # Number of days since the first case
init <- c(
S = N - Infected[1], # Susceptible group
I = Infected[1], # Infected group
R = 0 # Recovered group.
)
#| eval: false
Opt <- optim(c(0.5, 0.5),
RSS,
method = "L-BFGS-B",
lower = c(0, 0),
upper = c(1, 1)
)
#| eval: false
# optimize with some sensible conditions
Opt$message
# [1] "CONVERGENCE: REL_REDUCTION_OF_F <= FACTR*EPSMCH"
#| eval: false
Opt_par <- setNames(Opt$par, c("Beta", "Gamma"))
Opt_par
#| eval: false
# get the fitted values from our SIR model
fit_incidence <- data.frame(ode(
y = init, times = Days,
func = SIR, parms = Opt_par
))
head(fit_incidence)
tail(fit_incidence)
#| eval: false
matplot(fit_incidence$time, fit_incidence$I,
type = "l", log = "y",
xlab = "Days", ylab = "Number of infected subjects",
lwd = 2, lty = 1)
points(Days, Infected)
#| eval: false
R0 <- setNames(Opt_par["Beta"] / Opt_par["Gamma"], "R0")
round(R0, 3)
#| eval: false
times <- 1:350 # time in days
fit_350 <- data.frame(ode(
y = init, times = times,
func = SIR, parms = Opt_par))
head(fit_350)
tail(fit_350)
#| eval: false
matplot(fit_350$time, fit_350[, 2:4], type = "l",
xlab = "Days", ylab = "Number of subjects",
lwd = 2, lty = 1, col = cols)
matplot(fit_350$time, fit_350[, 2:4], type = "l",
xlab = "Days", ylab = "Number of subjects",
lwd = 2, lty = 1, col = cols)
matplot(fit_350$time, fit_350[, 2:4], type = "l",
xlab = "Days", ylab = "Number of subjects",
lwd = 2, lty = 1, col = cols)
fit_350$time
fit_350[, 2:4]
matplot(fit_350$time, fit_350[, 2:4], type = "l",
xlab = "Days", ylab = "Number of subjects",
lwd = 2, lty = 1, col = cols)
head(fit_350)
tail(fit_350)
times <- 1:150 # time in days
fit_350 <- data.frame(ode(
y = init, times = times,
func = SIR, parms = Opt_par))
head(fit_350)
tail(fit_350)
matplot(fit_350$time, fit_350[, 2:4], type = "l",
xlab = "Days", ylab = "Number of subjects",
lwd = 2, lty = 1, col = cols)
times <- 1:350 # time in days
fit_350 <- data.frame(ode(
y = init, times = times,
func = SIR, parms = Opt_par))
head(fit_350)
tail(fit_350)
cols <- 1:3 # colors: black = susceptible, red = infected and green = recovered
matplot(fit_350$time, fit_350[, 2:4], type = "l",
xlab = "Days", ylab = "Number of subjects",
lwd = 2, lty = 1, col = cols)
matplot(fit_350$time, fit_350[, 2:4], type = "l",
xlab = "Days", ylab = "Number of subjects",
lwd = 2, lty = 1, col = cols)
legend("left", c("Susceptible", "Infected", "Recovered"),
lty = 1, lwd = 2, col = cols, inset = 0.05)
matplot(fit_350$time, fit_350[ , 2:4], type = "l",
xlab = "Days", ylab = "Number of subjects",
lwd = 2, lty = 1, col = cols, log = "y")
## Warning in xy.coords(x, y, xlabel, ylabel, log = log): 1 y value <= 0
## omitted from logarithmic plot
points(Days, Infected)
legend("bottomright", c("Susceptible", "Infected", "Recovered"),
lty = 1, lwd = 2, col = cols, inset = 0.05)
title("SIR model 2019-nCoV United States", outer = TRUE, line = -2)
#| eval: false
# Peak of the pandemic for the first 60 days
fit_incidence[fit_incidence$I == max(fit_incidence$I), c("time", "I")]
#| eval: false
max(fit_incidence$I) * 0.02 # Assuming 2% of fatality rate
