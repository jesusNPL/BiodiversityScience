edge.color = edge.color,
type = "fan",
edge.width = 1.5,
label.offset = 0.1,
show.tip.label = FALSE)
edge.color
# EXAMPLE
tree2 <- phytools::pbtree(n = 1500)
nodes <- c(5152, 5169, 5185, 5196, 5176, 5174)
edge.color <- color_clades(tree = tree2,
nodes = nodes)
plot(tree2,
edge.color = edge.color,
type = "fan",
edge.width = 1.5,
label.offset = 0.1,
show.tip.label = FALSE)
# EXAMPLE
tree2 <- phytools::pbtree(n = 1500)
nodes <- c(3152, 4169, 3185, 4196, 3176, 4174)
edge.color <- color_clades(tree = tree2,
nodes = nodes)
plot(tree2,
edge.color = edge.color,
type = "fan",
edge.width = 1.5,
label.offset = 0.1,
show.tip.label = FALSE)
tree2
# EXAMPLE
tree2 <- phytools::pbtree(n = 2000)
nodes <- c(3152, 4169, 3185, 4196, 3176, 4174)
edge.color <- color_clades(tree = tree2,
nodes = nodes)
plot(tree2,
edge.color = edge.color,
type = "fan",
edge.width = 1.5,
label.offset = 0.1,
show.tip.label = FALSE)
# EXAMPLE
tree2 <- phytools::pbtree(n = 50)
nodes <- c(52, 69, 85, 96, 76, 74)
edge.color <- color_clades(tree = tree2,
nodes = nodes)
plot(tree2,
edge.color = edge.color,
type = "fan",
edge.width = 1.5,
label.offset = 0.1,
show.tip.label = FALSE)
plot(tree2,
edge.color = edge.color,
type = "fan",
edge.width = 1.5,
label.offset = 0.1,
show.tip.label = TRUE)
pic_test <- function(data, tree, tip_states, anc = TRUE, ..){
map <- purrr:::map
select <- dplyr:::select
tips <- colnames(select_if(data, function(col) is.factor(col) | is.character(col)))
trait_data <- data %>% select(-tips) %>% colnames()
#checking to make sure data and tree in same order and re-ordering data if not
if(!all(data[[tips]] == tree$tip.label)) {
data <- data %>%
filter_(.[[tips]] %in% tree$tip.label) %>%
arrange(match(.[[tips]], tree$tip.label))
}
if(!all(data[[tips]] == tree$tip.label)) stop("phylogeny and data are not in the same order")
#make simmaps if phylogeny doesn't have mapped states
if(!any(class(tree) %in% c("simmap", "multiSimmap"))){
if(!hasArg(tip_states)) stop("need to include argument tip_states to make simmaps")
tree <- make.simmap(tree, tip_states, ...)
}
# function to get the mapped edge from each simmap
get_mapped_edge <- function(x){
data.frame(x$mapped.edge) %>%
rownames_to_column("edges") %>%
as_tibble() %>%
separate(edges, c("node_1", "node_2"), sep = ",")
}
if(any(class(tree) == "multiPhylo")){
n <- length(tree)
# getting mapped edge from each simmap
sim_tib <- tibble(sim_id = 1:n) %>%
mutate(simmap = tree,
mapped.edge = purrr:::map(simmap, get_mapped_edge))
} else {
n <- 1
# getting mapped edge from each simmap
sim_tib <- tibble(sim_id = 1:n) %>%
mutate(simmap = list(tree),
mapped.edge = purrr:::map(simmap, get_mapped_edge))
}
get_node_state <- function(x){
y <- sapply(x$maps,function(x) names(x)[1])
names(y) <- x$edge[,1]
y <- y[as.character(length(x$tip) + 1:x$Nnode)]
tibble(node = names(y), state = y)
}
#classifying nodes as transition or not based on occurance (i.e. occurs > 1)
node_states <- sim_tib %>%
mutate(state = map(simmap, get_node_state)) %>%
select(sim_id, state) %>%
unnest()
node_df <- sim_tib %>%
select(sim_id, mapped.edge) %>%
unnest() %>%
group_by(sim_id, node_1) %>%
mutate(edge = row_number(),
edge = ifelse(edge == 1, "right", "left")) %>%
gather(state, prob, -node_1, -node_2, -sim_id, -edge) %>%
filter(prob != 0) %>%
group_by(sim_id, node_1, node_2) %>%
add_count() %>%
mutate(node_type = ifelse(n > 1, "transition", state))
# data frame with all nodes
all_nodes <- node_df %>%
filter(node_type == "transition") %>%
ungroup() %>%
select(-prob) %>%
arrange(sim_id, node_1, node_2) %>%
right_join(node_states, by = c("sim_id", "node_1" = "node")) %>%
filter(state.x != state.y | is.na(state.x)) %>%
mutate(state = ifelse(is.na(node_type), state.y,
paste0(state.y, "_to_", state.x)),
node_type = ifelse(is.na(node_type), "same", "transition")) %>%
group_by(sim_id, state) %>%
add_count() %>%
select(sim_id, node_1, n, edge, node_type, state)
if(anc == TRUE){
# combines transition nodes with their associated PICs into a complete df
if(any(class(tree) == "multiPhylo")){
pics <- pic(data %>% select(trait_data) %>% .[[trait_data]], tree[[1]])
v <- setNames(data[[trait_data]], data[[tips]])
aces <- fastAnc(tree[[1]], v)
} else {
pics <- pic(data %>% select(trait_data) %>% .[[trait_data]], tree)
v <- setNames(data[[trait_data]], data[[tips]])
aces <- fastAnc(tree, v)
}
stopifnot(all(names(pics) == names(aces)))
pic_df <- data.frame(node_1 = names(pics), pic = pics, ace = as.vector(aces)) %>%
mutate(node_1 = as.character(node_1))
full_df <- all_nodes %>%
inner_join(pic_df, by = "node_1")
return(full_df)
} else {
return(all_nodes)
}
}
n <- 30
tr <- ladderize(pbtree(n = n))
reg <- c("a", "b", "c")
data <- cbind.data.frame(tips = tr$tip.label, x = rnorm(n, 0, 1))
states <- setNames(rep(reg, each = n/length(reg)), tr$tip.label)
states
tree <- make.simmap(tr, states, nsim = 5)
test <- pic_test(data, tree)
library(tidyverse)
test <- pic_test(data, tree)
pic_test(data, tree)
tree
tree[[1]]
pic_test(data, tree[[1]])
test <- pic_test(data, tree[[1]])
View(test)
a <- test %>% filter(node_type == "transition" & sim_id == 1)
a
plot(tree[[1]])
nodelabels(node = as.numeric(a$node_1), pch = 16, cex = 2, col = "black")
get_mapped_edge <- function(x){
data.frame(x$mapped.edge) %>%
rownames_to_column("edges") %>%
as_tibble() %>%
separate(edges, c("node_1", "node_2"), sep = ",")
}
get_mapped_edge(x = tree)
get_mapped_edge(x = tree[[1]])
get_mapped_edge(x = tree[[1]]) %>%
view()
pic_test(data, tree[[1]])
setwd("Documents/GitHub/BiodiversityScience/Spring2023/")
packages <- c("coronavirus", "deSolve", "lubridate")
installed_packages <- packages %in% rownames(installed.packages())
if (any(installed_packages == FALSE)) {
install.packages(packages[!installed_packages], dependencies = TRUE)
}
#| eval: false
library(tidyverse)
library(lubridate)
#| eval: false
data("coronavirus")
glimpse()
library(coronavirus)
data("coronavirus")
glimpse(coronavirus)
corona <- refresh_coronavirus_jhu()
coronavirus %>%
filter(type == "confirmed")
coronavirus %>%
filter(type == "confirmed") %>%
group_by(country) %>%
summarise(total = sum(cases)) %>%
arrange(-total)
coronavirus %>%
filter(type == "confirmed") %>%
group_by(country) %>%
summarise(total = sum(cases)) %>%
arrange(-total) %>%
head(20) %>%
ggplot(aes(y = country, x = total)) +
geom_bar(stat = "identity") +
labs(x = "Number of cases", y = "Countries with more reported cases")
# Get top confirmed cases by country
corona_total <- coronavirus %>%
filter(type == "confirmed") %>%
group_by(country) %>%
summarise(total = sum(cases)) %>%
arrange(-total) %>%
head(20) %>%
ggplot(aes(y = country, x = total)) +
geom_bar(stat = "identity") +
labs(x = "Number of cases", y = "Countries with more reported cases")
corona_total
# Aux function for visualization
theme_nice <- function() {
theme_bw() + #base_family = "Noto Sans") +
theme(panel.grid.minor = element_blank(),
plot.background = element_rect(fill = "white", color = NA),
#plot.title = element_text(face = "bold"),
#strip.text = element_text(face = "bold"),
strip.background = element_rect(fill = "grey80", color = NA),
legend.title = element_text(face = "bold", size = 15),
legend.text = element_text(size = 12))
}
coronavirus %>%
filter(type == "confirmed") %>%
group_by(country) %>%
summarise(total = sum(cases)) %>%
arrange(-total) %>%
head(20) %>%
ggplot(aes(y = country, x = total)) +
geom_bar(stat = "identity") +
labs(x = "Number of cases", y = "Countries with more reported cases") +
theme_nice()
# Get top confirmed cases by country
coronavirus %>%
filter(type == "confirmed") %>%
group_by(country) %>%
summarise(total = sum(cases)) %>%
arrange(-total) %>%
head(20) %>%
order_by(total) %>%
ggplot(aes(y = country, x = total)) +
geom_bar(stat = "identity") +
labs(x = "Number of cases", y = "Countries with more reported cases") +
theme_nice()
# Get top confirmed cases by country
coronavirus %>%
filter(type == "confirmed") %>%
group_by(country) %>%
summarise(total = sum(cases)) %>%
arrange(-total) %>%
head(20) %>%
order_by(country) %>%
ggplot(aes(y = country, x = total)) +
geom_bar(stat = "identity") +
labs(x = "Number of cases", y = "Countries with more reported cases") +
theme_nice()
# Get top confirmed cases by country
coronavirus %>%
filter(type == "confirmed") %>%
group_by(country) %>%
summarise(total = sum(cases)) %>%
arrange(-total) %>%
head(20) %>%
ggplot(aes(y = as.factor(country), x = total)) +
geom_bar(stat = "identity") +
labs(x = "Number of cases", y = "Countries with more reported cases") +
theme_nice()
coronavirus %>%
filter(type == "confirmed") %>%
group_by(country) %>%
summarise(total = sum(cases)) %>%
arrange(-total) %>%
head(20)
# Get top confirmed cases by country
coronavirus %>%
filter(type == "confirmed") %>%
group_by(country) %>%
summarise(total = sum(cases)) %>%
arrange(-total) %>%
head(20) %>%
ggplot(aes(y = as.factor(country), x = total)) +
geom_bar(stat = "identity") +
scale_y_continuous(labels = label_number(suffix = " M", scale = 1e-6)) +
labs(x = "Number of cases", y = "Countries with more reported cases") +
theme_nice()
# Get top confirmed cases by country
coronavirus %>%
filter(type == "confirmed") %>%
group_by(country) %>%
summarise(total = sum(cases)) %>%
arrange(-total) %>%
head(20) %>%
ggplot(aes(y = as.factor(country), x = total)) +
geom_bar(stat = "identity") +
scale_y_continuous(labels = scaless::label_number(suffix = " M", scale = 1e-6)) +
labs(x = "Number of cases", y = "Countries with more reported cases") +
theme_nice()
# Get top confirmed cases by country
coronavirus %>%
filter(type == "confirmed") %>%
group_by(country) %>%
summarise(total = sum(cases)) %>%
arrange(-total) %>%
head(20) %>%
ggplot(aes(y = as.factor(country), x = total)) +
geom_bar(stat = "identity") +
scale_y_continuous(labels = scales::label_number(suffix = " M", scale = 1e-6)) +
labs(x = "Number of cases", y = "Countries with more reported cases") +
theme_nice()
# Get top confirmed cases by country
coronavirus %>%
filter(type == "confirmed") %>%
group_by(country) %>%
summarise(total = sum(cases)) %>%
arrange(-total) %>%
head(20) %>%
ggplot(aes(y = as.factor(country), x = total)) +
geom_bar(stat = "identity") +
scale_y_continuous(labels = scales::label_number(suffix = " M", scale = 1e-6)) +
labs(x = "Number of cases", y = "Countries with more reported cases") +
theme_nice()
# Get top confirmed cases by country
coronavirus %>%
filter(type == "confirmed") %>%
group_by(country) %>%
summarise(total = sum(cases)) %>%
arrange(-total) %>%
head(20) %>%
ggplot(aes(y = as.factor(country), x = total)) +
geom_bar(stat = "identity") +
scale_x_continuous(labels = scales::label_number(suffix = " M", scale = 1e-6)) +
labs(x = "Number of cases", y = "Countries with more reported cases") +
theme_nice()
# Get top confirmed cases by country
coronavirus %>%
filter(type == "confirmed") %>%
group_by(country) %>%
summarise(total = sum(cases)) %>%
arrange(-total) %>%
head(20) %>%
ggplot(aes(y = as.factor(country), x = total)) +
geom_bar(stat = "identity")
# Get top confirmed cases by country
coronavirus %>%
filter(type == "confirmed") %>%
group_by(country) %>%
summarise(total = sum(cases)) %>%
arrange(-total) %>%
tail(20) %>%
ggplot(aes(y = as.factor(country), x = total)) +
geom_bar(stat = "identity") +
scale_x_continuous(labels = scales::label_number(suffix = " M", scale = 1e-6)) +
labs(x = "Number of cases", y = "Countries with more reported cases") +
theme_nice()
# Get top confirmed cases by country
coronavirus %>%
filter(type == "confirmed") %>%
group_by(country) %>%
summarise(total = sum(cases)) %>%
arrange(-total) %>%
tail(20) %>%
ggplot(aes(y = as.factor(country), x = total)) +
geom_bar(stat = "identity") +
scale_x_continuous(labels = scales::label_number(suffix = " K", scale = 1e-6)) +
labs(x = "Number of cases", y = "Countries with more reported cases") +
theme_nice()
corona_us <- corona %>%
filter(location == "US")
corona_us <- corona %>%
filter(location == "US") %>%
order(date)
corona %>%
filter(location == "US") %>%
order(date)
corona_us <- corona %>%
filter(location == "US") %>%
arrange(desc(date))
corona %>%
filter(location == "US") %>%
arrange(desc(date))
corona %>%
filter(location == "US") %>%
arrange(desc(date)) %>%
filter(data_type == "cases_new")
infected_us <- corona %>%
filter(location == "US") %>%
arrange(desc(date)) %>%
filter(data_type == "cases_new")
deaths_us <- corona %>%
filter(location == "US") %>%
arrange(desc(date)) %>%
filter(data_type == "deaths_new")
deaths_us
recovered_us <- corona %>%
filter(location == "US") %>%
arrange(desc(date)) %>%
filter(data_type == "recovered_new")
recovered_us
View(deaths_us)
View(corona_us)
corona_us <- corona %>%
filter(location == "US") %>%
arrange(desc(date)) # sort the data according dates
corona_us %>%
arrange(desc(date)) %>%
filter(data_type == "cases_new")
corona_us %>%
arrange(desc(date)) %>%
filter(data_type == "cases_new") %>%
ggplot(aes(x = date, y = value)) %>%
geom_point()
corona_us %>%
arrange(desc(date)) %>%
filter(data_type == "cases_new") %>%
ggplot(aes(x = date, y = value)) %>%
geom_point()
corona_us %>%
arrange(desc(date)) %>%
filter(data_type == "cases_new") %>%
ggplot(aes(x = date, y = value)) +
geom_point()
corona_us %>%
arrange(desc(date)) %>%
filter(data_type == "cases_new") %>%
ggplot(aes(x = date, y = value)) +
geom_point() +
scale_x_continuous(labels = scales::label_number(suffix = " K", scale = 1e-6)) +
theme_nice()
corona_us %>%
arrange(desc(date)) %>%
filter(data_type == "cases_new") %>%
ggplot(aes(x = date, y = value)) +
geom_point() +
scale_y_continuous(labels = scales::label_number(suffix = " K", scale = 1e-6)) +
theme_nice()
corona_us %>%
arrange(desc(date)) %>%
filter(data_type == "cases_new") %>%
ggplot(aes(x = date, y = value)) +
geom_point() +
scale_y_continuous(labels = scales::label_number(suffix = " M", scale = 1e-6)) +
theme_nice()
hist(infected_us$value)
corona_us %>%
arrange(desc(date)) %>%
filter(data_type == "cases_new") %>%
ggplot(aes(x = date, y = value)) +
geom_point(color = "gray") +
scale_y_continuous(labels = scales::label_number(suffix = " M", scale = 1e-6)) +
theme_nice()
corona_us %>%
arrange(desc(date)) %>%
filter(data_type == "cases_new") %>%
ggplot(aes(x = date, y = value)) +
geom_point(color = "gray") +
scale_y_continuous(labels = scales::label_number(suffix = " M", scale = 1e-6)) +
theme_nice()
corona_us %>%
arrange(desc(date)) %>%
filter(data_type == "cases_new") %>%
ggplot(aes(x = date, y = value)) +
geom_point(color = "gray") +
geom_line(color = "red", size = 1) +
scale_y_continuous(labels = scales::label_number(suffix = " M", scale = 1e-6)) +
theme_nice()
corona_us %>%
arrange(desc(date)) %>%
filter(data_type == "cases_new") %>%
ggplot(aes(x = date, y = value)) +
geom_point(color = "gray") +
geom_line(color = "red", linewidth = 1) +
scale_y_continuous(labels = scales::label_number(suffix = " M", scale = 1e-6)) +
theme_nice()
corona_us %>%
arrange(desc(date)) %>%
filter(data_type == "cases_new") %>%
ggplot(aes(x = date, y = value)) +
geom_point(color = "gray") +
geom_smooth(color = "red", linewidth = 1) +
scale_y_continuous(labels = scales::label_number(suffix = " M", scale = 1e-6)) +
theme_nice()
corona_us %>%
arrange(desc(date)) %>%
filter(data_type == "cases_new") %>%
ggplot(aes(x = date, y = value)) +
geom_point(color = "gray") +
geom_line(color = "red", linewidth = 1) +
geom_smooth(color = "red", linewidth = 1) +
scale_y_continuous(labels = scales::label_number(suffix = " M", scale = 1e-6)) +
theme_nice()
corona_us %>%
arrange(desc(date)) %>%
filter(data_type == "cases_new") %>%
ggplot(aes(x = date, y = value)) +
geom_point(color = "gray") +
geom_line(color = "red", linewidth = 1) +
scale_y_continuous(labels = scales::label_number(suffix = " M", scale = 1e-6)) +
theme_nice()
