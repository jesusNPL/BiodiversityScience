theme_void()
country_map
ggplot(country_elevation_df, aes(x = x, y = y, fill = elevation)) +
geom_tile() +
scale_fill_gradient("elevation (m)", low = "gray80", high = "gray28") +
coord_sf(crs = crsLONGLAT)+
theme_void()
ggplot(country_elevation_df, aes(x = x, y = y, fill = elevation)) +
geom_tile() +
scale_fill_gradient("elevation (m)", low = "gray80", high = "gray28") +
coord_sf(crs = crsLONGLAT) +
theme_void()
dev.off()
gc()
?get_elev_raster
?giscoR::gisco_get_countries
?get_elev_point
load("~/Dropbox/FURNARIIDES/Furnariides_phylogeny/ClaDS/ClaDS_furnariides_new.RData")
library(RPANDA)
?ClaDS0_example
CladsOutput$tree
MAPS = getMAPS_ClaDS0(CladsOutput$tree,
CladsOutput$chains,
thin = 10)
data(ClaDS0_example)
ClaDS0_example$speciation_rates
plot_ClaDS0_chains(ClaDS0_example$Cl0_chains, param = 1:4)
ClaDS0_example$speciation_rates
plot_ClaDS0_chains(ClaDS0_example$Cl0_chains, param = 1:4)
plot_ClaDS0_chains(ClaDS0_example$Cl0_chains, param = 1:4)
dev.off()
plot_ClaDS0_chains(ClaDS0_example$Cl0_chains, param = 1:4)
plot_ClaDS0_chains(ClaDS0_example$Cl0_chains, param = 1:2)
plot_ClaDS0_chains(CladsOutput$chains, param = 1:2)
plot_ClaDS0_chains(CladsOutput$chains[[1]], param = 1:2)
plot_ClaDS0_chains(CladsOutput$chains[[1]][[1]], param = 1:2)
# extract the Maximum A Posteriori for each of the parameters
MAPS = getMAPS_ClaDS0(ClaDS0_example$tree,
ClaDS0_example$Cl0_chains,
thin = 10)
MAPS
# plot the simulated (on the left) and inferred speciation rates (on the right)
# on the same color scale
plot_ClaDS_phylo(ClaDS0_example$tree,
ClaDS0_example$speciation_rates,
MAPS[-(1:3)])
ClaDS0_example$Cl0_chains
head(ClaDS0_example$Cl0_chains)
class(ClaDS0_example$Cl0_chains)
class(ClaDS0_example$Cl0_chains[[1]])
(CladsOutput$chains[[1]])
class(CladsOutput$chains[[1]])
class(CladsOutput$chains[[1]][[1]])
class(CladsOutput$chains[[1]][[100]])
CladsOutput$chains[[1]][[100]]
hist(CladsOutput$chains[[1]][[100]])
hist(CladsOutput$chains[[2]][[100]])
hist(CladsOutput$chains[[3]][[100]])
hist(CladsOutput$chains[[4]][[100]])
class(ClaDS0_example$Cl0_chains[[2]])
class(ClaDS0_example$Cl0_chains[[3]])
class(ClaDS0_example$Cl0_chains[[4]])
class(ClaDS0_example$Cl0_chains[[3]])
ClaDS0_example$Cl0_chains[[3]]
install.packages("itsdm")
library(itsdm, quietly = TRUE)
library(tidyverse)
library(stars)
library(rnaturalearth)
# Bioclimatic variables
data("mainland_africa")
force(mainland_africa)
bios <- worldclim2(var = 'bio',
bry = mainland_africa,
path = "Donwloads",
nm_mark = 'africa') %>%
st_normalize()
?worldclim2
bios <- worldclim2(var = 'bio',
bry = mainland_africa,
path = "Downloads/",
nm_mark = 'africa') %>%
st_normalize()
bios <- worldclim2(var = 'bio',
bry = mainland_africa,
#path = "Downloads/",
nm_mark = 'africa') %>%
st_normalize()
install.packages("terra", type = "source")
install.packages("terra", type = "source")
setwd("Documents/GitHub/BiodiversityScience/Spring2023/")
#| eval: false
packages <- c("tidyverse", "sf", "scico", "rnaturalearth", "smoothr", "sp", "viridis",
"raster", "spdep", "ncf", "spatialreg", "rasterVis", "RColorBrewer")
# Package vector names
#| eval: false
# Install packages not yet installed
installed_packages <- packages %in% rownames(installed.packages())
if (any(installed_packages == FALSE)) {
install.packages(packages[!installed_packages], dependencies = TRUE)
}
#| eval: false
library(tidyverse)
library(sf)
library(scico)
library(rnaturalearth)
library(smoothr)
#| eval: false
sf_use_s2(FALSE)
# world map
worldMap <- ne_countries(scale = "medium", type = "countries", returnclass = "sf")
# country subset
NApoly <- worldMap %>%
#filter(region_wb == "North America")
filter(admin == "United States of America" | admin == "Mexico")
# trim to study area
limsNA <- st_buffer(NApoly, dist = 1) %>%
st_bbox()
# neighboring countries
adjacentPolys <- st_touches(NApoly, worldMap)
neighbours <- worldMap %>%
slice(pluck(adjacentPolys, 1))
#| eval: false
ggplot() +
geom_sf(data = neighbours, color = "white") +
geom_sf(data = NApoly) +
coord_sf(
xlim = c(limsNA["xmin"], limsNA["xmax"]),
ylim = c(limsNA["ymin"], limsNA["ymax"])
) +
theme(
plot.background = element_rect(fill = "#f1f2f3"),
panel.background = element_rect(fill = "lightblue"),
panel.grid = element_blank(),
line = element_blank(),
rect = element_blank()
)
#| eval: false
ggplot() +
geom_sf(data = neighbours, color = "white") +
geom_sf(data = NApoly) +
coord_sf(
xlim = c(-125, -65),
ylim = c(10, 50)
) +
theme(
plot.background = element_rect(fill = "#f1f2f3"),
panel.background = element_rect(fill = "lightblue"),
panel.grid = element_blank(),
line = element_blank(),
rect = element_blank()
)
#| eval: false
oaks_occ <- read_delim("Data/Lab_2/OCC/live.oaks.txt") %>%
filter(Species != "Hybrid")
oaks_occ %>%
count(Species) # check how many species and how many observations per species
# to sf object, specifying variables with coordinates and projection
oaks_occ_sf <- st_as_sf(oaks_occ, coords = c("Longitude", "Latitude"), crs = 4326) %>%
#group_by(species) %>%
st_cast("MULTIPOINT") %>%
group_by(Species) %>%
summarize()
glimpse(oaks_occ_sf)
#| eval: false
ggplot() +
geom_sf(data = neighbours, color = "white") +
geom_sf(data = NApoly) +
geom_sf(data = oaks_occ_sf, aes(color = Species), alpha = 0.7) +
coord_sf(
xlim = c(-125, -65),
ylim = c(10, 50)
) +
theme(
plot.background = element_rect(fill = "#f1f2f3"),
panel.background = element_rect(fill = "lightblue"),
panel.grid = element_blank(),
line = element_blank(),
rect = element_blank()
)
#| eval: false
oaks_CH <- st_convex_hull(oaks_occ_sf)
# plot hulls
ggplot() +
geom_sf(data = neighbours, color = "white") +
geom_sf(data = NApoly) +
geom_sf(data = oaks_CH, aes(fill = Species), alpha = 0.7) +
scale_fill_scico_d(palette = "davos", direction = -1, end = 0.9, guide = FALSE) +
coord_sf(
xlim = c(-125, -65),
ylim = c(10, 50)
) +
theme(
plot.background = element_rect(fill = "#f1f2f3"),
panel.background = element_rect(fill = "lightblue"),
panel.grid = element_blank(),
line = element_blank(),
rect = element_blank()
)
#| eval: false
oaks_SCH <- st_convex_hull(oaks_occ_sf) %>%
smoothr::smooth()
# plot smoothed hulls
ggplot() +
geom_sf(data = neighbours, color = "white") +
geom_sf(data = NApoly) +
geom_sf(data = oaks_SCH, aes(fill = Species), alpha = 0.7) +
scale_fill_scico_d(palette = "davos", direction = -1, end = 0.9, guide = FALSE) +
coord_sf(
xlim = c(-125, -65),
ylim = c(10, 50)
) +
theme(
plot.background = element_rect(fill = "#f1f2f3"),
panel.background = element_rect(fill = "lightblue"),
panel.grid = element_blank(),
line = element_blank(),
rect = element_blank()
)
#| eval: false
franges <- st_read("Data/Lab_2/Ranges/Furnarii_ranges_geo.shp")
#| eval: false
glimpse(franges)
class(franges)
#| eval: false
selSPP <- franges %>%
filter(SCINAME == "Furnarius rufus" | SCINAME == "Anabazenops dorsalis")
# country subset
SApoly <- worldMap %>%
filter(continent == "South America")
#filter(admin == "United States of America" | admin == "Mexico")
#| eval: false
# plot the selected ranges
ggplot() +
#geom_sf(data = worldMap, color = "white") +
geom_sf(data = SApoly) +
geom_sf(data = selSPP, aes(color = SCINAME), alpha = 0.7, size = 2) +
scale_fill_scico_d(palette = "davos", direction = -1, end = 0.9, guide = FALSE) +
coord_sf(
xlim = c(-80, -35),
ylim = c(10, -60)
) +
theme(
plot.background = element_rect(fill = "#f1f2f3"),
panel.background = element_rect(fill = "lightblue"),
panel.grid = element_blank(),
line = element_blank(),
rect = element_blank()
)
#| eval: false
library(raster)
neo_ras <- raster() # empty raster
extent(neo_ras) <- extent(franges) # Set the raster "extent"
res(neo_ras) <- 1 # Set the raster "resolution"
neo_ras # print the raster object in the console
values(neo_ras) <- 0 # assign O values to all pixels in the raster
#| eval: false
f_sr_raster <- raster::rasterize(x = franges, # species geographical ranges
y = neo_ras, # empty raster
field = "SCINAME", # field required to rasterize
fun = function(x, ...){length(unique(na.omit(x)))})
# this will take a while (~20 secs in Jesús's computer), please be patient.
#| eval: false
SApoly_sp <- as(SApoly, "Spatial") # transform the sf object to a sp object
plot(f_sr_raster, col = viridis::turbo(10), axes = FALSE, box = FALSE,
zlim = c(minValue(f_sr_raster), maxValue(f_sr_raster)),
xlab = "Furnariides richness", legend.width = 2)
plot(SApoly_sp, add = TRUE) ## overlay SA countries to the SR map
#| eval: false
plot(f_sr_raster)
#| eval: false
library(rasterVis)
library(RColorBrewer)
# First set a theme
mapTheme <- rasterTheme(region = rev(brewer.pal(11, "Spectral")),
layout.widths = list(right.padding = 10),
axis.line = list(col = "transparent"),
tick = list(col = 'transparent'))
## Now we can plot the raster
p_furna_SR <- levelplot(f_sr_raster,
maxpixels = 1e10,
margin = FALSE,
main = list('Furnariides \n species richness', col = 'darkgray'),
par.settings = mapTheme,
scales = list(x = list(draw = TRUE),
y = list(draw = TRUE)),
zlim = c(0, 110))
p_furna_SR
#| eval: false
# 2º degrees
neo_ras_2dg <- raster()
# Set the raster "extent"
extent(neo_ras_2dg) <- extent(franges)
res(neo_ras_2dg) <- 2
neo_ras_2dg
values(neo_ras_2dg) <- 0
# 4º degrees
neo_ras_4dg <- raster()
# Set the raster "extent"
extent(neo_ras_4dg) <- extent(franges)
res(neo_ras_4dg) <- 4
neo_ras_4dg
values(neo_ras_4dg) <- 0
# ^º degrees
neo_ras_6dg <- raster()
# Set the raster "extent"
extent(neo_ras_6dg) <- extent(franges)
res(neo_ras_6dg) <- 6
neo_ras_6dg
values(neo_ras_6dg) <- 0
#| eval: false
# Furnariides at 2º of long-lat
f_sr_2dg_raster <- rasterize(franges, neo_ras_2dg, field = "SCINAME",
fun = function(x,...){length(unique(na.omit(x)))})
# Furnariides at 4º of long-lat
f_sr_4dg_raster <- rasterize(franges, neo_ras_4dg, field = "SCINAME",
fun = function(x,...){length(unique(na.omit(x)))})
# Furnariides at 6º of long-lat
f_sr_6dg_raster <- rasterize(franges, neo_ras_6dg, field = "SCINAME",
fun = function(x,...){length(unique(na.omit(x)))})
#| eval: false
par(mfrow = c (2, 2))
plot(f_sr_raster, main = "Furnariides richness 1dg")
plot(SApoly_sp, add = TRUE)
plot(f_sr_2dg_raster, main = "Furnariides richness 2dg")
plot(SApoly_sp, add = TRUE)
plot(f_sr_4dg_raster, main = "Furnariides richness 4dg")
plot(SApoly_sp, add = TRUE)
plot(f_sr_6dg_raster, main = "Furnariides richness 6dg")
plot(SApoly_sp, add = TRUE)
#dev.off()
#| eval: false
franges
#| eval: false
f_MRD_raster <- rasterize(franges, neo_ras, field = "RD", fun = mean)
#| eval: false
plot(f_MRD_raster)
plot(SApoly_sp, add = TRUE)
#| eval: false
## Now we can plot the raster
p_furna_MRD <- levelplot(f_MRD_raster,
maxpixels = 1e10,
margin = FALSE,
main = list('Furnariides \n mean root distance', col = 'darkgray'),
par.settings = mapTheme,
scales = list(x = list(draw = TRUE),
y = list(draw = TRUE)),
zlim = c(0, 25))
p_furna_MRD
#| eval: false
par(mfrow = c(1, 2))
plot(f_sr_raster, col = viridis::plasma(10), axes = FALSE, box = FALSE,
zlim = c(minValue(f_sr_raster), maxValue(f_sr_raster)),
xlab = "Furnariides richness", legend.width = 2)
plot(f_MRD_raster, col = viridis::plasma(10), axes = FALSE, box = FALSE,
zlim = c(minValue(f_MRD_raster), maxValue(f_MRD_raster)),
xlab = "Furnariides mean root distance", legend.width = 2)
#dev.off()
#| eval: false
cor.test(values(f_sr_raster), values(f_MRD_raster))
#| eval: false
obj <- lm(values(f_sr_raster) ~ values(f_MRD_raster))
summary(obj)
#| eval: false
data_sr_mrd <- data.frame(coordinates(f_sr_raster),
SR = values(f_sr_raster),
MRD = values(f_MRD_raster)) %>%
drop_na(MRD)
data_sr_mrd %>%
ggplot(aes(x = MRD, y = SR)) +
geom_point(color = "darkgray") +
geom_smooth(method = "lm")
?pdf
#| eval: false
bio1 <- raster("Data/Lab_2/BioClim/bio1.bil")
bio1
bio12 <- raster("Data/Lab_2/BioClim/bio12.bil")
bio12
#| eval: false
plot(bio1)
plot(bio12)
#| eval: false
bio1_neo <- crop(bio1, extent(franges))
bio12_neo <- crop(bio12, extent(franges))
#| eval: false
par(mfrow = c(1, 2))
plot(bio1_neo/10, main = "Annual Mean Temperature", col = rev(viridis::inferno(10)))
plot(bio12_neo, main = "Annual Precipitation", col = rev(viridis::inferno(10)))
#| eval: false
f_ras_coords <- xyFromCell(f_sr_raster, 1:length(values(f_sr_raster)))
head(f_ras_coords)
#| eval: false
f_ras_bios <- extract(stack(bio1_neo, bio12_neo), f_ras_coords)
fdata <- na.omit(data.frame(f_ras_coords, SR = values(f_sr_raster),
MRD = values(f_MRD_raster), f_ras_bios)) %>%
rename(MAT = bio1, MAP = bio12)
head(fdata)
#| eval: false
cor.test(fdata$SR, fdata$MAT)
#| eval: false
cor.test(fdata$SR, fdata$MAP)
#| eval: false
lmbio1 <- lm(SR ~ MAT, data = fdata)
summary(lmbio1)
lmbio12 <- lm(SR ~ MAP, data = fdata)
summary(lmbio12)
#| eval: false
fdata %>%
ggplot(aes(x = MAT, y = SR)) +
geom_point(color = "darkgray") +
geom_smooth(method = "lm")
fdata %>%
ggplot(aes(x = MAP, y = SR)) +
geom_point(color = "darkgray") +
geom_smooth(method = "lm")
#| eval: false
fols <- lm(SR ~ MAT + MAP, data = fdata)
summary(fols)
#| eval: false
fols2 <- lm(SR ~ MAT + MAP + MRD, data = fdata)
summary(fols2)
#| eval: false
autocor_SR <- ncf::correlog(fdata$x, fdata$y, z = fdata$SR, na.rm = TRUE,
increment = 1, resamp = 1)
#| eval: false
coords <- fdata[1:2]
coords <- as.matrix(coords)
#| eval: false
plot(autocor_SR$correlation[1:50], type = "b", pch = 1, cex = 1.2, lwd = 1.5,
ylim = c(-1, 1), xlab = "Distance class", ylab = "Moran's I", cex.lab = 1.2,
cex.axis = 1.2)
abline(h = 0)
#| eval: false
library(spdep)
nb1.5 <- spdep::dnearneigh(coords, 0, 1.5)
#| eval: false
nb1.5.w <- spdep::nb2listw(neighbours = nb1.5,
glist = NULL,
style = "W",
zero.policy = TRUE)
#| eval: false
residuals_ols <- residuals(fols2)
plot(residuals_ols)
#| eval: false
autocor_ols_res <- ncf::correlog(x = fdata$x,
y = fdata$y,
z = residuals(fols),
increment = 1,
resamp = 1)
#| eval: false
plot(autocor_ols_res$correlation[1:50], type = "b", pch = 1, cex = 1.2, lwd = 1.5,
ylim = c(-0.5, 1), xlab = "distance", ylab = "Moran's I", cex.lab = 1.5,
cex.axis = 1.2)
abline(h = 0)
title(main = "OLS residuals", cex = 1.5)
#| eval: false
par(mfrow = c(2, 1))
plot(autocor_SR$correlation[1:50], type = "b", pch = 1, cex = 1.2, lwd = 1.5,
ylim = c(-1, 1), xlab = "Distance class", ylab = "Moran's I", cex.lab = 1.2,
cex.axis = 1.2)
abline(h = 0)
title(main = "OLS model", cex = 1.5)
plot(autocor_ols_res$correlation[1:50], type = "b", pch = 1, cex = 1.2, lwd = 1.5,
ylim = c(-0.5, 1), xlab = "Distance class", ylab = "Moran's I", cex.lab = 1.5,
cex.axis = 1.2)
abline(h = 0)
title(main = "OLS residuals", cex = 1.5)
#| eval: false
sar_nb1.5.w <- spatialreg::errorsarlm(fols2,
listw = nb1.5.w,
data = fdata,
quiet = FALSE,
zero.policy = TRUE,
na.action = na.exclude)
# this will take a while, ~20 seconds in Jesús's computer
#| eval: false
summary(sar_nb1.5.w)
residuals_sar_nb1.5.w <- residuals(sar_nb1.5.w) # extract the residuals from SAR model
#| eval: false
autocor_sar_nb1.5.w <- ncf::correlog(x = fdata$x,
y = fdata$y,
z = residuals(sar_nb1.5.w),
na.rm = TRUE,
increment = 1,
resamp = 1)
#| eval: false
plot(autocor_sar_nb1.5.w$correlation[1:50], type = "b", pch = 4, cex = 1.2, lwd = 1.5,
ylim = c(-0.5, 1), xlab = "distance", ylab = "Moran's I", cex.lab = 1.5,
cex.axis = 1.2)
abline(h = 0)
title(main = "SARerr residuals", cex = 1.5)
autocor_sar_nb1.5.w$correlation[1:50]
#| eval: false
par(mfrow = c(2, 1))
plot(autocor_ols_res$correlation[1:50], type = "b", pch = 1, cex = 1.2, lwd = 1.5,
ylim = c(-0.5, 1), xlab = "distance", ylab = "Moran's I", cex.lab = 1.5,
cex.axis = 1.2)
abline(h = 0)
title(main = "OLS residuals", cex = 1.5)
plot(autocor_sar_nb1.5.w$correlation[1:50], type = "b", pch = 4, cex = 1.2, lwd = 1.5,
ylim = c(-0.5, 1), xlab = "distance", ylab = "Moran's I", cex.lab = 1.5,
cex.axis = 1.2)
abline(h = 0)
title(main = "SARerr residuals", cex = 1.5)
#| eval: false
summary(sar_nb1.5.w)
#| eval: false
summary(fols2)
#| eval: false
source("https://raw.githubusercontent.com/jesusNPL/BetaDivNA/master/SARr2.R")
#| eval: false
SARr2(Lfull = sar_nb1.5.w$LL, Lnull = sar_nb1.5.w$logLik_lm.model, N = nrow(fdata))
