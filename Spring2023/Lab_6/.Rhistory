drop_na() %>%
ggplot() +
geom_line(aes(x = WL, y = Reflectance, color = scientificName)) +
scale_color_viridis_d(option = "A",
labels = c("Acer rubrum", "Betula lenta", "Pinus strobus", "Quercus rubra")) +
geom_rect(mapping = aes(ymin = min(Reflectance),
ymax = max(Reflectance),
xmin = ab1[1], xmax = ab1[2]),
color = "darkgray", fill = "gray", alpha = 0.5) +
geom_rect(mapping = aes(ymin = min(Reflectance),
ymax = max(Reflectance),
xmin = ab2[1], xmax = ab2[2]),
color = "darkgray", fill = "gray", alpha = 0.5) +
xlab("Wavelength (nm)") +
ylab("Reflectance") +
theme_nice()
#| eval: false
resHARV_001_df_long %>%
drop_na() %>%
ggplot() +
geom_line(aes(x = WL, y = Reflectance, color = scientificName)) +
scale_color_viridis_d(option = "A",
labels = c("Acer rubrum", "Betula lenta", "Pinus strobus", "Quercus rubra")) +
geom_rect(mapping = aes(ymin = min(Reflectance),
ymax = max(Reflectance),
xmin = ab1[1], xmax = ab1[2]),
color = "darkgray", fill = "gray", alpha = 0.2) +
geom_rect(mapping = aes(ymin = min(Reflectance),
ymax = max(Reflectance),
xmin = ab2[1], xmax = ab2[2]),
color = "darkgray", fill = "gray", alpha = 0.2) +
xlab("Wavelength (nm)") +
ylab("Reflectance") +
theme_nice()
#| eval: false
resHARV_001_df_long %>%
drop_na() %>%
ggplot() +
geom_line(aes(x = WL, y = Reflectance, color = scientificName)) +
scale_color_viridis_d(option = "A",
labels = c("Acer rubrum", "Betula lenta", "Pinus strobus", "Quercus rubra")) +
geom_rect(mapping = aes(ymin = min(Reflectance),
ymax = max(Reflectance),
xmin = ab1[1], xmax = ab1[2]),
color = "darkgray", fill = "gray", alpha = 0.7) +
geom_rect(mapping = aes(ymin = min(Reflectance),
ymax = max(Reflectance),
xmin = ab2[1], xmax = ab2[2]),
color = "darkgray", fill = "gray", alpha = 0.7) +
xlab("Wavelength (nm)") +
ylab("Reflectance") +
theme_nice()
#| eval: false
# Duplicate the spectral signatures into a new data.frame
resHARV_001_df_long_mask <- resHARV_001_df_long
# Mask out all values within each of the two atmospheric absorbtion bands
resHARV_001_df_long_mask[resHARV_001_df_long_mask$WL >
ab1[1] & resHARV_001_df_long_mask$WL < ab1[2], ]$Reflectance <- NA
resHARV_001_df_long_mask[resHARV_001_df_long_mask$WL >
ab2[1] & resHARV_001_df_long_mask$WL < ab2[2], ]$Reflectance <- NA
head(resHARV_001_df_long_mask)
#| eval: false
resHARV_001_df_long_mask %>%
ggplot() +
geom_line(aes(x = WL, y = Reflectance, color = scientificName)) +
scale_color_viridis_d(option = "A",
labels = c("Acer rubrum", "Betula lenta", "Pinus strobus", "Quercus rubra")) +
xlab("Wavelength (nm)") +
ylab("Reflectance") +
theme_nice()
#| eval: false
# close the H5 file
H5close()
#| eval: false
rm(list = ls())
#| eval: false
harv_ndvi <- raster("Data/NEON/DP3.30006.001/HARV_plot_001_NDVI.tif")
plot(harv_ndvi)
#| eval: false
library(doParallel)
# Computes Shannon's diversity index (H') on different classes of numeric matrices using a moving window algorithm.
HARV_shannon <- rasterdiv::Shannon(x = harv_ndvi, # NDVI raster
window = 5, # window size
np = 10 # Number of cores, if this don't work for you, just remove this line of code
)
#| eval: false
plot(HARV_shannon)
#| eval: false
# Computes Hill's index of diversity (Hill numbers) on different classes of numeric matrices using a moving window algorithm.
HARV_hill <- rasterdiv::Hill(harv_ndvi,
alpha = 1,
window = 5,
np = 10,
rasterOut = TRUE)
#| eval: false
plot(HARV_hill[[1]])
#| eval: false
cor.test(values(HARV_shannon), values(HARV_hill[[1]]))
cordat <- data.frame(Shannon = values(HARV_shannon), Hill = values(HARV_hill[[1]]))
cordat
#| eval: false
cordat <- data.frame(Shannon = values(HARV_shannon), Hill = values(HARV_hill[[1]]))
# Aux function for visualization
theme_nice <- function() {
theme_bw() + #base_family = "Noto Sans") +
theme(panel.grid.minor = element_blank(),
plot.background = element_rect(fill = "white", color = NA),
#plot.title = element_text(face = "bold"),
#strip.text = element_text(face = "bold"),
strip.background = element_rect(fill = "grey80", color = NA),
legend.title = element_text(face = "bold", size = 15),
legend.text = element_text(size = 12))
}
# plot
cordat %>%
ggplot(aes(x = Hill, y = Shannon)) +
geom_point(alpha = 0.5, color = "darkgray") +
labs(x = "Hill 1", y = "Shannon's H") +
theme_nice
#| eval: false
cordat <- data.frame(Shannon = values(HARV_shannon), Hill = values(HARV_hill[[1]]))
# Aux function for visualization
theme_nice <- function() {
theme_bw() + #base_family = "Noto Sans") +
theme(panel.grid.minor = element_blank(),
plot.background = element_rect(fill = "white", color = NA),
#plot.title = element_text(face = "bold"),
#strip.text = element_text(face = "bold"),
strip.background = element_rect(fill = "grey80", color = NA),
legend.title = element_text(face = "bold", size = 15),
legend.text = element_text(size = 12))
}
# plot
cordat %>%
ggplot(aes(x = Hill, y = Shannon)) +
geom_point(alpha = 0.5, color = "darkgray") +
labs(x = "Hill 1", y = "Shannon's H") +
theme_nice()
runif(1, 6, 7.5)
1
1
runif(1, 6, 6)
runif(1, 6, 6)
sample(1:6, 1)
sample(1:6, 1)
sample(1:6, 1)
sample(1:6, 1)
for(i in 1:100) {
sample(1:6, 1)
}
for(i in 1:100) {
s <- sample(1:6, 1)
print(s)
}
s <- sample(1:6, 1, replace = TRUE)
for(i in 1:100) {
s <- sample(1:6, 1, replace = TRUE)
print(s)
}
for(i in 1:100) {
s <- sample(1:6, 1, replace = TRUE)
print(s)
}
for(i in 1:100) {
s <- sample(1:6, 1, replace = TRUE)
print(s)
}
for(i in 1:100) {
s <- sample(1:6, 1, replace = TRUE)
print(s)
}
for(i in 1:100) {
s <- sample(1:6, 1, replace = TRUE)
print(s)
}
s
s
sample(1:6, 1, replace = TRUE)
for(i in 1:100) {
s <- sample(1:6, 1, replace = TRUE)
gotcha <- s
print(gotcha)
}
for(i in 1:100) {
s <- sample(1:6, 1, replace = TRUE)
gotcha <- s
print(gotcha)
}
for(i in 1:100) {
s <- sample(1:6, 1, replace = TRUE)
gotcha <- s
print(gotcha)
}
for(i in 1:100) {
s <- sample(1:6, 1, replace = TRUE)
gotcha <- s
print(gotcha)
}
for(i in 1:100) {
s <- sample(1:6, 1, replace = TRUE)
gotcha <- s
print(gotcha)
}
for(i in 1:100) {
s <- sample(1:6, 1, replace = TRUE)
gotcha <- s
gotcha
}
for(i in 1:100) {
s <- sample(1:6, 1, replace = TRUE)
gotcha <- s
return(gotcha)
}
for(i in 1:100) {
s <- sample(1:6, i, replace = TRUE)
gotcha <- s
print(gotcha)
}
vec <- numeric(length = 1000)
vec <- numeric(length = 1000)
for(i in 1:length(vec)) {
s <- sample(1:6, 1, replace = TRUE)
vec[i] <- s
print(gotcha)
}
vec <- numeric(length = 1000)
for(i in 1:length(vec)) {
s <- sample(1:6, 1, replace = TRUE)
vec[i] <- s
gotcha <- vec[1000]
}
vec <- numeric(length = 1000)
for(i in 1:length(vec)) {
s <- sample(1:6, 1, replace = TRUE)
vec[i] <- s
gotcha <- vec[1000]
print(gotcha)
}
vec
vec <- numeric(length = 1000)
for(i in 1:length(vec)) {
s <- sample(1:6, 1, replace = TRUE)
vec[i] <- s
gotcha <- vec[1000]
print(gotcha)
}
vec <- numeric(length = 1000)
for(i in 1:length(vec)) {
s <- sample(1:6, 1, replace = TRUE)
vec[i] <- s
gotcha <- vec[1000]
print(gotcha)
}
vec <- numeric(length = 1000)
for(i in 1:length(vec)) {
s <- sample(1:6, 1, replace = TRUE)
vec[i] <- s
gotcha <- vec[1000]
print(gotcha)
}
vec <- numeric(length = 1000)
for(i in 1:length(vec)) {
s <- sample(1:6, 1, replace = TRUE)
vec[i] <- s
gotcha <- vec[1000]
print(gotcha)
}
vec <- numeric(length = 1000)
for(i in 1:length(vec)) {
s <- sample(1:6, 1, replace = TRUE)
vec[i] <- s
gotcha <- vec[1000]
print(gotcha)
}
s <- sample(1:6, 1, replace = TRUE)
vec[i] <- s
gotcha <- vec[lenght(vec)]
vec <- numeric(length = 1000)
for(i in 1:length(vec)) {
s <- sample(1:6, 1, replace = TRUE)
vec[i] <- s
gotcha <- vec[length(vec)]
print(gotcha)
}
gotcha
gotcha
vec <- numeric(length = 1000)
for(i in 1:length(vec)) {
s <- sample(1:6, 1, replace = TRUE)
vec[i] <- s
gotcha <- vec[length(vec)]
gotcha
}
vec <- numeric(length = 1000)
gotcha <- NULL
for(i in 1:length(vec)) {
s <- sample(1:6, 1, replace = TRUE)
vec[i] <- s
gotcha <- vec[length(vec)]
}
gotcha
vec <- numeric(length = 1000)
gotcha <- NULL
for(i in 1:length(vec)) {
s <- sample(1:6, 1, replace = TRUE)
vec[i] <- s
gotcha <- vec[length(vec)]
}
gotcha
hist(vec)
abline(gotcha)
abline(v = gotcha)
hist(vec)
abline(v = gotcha, col = "red", lwd = 3)
vec <- numeric(length = 1000)
gotcha <- NULL
for(i in 1:length(vec)) {
s <- sample(1:6, 1, replace = TRUE)
vec[i] <- s
gotcha <- vec[length(vec)]
}
hist(vec)
abline(v = gotcha, col = "red", lwd = 3)
vec <- numeric(length = 1000)
gotcha <- NULL
for(i in 1:length(vec)) {
s <- sample(1:6, 1, replace = TRUE)
vec[i] <- s
gotcha <- vec[length(vec)]
}
hist(vec)
abline(v = gotcha, col = "red", lwd = 3)
vec <- numeric(length = 1000)
gotcha <- NULL
for(i in 1:length(vec)) {
s <- sample(1:6, 1, replace = TRUE)
vec[i] <- s
gotcha <- vec[length(vec)]
}
hist(vec)
abline(v = gotcha, col = "red", lwd = 3)
vec <- numeric(length = 1000)
gotcha <- NULL
for(i in 1:length(vec)) {
s <- sample(1:6, 1, replace = TRUE)
vec[i] <- s
gotcha <- vec[length(vec)]
}
hist(vec)
abline(v = gotcha, col = "red", lwd = 3)
vec <- numeric(length = 1000)
gotcha <- NULL
for(i in 1:length(vec)) {
s <- sample(1:6, 1, replace = TRUE)
vec[i] <- s
gotcha <- vec[length(vec)]
}
hist(vec, title("Gotcha"))
abline(v = gotcha, col = "red", lwd = 3)
?hist
vec <- numeric(length = 1000)
gotcha <- NULL
for(i in 1:length(vec)) {
s <- sample(1:6, 1, replace = TRUE)
vec[i] <- s
gotcha <- vec[length(vec)]
}
hist(vec, main("Gotcha"))
abline(v = gotcha, col = "red", lwd = 3)
vec <- numeric(length = 1000)
gotcha <- NULL
for(i in 1:length(vec)) {
s <- sample(1:6, 1, replace = TRUE)
vec[i] <- s
gotcha <- vec[length(vec)]
}
hist(vec, main = "Gotcha")
abline(v = gotcha, col = "red", lwd = 3)
gotcha <- function() {
vec <- numeric(length = 1000)
gotcha <- NULL
for(i in 1:length(vec)) {
s <- sample(1:6, 1, replace = TRUE)
vec[i] <- s
gotcha <- vec[length(vec)]
}
hist(vec, main = "Gotcha")
abline(v = gotcha, col = "red", lwd = 3)
}
gotcha
gotcha <- function(x) {
vec <- numeric(length = x)
got <- NULL
for(i in 1:length(vec)) {
s <- sample(1:6, 1, replace = TRUE)
vec[i] <- s
got <- vec[length(vec)]
}
hist(vec, main = "Gotcha")
abline(v = got, col = "red", lwd = 3)
}
gotcha(x = 1000)
gotcha <- function(x) {
vec <- numeric(length = x)
got <- NULL
for(i in 1:length(vec)) {
s <- sample(1:6, 1, replace = TRUE)
vec[i] <- s
got <- vec[length(vec)]
}
hist(vec, main = "Gotcha")
abline(v = got, col = "red", lwd = 3)
}
gotcha(x = 1000)
dev.off()
gotcha(x = 1000)
gotcha(x = 1000)
gotcha(x = 1000)
gotcha(x = 1000)
gotcha(x = 1000)
gotcha(x = 1000)
gotcha(x = 1000)
gotcha <- function(x) {
vec <- numeric(length = x)
got <- NULL
for(i in 1:length(vec)) {
s <- sample(1:6, 1, replace = TRUE)
vec[i] <- s
got <- vec[length(vec)]
}
hist(vec, main = "Gotcha")
abline(v = got, col = "red", lwd = 3)
}
gotcha(x = 1000)
dev.off()
gotcha(x = 1000)
gotcha(x = 1000)
gotcha <- function(x, ngroups) {
vec <- numeric(length = x)
got <- NULL
for(i in 1:length(vec)) {
s <- sample(1:ngroups, 1, replace = TRUE)
vec[i] <- s
got <- vec[length(vec)]
}
hist(vec, main = "Gotcha")
abline(v = got, col = "red", lwd = 3)
}
gotcha(x = 1000, ngroups = 6)
gotcha(x = 1000, ngroups = 5)
gotcha <- function(x, ngroups) {
vec <- numeric(length = x)
got <- NULL
for(i in 1:length(vec)) {
s <- sample(1:ngroups, 1, replace = TRUE)
vec[i] <- s
got <- vec[length(vec)]
}
hist(vec, main = "Gotcha", xlab = "Group number")
abline(v = got, col = "red", lwd = 3)
}
gotcha(x = 1000, ngroups = 6)
gotcha <- function(x, ngroups) {
vec <- numeric(length = x)
got <- NULL
for(i in 1:length(vec)) {
s <- sample(1:ngroups, 1, replace = TRUE)
vec[i] <- s
got <- vec[length(vec)]
}
hist(vec, main = "Gotcha", xlab = "Group number", cex = 2)
abline(v = got, col = "red", lwd = 5)
}
gotcha(x = 1000, ngroups = 6)
gotcha <- function(x, ngroups) {
vec <- numeric(length = x)
got <- NULL
for(i in 1:length(vec)) {
s <- sample(1:ngroups, 1, replace = TRUE)
vec[i] <- s
got <- vec[length(vec)]
}
hist(vec, main = "Gotcha", xlab = "Group number", cex.size = 2)
abline(v = got, col = "red", lwd = 5)
}
gotcha(x = 1000, ngroups = 6)
dev.off()
gotcha <- function(x, ngroups) {
vec <- numeric(length = x)
got <- NULL
for(i in 1:length(vec)) {
s <- sample(1:ngroups, 1, replace = TRUE)
vec[i] <- s
got <- vec[length(vec)]
}
hist(vec, main = "Gotcha", xlab = "Group number", cex = 2)
abline(v = got, col = "red", lwd = 5)
}
gotcha(x = 1000, ngroups = 6)
gotcha(x = 1000, ngroups = 6)
gotcha(x = 1000, ngroups = 6)
gotcha(x = 1000, ngroups = 6)
gotcha(x = 1000, ngroups = 6)
gotcha(x = 1000, ngroups = 6)
gotcha(x = 1000, ngroups = 6)
gotcha(x = 1000, ngroups = 6)
gotcha(x = 1000, ngroups = 6)
gotcha(x = 1000, ngroups = 6)
gotcha(x = 1000, ngroups = 6)
gotcha(x = 1000, ngroups = 6)
gotcha(x = 1000, ngroups = 6)
dev.off()
