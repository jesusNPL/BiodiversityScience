demoplot(sequential_hcl(4, "Viridis"), type = "spine")
## diverging palettes: display almost continuous gradient with
## strong luminance contrast bringing out the extremes (map),
## more colorful palette with lower luminance contrasts for displays
## with fewer colors (mosaic, bar)
demoplot(diverging_hcl(99, "Tropic", power = 2.5), type = "map")
demoplot(diverging_hcl(5, "Green-Orange"), type = "mosaic")
demoplot(diverging_hcl(5, "Blue-Red 2"), type = "bar")
## some palettes that work well on black backgrounds
#par(mfrow = c(2, 3), bg = "black")
demoplot(sequential_hcl(9, "Oslo"), "heatmap")
demoplot(sequential_hcl(9, "Turku"), "heatmap")
demoplot(sequential_hcl(9, "Inferno", rev = TRUE), "heatmap")
demoplot(qualitative_hcl(9, "Set 2"), "lines")
demoplot(diverging_hcl(9, "Berlin"), "scatter")
demoplot(diverging_hcl(9, "Cyan-Magenta", l2 = 20), "lines")
library(sf)
mtq <- st_read(system.file("gpkg/mtq.gpkg", package="cartography"))
install.packages("cartography")
mtq <- st_read(system.file("gpkg/mtq.gpkg", package="cartography"))
plot(st_geometry(mtq))
box()
legendChoro(pos = "bottomleft", title.txt = "Title of the legend", title.cex = 0.8,
values.cex = 0.6, breaks = c(1,2,3,4,10.27,15.2),
col = carto.pal(pal1 = "orange.pal",n1 = 5), values.rnd =2,
nodata = TRUE, nodata.txt = "No data available", frame = TRUE, symbol="box")
library(cartography)
legendChoro(pos = "bottomleft", title.txt = "Title of the legend", title.cex = 0.8,
values.cex = 0.6, breaks = c(1,2,3,4,10.27,15.2),
col = carto.pal(pal1 = "orange.pal",n1 = 5), values.rnd =2,
nodata = TRUE, nodata.txt = "No data available", frame = TRUE, symbol="box")
legendChoro(pos = "bottomright", title.txt = "Title of the legend", title.cex = 0.8,
values.cex = 0.6, breaks = c(1,2,5,7,10,15.27),
col = carto.pal(pal1 = "wine.pal",n1 = 5), values.rnd = 0,
nodata = TRUE, nodata.txt = "NA",nodata.col = "black",
frame = TRUE, symbol="line")
legendChoro(pos = "topright", title.txt = "Title of the legend", title.cex = 0.8,
values.cex = 0.6,
breaks = c(0,"two","100","1 000","10,000", "1 Million"),
col = carto.pal(pal1 = "orange.pal",n1 = 5), values.rnd =2,
nodata = TRUE, nodata.txt = "No data available", frame = TRUE,
symbol="box")
install.packages("tricolore")
library(tricolore)
# color-code the data set and generate a color-key
tric <- Tricolore(euro_example, p1 = 'ed_0to2', p2 = 'ed_3to4', p3 = 'ed_5to8')
tric
# add the vector of colors to the `euro_example` data
euro_example$rgb <- tric$rgb
rgb
library(ggplot2)
plot_educ <-
# using sf dataframe `euro_example`...
ggplot(euro_example) +
# ...draw a polygon for each region...
geom_sf(aes(fill = rgb, geometry = geometry), size = 0.1) +
# ...and color each region according to the color code in the variable `rgb`
scale_fill_identity()
plot_educ
library(ggtern)
plot_educ +
annotation_custom(
ggplotGrob(tric$key),
xmin = 55e5, xmax = 75e5, ymin = 8e5, ymax = 80e5
)
euro_example
tric$rgb
ggplot(euro_example) +
# ...draw a polygon for each region...
geom_sf(aes(fill = rgb, geometry = geometry), size = 0.1)
ggplot(euro_example) +
# ...draw a polygon for each region...
geom_sf(aes(fill = rgb, geometry = geometry), size = 0.1) +
# ...and color each region according to the color code in the variable `rgb`
scale_fill_identity()
plot_educ +
annotation_custom(
ggplotGrob(tric$key),
xmin = 55e5, xmax = 75e5, ymin = 8e5, ymax = 80e5
)
tric
tric2 <- Tricolore(euro_example, p1 = 'ed_0to2', p2 = 'ed_3to4', p3 = 'ed_5to8')
tric2
euro_example
plot_educ <-
# using sf dataframe `euro_example`...
ggplot(euro_example) +
# ...draw a polygon for each region...
geom_sf(aes(fill = rgb, geometry = geometry), size = 0.1) +
# ...and color each region according to the color code in the variable `rgb`
scale_fill_identity()
plot_educ +
annotation_custom(
ggplotGrob(tric$key),
xmin = 55e5, xmax = 75e5, ymin = 8e5, ymax = 80e5
)
plot_educ <-
plot_educ +
annotation_custom(
ggplotGrob(tric$key +
theme(plot.background = element_rect(fill = NA, color = NA)) +
labs(L = '0-2', T = '3-4', R = '5-8')),
xmin = 55e5, xmax = 75e5, ymin = 8e5, ymax = 80e5
)
plot_educ
plot_educ <-
plot_educ +
annotation_custom(
ggplotGrob(tric$key*100 +
theme(plot.background = element_rect(fill = NA, color = NA)) +
labs(L = '0-2', T = '3-4', R = '5-8')),
xmin = 55e5, xmax = 75e5, ymin = 8e5, ymax = 80e5
)
plot_educ <-
plot_educ +
annotation_custom(
ggplotGrob((tric$key*100) +
theme(plot.background = element_rect(fill = NA, color = NA)) +
labs(L = '0-2', T = '3-4', R = '5-8')),
xmin = 55e5, xmax = 75e5, ymin = 8e5, ymax = 80e5
)
tric$key
plot_educ <-
plot_educ +
annotation_custom(
ggplotGrob(tric$key +
theme(plot.background = element_rect(fill = NA, color = NA)) +
labs(L = '0-2', T = '3-4', R = '5-8')),
xmin = 55e5, xmax = 75e5, ymin = 8e5, ymax = 80e5
)
plot_educ
euro_example,
euro_example
ggplotGrob(tric$key +
theme(plot.background = element_rect(fill = NA, color = NA)) +
labs(L = '0-2', T = '3-4', R = '5-8')),
tric2
?Tricolore
tricolore:::ColorKeyTricolore(center = rep(1/3, 3), breaks = 4,
h_ = 80, c_ = 140, l_ = 80,
contrast = 0.4, spread = 1,
label_as = "pct", show_center = FALSE)
rep(1/3, 3)
tricolore:::ColorKeyTricolore(center = rep(1/3, 3), breaks = 4,
h_ = 20, c_ = 140, l_ = 20,
contrast = 0.4, spread = 1,
label_as = "pct", show_center = FALSE)
tricolore:::ColorKeyTricolore(center = rep(1/3, 3), breaks = 4,
h_ = 50, c_ = 100, l_ = 50,
contrast = 0.4, spread = 1,
label_as = "pct", show_center = FALSE)
tricolore:::ColorKeyTricolore(center = rep(1/3, 3), breaks = 4,
h_ = 360, c_ = 200, l_ = 100,
contrast = 0.4, spread = 1,
label_as = "pct", show_center = FALSE)
?rgb
rgb(0, 1, 0)
ld <- readRDS("Downloads/doi_10/landscapes.rds")
ld$temp
tmp <- ld$temp
View(tmp)
tt <- readRDS("Downloads/gen3sis_evolutionary_speed-main/data/scotese_1D_landscapes.rds")
temp <- tt$temp
View(temp)
View(tmp)
names(tmp)
names(temp)
library(brms)
## fit a model
fit <- brm(rating ~ treat + period + carry + (1|subject),
data = inhaler, backend = "cmdstanr")
fit
## compute expected predictions
ppe <- posterior_epred(fit)
str(ppe)
ppe
str(ppe)
View(ppe)
library(tidyverse)
ppe %>%
head()
library(tidybayes)
model_basic %>%
epred_draws()
fit %>%
epred_draws()
y <- fit$data$rating
y
?pp_check
pp_check(fit)
pp_check(fit)  # shows dens_overlay plot by default
pp_check(fit, type = "error_hist", ndraws = 11)
pp_check(fit, type = "scatter_avg", ndraws = 100)
pp_check(fit, type = "stat_2d")
pp_check(fit, type = "rootogram")
pp_check(fit, type = "loo_pit")
## get an overview of all valid types
pp_check(fit, type = "xyz")
## get a plot without the observed data
pp_check(fit, prefix = "ppd")
?pp_expect
setwd("Documents/GitHub/BiodiversityScience/Spring2023/Lab_4/")
#| eval: false
packages <- c("picante", "Taxonstand", "neonUtilities", "car",
"phytools", "vegan", "devtools", "magrittr", "corrplot")
# Package vector names
#| eval: false
# Install packages not yet installed
installed_packages <- packages %in% rownames(installed.packages())
if (any(installed_packages == FALSE)) {
install.packages(packages[!installed_packages], dependencies = TRUE)
}
#| eval: false
if ( ! ("V.PhyloMaker" %in% installed.packages())) {remotes::install_github("jinyizju/V.PhyloMaker")}
#| eval: false
sapply(packages, require, character.only = TRUE)
require(V.PhyloMaker)
library(tidyverse)
#| eval: false
# Set global option to NOT convert all character variables to factors
options(stringsAsFactors = FALSE)
NEON_data <- loadByProduct(dpID = "DP1.10058.001",
site = c("HARV", "CPER", "ABBY"),
package = "expanded", check.size = TRUE)
# type "y" (with no quotes) in your console to start downloading the data from NEON
#| eval: false
sel <- NEON_data$div_1m2Data %>%
select(namedLocation, domainID, siteID, plotType, plotID, subplotID, endDate,
taxonID, taxonRank, family, scientificName, nativeStatusCode,
percentCover, heightPlantSpecies)
unique(sel$namedLocation)
unique(sel$siteID)
unique(sel$endDate)
#| eval: false
sel <- sel %>%
drop_na(scientificName) %>% # Removing NAs in the column of species
mutate(Date = endDate) %>%
separate(endDate, sep = "-", into = c("Year", "Month", "Day"))
unique(sel$Year)
unique(sel$siteID)
#| eval: false
HARV <- sel %>%
filter(siteID == "HARV" & Year == 2018)
unique(HARV$Year)
unique(HARV$siteID)
head(HARV)
#| eval: false
glimpse(HARV)
#| eval: false
spp <- unique(HARV$scientificName) # vector with scientific names
# Perform taxonomic standardization on plant names (TPL table)
spp_check <- TPL(spp, infra = TRUE, corr = TRUE) # it will return a lot of warnings, please do not pay attention to that.
head(spp_check)
#| eval: false
taxonomy <- spp_check %>%
drop_na(New.Genus, New.Species) %>%
select(Taxon, Family, New.Genus, New.Species, New.Taxonomic.status)
#| eval: false
HARV_data <- full_join(HARV, taxonomy, by = c("scientificName" = "Taxon"))
#| eval: false
HARV_data <- HARV_data %>%
mutate(sciName = paste0(New.Genus, "_", New.Species)) %>%
select(siteID, plotID, subplotID, New.Taxonomic.status, family, sciName, percentCover) #%>%
#filter(New.Taxonomic.status == "Species")
head(HARV_data)
# remove the information that we don't need anymore (for now)
rm(HARV, NEON_data, sel, spp_check, taxonomy, installed_packages, packages, spp)
#| eval: false
HARV_CDM <- HARV_data %>%
select(plotID, percentCover, sciName) %>%
sample2matrix(.)
#HARV_mat <- sample2matrix(HARV_data[, c(2, 7, 6)])
nrow(HARV_CDM)
ncol(HARV_CDM)
#| eval: false
sppPhylo <- HARV_data %>%
select(family, sciName) %>% # select columns
distinct(family, sciName) # identify unique values
#sppPhylo <- HARV_data[, c(5, 6)]
# Prepare the taxonomy data to extract the phylogeny
sppPhylo <- sppPhylo %>%
mutate(species = gsub("_" , " ", sciName)) %>%
separate(sciName, sep = "_", into = c("genus", "ephitet")) %>%
select(species, genus, family)
head(sppPhylo)
#| eval: false
result <- V.PhyloMaker::phylo.maker(sppPhylo, scenarios = "S3") # this will take some time.
phylo <- multi2di(result$scenario.3)
# Check if our phylogeny is ultrametric
is.ultrametric(phylo)
# Check is our phylogeny is bifurcated
is.binary.phylo(phylo)
plot(phylo, show.tip.label = FALSE)
phylo
#| eval: false
matched <- picante::match.phylo.comm(phy = phylo, comm = HARV_CDM)
matched$phy
matched$comm
rm(sppPhylo, result)
#| eval: false
matched$comm[1:10, 1:10]
#| eval: false
plot(matched$phy, show.tip.label = FALSE, type = "fan")
#| eval: false
sum(matched$phy$edge.length) #  sum of the total branch lengths in the community
#| eval: false
# Select species that are only present in the plot HARV_001
HARV_001 <- matched$comm %>%
filter(rownames(.) == "HARV_001") %>%
t() %>%
data.frame() %>%
filter(HARV_001 > 0)
# Drop species in the phylogeny that are not present in the plot HARV_001
HARV_001_phy <- drop.tip(matched$phy, setdiff(matched$phy$tip.label, rownames(HARV_001)))
sum(HARV_001_phy$edge.length)
#| eval: false
HARV_PD <- pd(samp = matched$comm,
tree = matched$phy,
include.root = FALSE) # Faith's PD
head(HARV_PD)
?pd
#| eval: false
HARV_PD %>%
ggplot(aes(x = SR, y = PD)) +
geom_point(size = 3, color = "darkgray")
#| eval: false
HARV_PD %$%
cor.test(SR, PD, use = "complete.obs")
#| eval: false
# Aux function for visualization
theme_nice <- function() {
theme_bw() + #base_family = "Noto Sans") +
theme(panel.grid.minor = element_blank(),
plot.background = element_rect(fill = "white", color = NA),
#plot.title = element_text(face = "bold"),
#strip.text = element_text(face = "bold"),
strip.background = element_rect(fill = "grey80", color = NA),
legend.title = element_text(face = "bold", size = 15),
legend.text = element_text(size = 12))
}
HARV_PD %>%
ggplot(aes(x = SR, y = PD)) +
geom_point(size = 3, color = "darkgray") +
labs(x = "Species richness", y = "PD (millions of years)") +
theme_nice()
#| eval: false
# MPD
dist.trMB <- cophenetic(HARV_001_phy)
dist.trMB <- dist.trMB[lower.tri(dist.trMB, diag = FALSE)]
mean(dist.trMB)
#| eval: false
# MNTD
dist.trMB2 <- cophenetic(HARV_001_phy)
diag(dist.trMB2) <- NA
apply(dist.trMB2, 2, min, na.rm = TRUE)
mean(apply(dist.trMB2, 2, min, na.rm = TRUE))
#| eval: false
# MPD
HARV_MPD <- mpd(matched$comm, cophenetic(matched$phy))
head(HARV_MPD)
#| eval: false
# MNTD
HARV_MNTD <- mntd(matched$comm, cophenetic(matched$phy))
head(HARV_MNTD)
View(HARV_CDM)
#| eval: false
HARV_CDM <- ses.pd(samp = matched$comm,
tree = matched$phy,
runs = 999) # this will take some time
HARV_CDM <- HARV_CDM %>%
select(ntaxa, pd.obs, pd.obs.z)
#HARV_CDM <- HARV_CDM[, c(1, 2, 6, 7)]
head(HARV_CDM)
#| eval: false
HARV_CDM <- HARV_CDM %>%
mutate(RaoD = raoD(matched$comm, force.ultrametric(matched$phy))$Dkk)
head(HARV_CDM)
#| eval: false
# SES-MPD
HARVsesmpd <- ses.mpd(samp = matched$comm,
dis = cophenetic(matched$phy),
null.model = "taxa.labels",
abundance.weighted = TRUE,
runs = 999)
HARVsesmpd <- HARVsesmpd %>%
select(mpd.obs, mpd.obs.z)
HARV_CDM <- bind_cols(HARV_CDM, HARVsesmpd)
#| eval: false
# SES-MNTD
HARVsesmntd <- ses.mntd(samp = matched$comm,
dis = cophenetic(matched$phy),
null.model = "taxa.labels",
abundance.weighted = TRUE,
runs = 999)
HARVsesmntd <- HARVsesmntd %>%
select(mntd.obs, mntd.obs.z)
HARV_CDM <- bind_cols(HARV_CDM, HARVsesmntd)
#| eval: false
# PSV or phylogenetic species variability
HARV_CDM <- HARV_CDM %>%
mutate(PSV = psv(samp = matched$comm,
tree = matched$phy,
compute.var = TRUE)$PSVs)
HARV_CDM
#| eval: false
# PSE or phylogenetic species evenness
HARV_CDM <- HARV_CDM %>%
mutate(PSE = pse(samp = matched$comm,
tree = matched$phy)$PSEs)
HARV_CDM
#| eval: false
# Scheiner 2012 qD(p)
source("https://raw.githubusercontent.com/jesusNPL/BiodiversityScience/master/Spring2021/R-Functions/qDp.R")
HARV_CDM <- HARV_CDM %>%
mutate(qDP = qDp(matched$phy, matched$comm, q = 2))
HARV_CDM
#| eval: false
scatterplotMatrix(HARV_CDM_sel)
#| eval: false
scatterplotMatrix(HARV_CDM)
#| eval: false
cor_mat <- cor(HARV_CDM, method = 'spearman')
corrplot.mixed(cor_mat,
tl.pos = "lt",
tl.cex = 0.7,
number.cex = 0.7,
addCoefasPercent = TRUE,
mar = c(0, 0, 1, 0))
HARV_CDM %>%
ggplot(aes(x = mpd.obs.z, y = PSV)) +
geom_point(size = 3, color = "darkgray") +
labs(x = "SES-MPD", y = "PSV") +
theme_nice()
cor.test(HARV_CDM$mpd.obs.z, HARV_CDM$PSV)
HARV_CDM %>%
ggplot(aes(x = RaoD, y = PSE)) +
geom_point(size = 3, color = "darkgray") +
labs(x = "RaoD", y = "PSE") +
theme_nice()
#| eval: false
HARV_mds <- metaMDS(na.omit(HARV_CDM_sel), trace = FALSE)
#| eval: false
HARV_mds <- metaMDS(na.omit(HARV_CDM), trace = FALSE)
ordiplot(HARV_mds, type = "t", display = "species")
HARV_mds
HARV_mds <- metaMDS(HARV_CDM, trace = FALSE)
HARV_mds <- metaMDS(na.omit(HARV_CDM), trace = FALSE)
HARV_CDM %>%
select(-c(mpd.obs.z, mntd.obs.z)) %>%
metaMDS(.)
HARV_mds <- HARV_CDM %>%
select(-c(mpd.obs.z, mntd.obs.z)) %>% # MNDS does not like negative values
metaMDS(.)
ordiplot(HARV_mds, type = "t", display = "species")
HARV_mds
ordiplot(HARV_mds, type = "t", display = "species")
HARV_mds <- HARV_CDM %>%
drop_na() %>%
select(-c(mpd.obs.z, mntd.obs.z)) %>% # MNDS does not like negative values
metaMDS(.)
ordiplot(HARV_mds, type = "t", display = "species")
ordiplot(HARV_mds, type = "t", display = "species")
## Metrics scores
sppTmp <- data.frame(HARV_mds$species)
sppTmp
## Metrics scores
sppTmp <- data.frame(HARV_mds$species)
sppTmp
ordiplot(HARV_mds)
HARV_mds <- HARV_CDM %>%
select(-c(mpd.obs.z, mntd.obs.z)) %>% # MNDS does not like negative values
na.omit() %>%
metaMDS(.)
ordiplot(HARV_mds, type = "t", display = "species")
HARV_CDM_sel <- HARV_CDM %>%
select(-c(mpd.obs.z, mntd.obs.z)) # MNDS does not like negative values
View(HARV_CDM_sel)
HARV_CDM %>%
select(-c(pd.obs.z, mpd.obs.z, mntd.obs.z)) %>% # MNDS does not like negative values
na.omit() %>%
metaMDS(.)
HARV_mds <- HARV_CDM %>%
select(-c(pd.obs.z, mpd.obs.z, mntd.obs.z)) %>% # MNDS does not like negative values
na.omit() %>%
metaMDS(.)
ordiplot(HARV_mds, type = "t", display = "species")
data.frame(HARV_mds$species)
data.frame(HARV_mds$species) %>%
mutate(Metric = rownames(.))
## Metrics scores
HARV_mds_scores <- data.frame(HARV_mds$species) %>%
mutate(Metric = rownames(.))
HARV_mds_scores
HARV_mds_scores %>%
ggplot(aes(x = NMDS1, y = NMDS2, color = Metric)) +
geom_point(size = 2, alpha = 0.8) +
stat_ellipse(type = "norm", geom = "polygon", alpha = 0.2)
HARV_mds_scores %>%
ggplot(aes(x = NMDS1, y = NMDS2, color = Metric)) +
geom_point(size = 2, alpha = 0.8)
HARV_mds_scores
HARV_mds_scores %>%
ggplot(aes(x = MDS1, y = MDS2, color = Metric)) +
geom_point(size = 2, alpha = 0.8) +
stat_ellipse(type = "norm", geom = "polygon", alpha = 0.2)
HARV_mds_scores %>%
ggplot(aes(x = MDS1, y = MDS2, color = Metric)) +
geom_point(size = 3, alpha = 0.5)
HARV_mds_scores %>%
ggplot(aes(x = MDS1, y = MDS2, color = Metric)) +
geom_point(size = 3, alpha = 0.5) +
theme_nice()
