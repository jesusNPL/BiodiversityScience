svm.model <- ksvm(pb ~ bio.16 + bio.5 + bio.2 + bio.14 + bio.7, data = training)
head(training)
head(training)
svm.model <- ksvm(pb ~ bio.1 + bio.6 + bio.8 + bio.17 + bio.18 + bio.3,
bio.16, data = training)
head(training)
svm.model <- ksvm(pb ~ bio.1 + bio.6 + bio.8 + bio.17 + bio.18 + bio.3 + bio.16,
data = training)
glm.model <- glm(pb ~ bio.1 + bio.6 + bio.8 + bio.17 + bio.18 + bio.3 + bio.16,
data = training, family = binomial(link = "logit"))
Bioclim0k <- predict(object = Bioclim.model, x = climSA0k_sel)
Bioclim0k <- predict(object = Bioclim.model, x = hyacinth_bios_sel)
plot(Bioclim0k)
plot(Bioclim0k)
points(training[training[, "pb"] == 1, "x"], training[training[, "pb"] == 1, "y"])
Gower0k <- predict(hyacinth_bios_sel, Gower.model)
plot(Gower0k)
svm0k <- predict(hyacinth_bios_sel, svm.model)
plot(svm0k)
GLM0k <- predict(hyacinth_bios_sel, glm.model)
plot(GLM0k)
source("https://raw.githubusercontent.com/jesusNPL/DetectionTT/master/normalize.R")
GLM0k <- normalize(ras = GLM0k)
plot(GLM0k)
par(mfrow = c(2, 2))
plot(Bioclim0k, main = "bioclim")
plot(Gower0k, main = "Gower")
plot(svm0k, main = "svm")
plot(GLM0k, main = "glm")
Bioclim.eval <- evaluate(p = test[test[, "pb"] == 1, 1:2],
a = test[test[, "pb"] == 0, 1:2],
model = Bioclim.model,
x = hyacinth_bios_sel)
Bioclim.eval
str(Bioclim.eval)
Gower.eval <- evaluate(p = test[test[, "pb"] == 1, 1:2],
a = test[test[, "pb"] == 0, 1:2],
model = Gower.model,
x = hyacinth_bios_sel)
svm.eval <- evaluate(p = test[test[, "pb"] == 1, 1:2],
a = test[test[, "pb"] == 0, 1:2],
model = svm.model,
x = hyacinth_bios_sel)
glm.eval <- evaluate(p = test[test[, "pb"] == 1, 1:2],
a = test[test[, "pb"] == 0, 1:2],
model = glm.model,
x = hyacinth_bios_sel)
# validate results
par(mfrow = c(2, 2))
plot(Bioclim.eval, "ROC")
plot(Gower.eval, "ROC")
plot(svm.eval, "ROC")
plot(glm.eval, "ROC")
Bioclim.thr <- threshold(Bioclim.eval)
Bioclim.thr
bio <- Bioclim.thr$spec_sens
bio <- Bioclim.thr$spec_sens
Gower.thr <- threshold(Gower.eval)
gow <- Gower.thr$spec_sens
svm.thr <- threshold(svm.eval)
s <- svm.thr$spec_sens
glm.thr <- threshold(glm.eval)
g <- glm.thr$spec_sens
par(mfrow = c(2, 2))
plot(Bioclim0k > bio, main = "Bioclim")
plot(GLM0k > g, main = "GLM")
plot(Gower0k > gow, main = "Gower")
plot(svm0k > s, main = "SVM")
# Combine all thresholds
thrs <- (bio + gow + s + g)
tmp <- stack(Bioclim0k, Gower0k, GLM0k, svm0k)
map.sum <- sum(tmp) # sum
par(mfrow = c(2, 2))
plot(map.sum)
plot(map.sum > thrs)
plot(map.sum > 2)
plot(map.sum > 3)
map.mean <- mean(tmp) # mean
map.sd <- calc(tmp, sd) # sd
plot(map.mean)
par(mfrow = c(2, 2))
plot(map.mean)
plot(map.mean > thrs)
plot(map.mean > 0.2)
plot(map.mean > 0.3)
par(mfrow = c(1, 2))
plot(map.sum)
plot(map.sum > 2)
par(mfrow = c(2, 2))
plot(map.mean)
plot(map.sd)
plot(map.mean > 0.2)
plot(map.mean > 0.3)
par(mfrow = c(2, 2))
plot(map.mean)
plot(map.sd)
plot(map.mean > 0.1)
plot(map.mean > 0.3)
par(mfrow = c(1, 2))
plot(map.mean)
plot(map.sd)
auc <- sapply(list(Bioclim.eval, Gower.eval, svm.eval, glm.eval), function(x) x@auc)
w <- (auc-0.5)^2
map.mean.weight <- weighted.mean(tmp[[c("layer.1", "layer.2", "layer.3", "layer.4")]], w)
plot(map.mean.weight)
tmp <- stack(Bioclim0k, Gower0k, GLM0k, svm0k)
names(tmp) <- c("Bioclim", "Gower", "GLM", "SVM")
map.mean.weight <- weighted.mean(tmp, w)
plot(map.mean.weight)
rm(map.mean.weight)
map.mean.weight <- weighted.mean(tmp, w)
plot(map.mean.weight)
par(mfrow = c(2, 2))
plot(map.sum, main = "Sum of all models")
plot(map.mean, main = "Mean of all models")
plot(map.mean.weight, main = "Weighted mean of all models")
plot(map.sd, main = "Standard deviation of all models")
rm(list = ls())
rm(list = ls())
### Create spectra from a matrix or data.frame
# Read data from the CSV file. If you don't use `check.names` = FALSE when reading
# the csv, R will usually add a letter to the column names (e.g. 'X450') which will
# cause problems when converting the matrix to spectra.
dada <- read.csv("Data/Spectra/spec_data_for_preds.csv", check.names = FALSE)
head(dada)
library(spectrolab)
library(pls)
dim(dada)
str(dada)
head(dada)
# The sample names is in column 1.
dada_spec <- as.spectra(dada, name_idx = 1) ### make spectra object
# And now you have a spectra object with sample names and metadata...
dada_spec
plot_interactive(dada_spec) ### look at spectra
plot(spec_vn[1:10], col = rainbow(10))
spec_vn <- normalize(dada_spec) ### model is build with vector normalized spectra, length of each spectrum =  unity, to remove illumination differences
plot(spec_vn[1:10], col = rainbow(10))
plot(spec_vn[1:10], col = rainbow(10))
?resample.spectra
spec_pred <- resample(spec_vn, new_wvls = seq(1200, 2400, 20))
meta(spec_pred, "NSC") <- reflectance(spec_pred) %*% coefNSC[-1] + coefNSC[1]
head(spec_pred)
spec_pred
?meta.spectra
# The spectra can be transformed to a data frame just using the base function as.data.frame
preds <- as.data.frame(spec_pred)
head(preds)
spec_vn
# Simply print the object
spec_vn
# Get the dataset's dimensions
dim(spec_vn)
# Vector of all sample names. Note: Duplicated sample names are permitted
n <- names(achillea_spec)
# Vector of all sample names. Note: Duplicated sample names are permitted
n <- names(spec_vn)
n
# Vector of wavelengths
w <- wavelengths(spec_vn)
w
# Reflectance matrix
r <- reflectance(spec_vn)
View(r)
# Metadata. Use simplify = TRUE to get a vector instead of a data.frame
m <- meta(spec_vn, "ssp", simplify = TRUE)
spec_vn
View(dada)
# Metadata. Use simplify = TRUE to get a vector instead of a data.frame
m <- meta(spec_vn, "ID", simplify = TRUE)
# Metadata. Use simplify = TRUE to get a vector instead of a data.frame
m <- meta(spec_vn, simplify = TRUE)
m
# Metadata. Use simplify = TRUE to get a vector instead of a data.frame
m <- meta(spec_vn, "ind", simplify = TRUE)
# Metadata. Use simplify = TRUE to get a vector instead of a data.frame
m <- meta(spec_vn, "indiv", simplify = TRUE)
# Metadata. Use simplify = TRUE to get a vector instead of a data.frame
m <- meta(spec_vn, simplify = TRUE)
# Subset wavelength regions.
spec_sub_vis <- spec_vn[, 400:700 ]
# Subset spectra to all entries where sample_name matches "indiv_7" or get the first three samples
spec_sub_byname <- spec_vn["indiv_7", ]
spec_sub_byname
spec_sub_byidx <- spec_vn[1:3, ]
# Subsetting samples by indexes works and so does subsetting wavelengths by numerics or characters.
spec_sub_byidx[1, "405"] == spec_sub_byidx[1, 405]
# Simple spectra plot
plot(spec_vn, lwd = 0.75, lty = 1, col = "grey25", main = "All Spectra")
# Stand along quantile plot
plot_quantile(spec_vn, total_prob = 0.8, col = rgb(1, 0, 0, 0.5), lwd = 0.5, border = TRUE)
title("80% spectral quantile")
# Stand along quantile plot
plot_quantile(spec_vn, total_prob = 0.8, col = rgb(1, 0, 0, 0.5), lwd = 0.5, border = TRUE)
title("80% spectral quantile")
# Combined individual spectra, quantiles and shade spectral regions
plot(spec_vn, lwd = 0.25, lty = 1, col = "grey50", main = "Spectra, quantile and regions")
plot_quantile(achillea_spec, total_prob = 0.8, col = rgb(1, 0, 0, 0.25),
border = FALSE, add = TRUE)
# Combined individual spectra, quantiles and shade spectral regions
plot(spec_vn, lwd = 0.25, lty = 1, col = "grey50", main = "Spectra, quantile and regions")
plot_quantile(spec_vn, total_prob = 0.8, col = rgb(1, 0, 0, 0.25),
border = FALSE, add = TRUE)
plot_regions(spec_vn, regions = default_spec_regions(), add = TRUE)
# Make a matrix from a `spectra` object
spec_as_mat = as.matrix(spec_vn, fix_names = "none")
spec_as_mat[1:4, 1:3]
# Make a matrix from a `spectra` object
spec_as_df = as.data.frame(spec_vn, fix_names = "none", metadata = TRUE)
spec_as_df[1:4, 1:5]
VIS <- c(400:700)
NIR <- c(800:1300)
SWIR1 <- c(1550:1800)
SWIR2 <- c(2000:2400)
spec_VIS <- spec_vn[, VIS]
spec_VIS
plot(spec_VIS, lwd = 0.75, lty = 1, col = "grey25", main = "Just VIS")
View(spec_as_df)
spec_as_df_clean <- spec_as_df[, 3:2001]
spec_as_df_clean[1:10, 1:5]
source("https://raw.githubusercontent.com/jesusNPL/BiodiversityScience/master/RFunctions/mixR.R")
source("https://raw.githubusercontent.com/jesusNPL/BiodiversityScience/master/Spring2019/RFunctions/mixR.R")
ind1 <- spec_as_df_clean[1, ]
View(ind1)
Descriptives(as.numeric(ind1))
descript_all_individuals <- apply(spec_as_df_clean, MARGIN = 1, FUN = Descriptives)
descript_all_individuals[[10]]
#head(spec_as_df_clean)
SR_spec = spec_as_df[, "845"]/spec_as_df[, "665"]
SR_spec
rm(list = ls())
allData <- read.csv("Data/Spectra/spec_chem_fiber.csv")
spec_inter <- 20
allData <- allData[, c(1:6, seq(which(names(allData) %in% "X1200"),
which(names(allData) %in% "X2400"),
by = spec_inter))]
allData <- read.csv("Data/Spectra/spec_chem_fiber.csv")
allData <- allData[, c(1:6, seq(which(names(allData) %in% "X1200"),
which(names(allData) %in% "X2400"),
by = spec_inter))]
### setup dataset
dat <- data.frame(SampN = c(1:nrow(allData)))
dat$abbrev <- allData$abbrev ## optional info to keep
dat$NSC <- allData$nonstructural_perc ## select trait
dat$spec <- as.matrix(allData[, grepl("X", names(allData))]) ## add spectral data as matrix
dat <- na.exclude(dat)
View(dat)
?sampN
head(dat)
### setup dataset
dat <- data.frame(SampN = c(1:nrow(allData)))
allData[1:5, 1:5]
dat$abbrev <- allData$abbrev ## optional info to keep
dat$NSC <- allData$nonstructural_perc ## select trait
dat$spec <- as.matrix(allData[, grepl("X", names(allData))]) ## add spectral data as matrix
dat <- na.exclude(dat)
# PLSR
mod <- plsr(NSC ~ spec, ncomp = 25, data = dat, validation = "LOO")
?validationplot
summary(mod)
validationplot(mod, val.type = "RMSEP", estimate = "CV")
validationplot(mod, val.type = "R2", estimate = "CV")
b <- predplot(mod, ncomp = compi, which = "train")
compi <- 12 ##
b <- predplot(mod, ncomp = compi, which = "train")
a <- predplot(mod, ncomp = compi, which = "validation")
dat_predtrue <- data.frame(abbrev = character(nrow(dat)))
dat_predtrue$abbrev <- dat$abbrev
dat_predtrue$measured <- a[, colnames(a) == "measured"]
dat_predtrue$predicted_val <- a[, colnames(a) == "predicted"]
dat_predtrue$predicted_train <- b[, colnames(b) == "predicted"]
mod_fit <- lm(measured ~ predicted_val, data = dat_predtrue)
summary(mod_fit)
View(dat_predtrue)
plot(measured ~ predicted_val, data = dat_predtrue)
abline(mod_fit)
plot(measured ~ predicted_val, data = dat_predtrue)
abline(mod_fit)
abline(0, 1, lty = 2)
plot(measured ~ predicted_val, data = dat_predtrue)
abline(mod_fit, col = ("red"), lwd = 2)
abline(0, 1, lty = 2, lwd = 2)
?nls
### Test if slope is sign diff from 1
mod1 <- nls(measured ~ k*predicted_val + d, data = dat_predtrue, start = list(k = 1, d = 0)) ## mod1 ... alternative mod, fixed slope at 1 and intercept at 0
mod0 <- nls(measured ~ predicted_val + d, data = dat_predtrue, start = list(d = 0)) ## mod0 ... our model, but intercept fixed at 0 (only look at deviation of slope)
anova (mod1, mod0)
mod0d <- nls(measured ~ k*predicted_val, data = dat_predtrue, start = list(k = 1)) ## mod0 ... our model, but slope fixed at 1 (only look at dev of intercept)
anova (mod1, mod0d) ## we want no sign. diff
### Coefficients for predictions #####
coefNSC <- coef(mod, ncomp = compi, intercept = T)
#### RMSEP, root mean squared error of predictions, in orig units ####
rmse <- function(obs, pred) {sqrt(mean((obs-pred)^2))}
(rm <- rmse(dat_predtrue$measured, dat_predtrue$predicted_val))
wvl <- as.numeric(substr(colnames(dat$spec), 2, nchar(colnames(dat$spec))))
loadingplot(mod,comps = compi, xaxt = "n", xlab = "wavelength")
axis(1, seq(0, length(wvl), by = 10), labels = seq(wvl[1], wvl[length(wvl)],
length.out = 7))
(NSC_coef <- coef(mod, ncomp = compi, intercept = T))
cite("spectrolab")
citation("spectrolab")
library(spectrolab)
library(pls)
### Create spectra from a matrix or data.frame
# Read data from the CSV file. If you don't use `check.names` = FALSE when reading
# the csv, R will usually add a letter to the column names (e.g. 'X450') which will
# cause problems when converting the matrix to spectra.
dada <- read.csv("Data/Spectra/spec_data_for_preds.csv", check.names = FALSE)
# remember to locate the data inside the main folder Data
head(dada)
dim(dada)
# The sample names is in column 1.
dada_spec <- as.spectra(dada, name_idx = 1) ### make spectra object
# And now you have a spectra object with sample names and metadata...
dada_spec
plot_interactive(dada_spec) ### look at spectra
spec_vn <- normalize(dada_spec) ### model is build with vector normalized spectra, length of each spectrum =  unity, to remove illumination differences
plot(spec_vn[1:10], col = rainbow(10))
# The spectra can be transformed to a data frame just using the base function as.data.frame
preds <- as.data.frame(spec_vn)
head(preds)
# Simply print the object
spec_vn
# Get the dataset's dimensions
dim(spec_vn)
# Vector of all sample names. Note: Duplicated sample names are permitted
n <- names(spec_vn)
# Vector of wavelengths
w <- wavelengths(spec_vn)
# Reflectance matrix
r <- reflectance(spec_vn)
# Metadata. Use simplify = TRUE to get a vector instead of a data.frame
m <- meta(spec_vn, simplify = TRUE)
# Subset wavelength regions.
spec_sub_vis <- spec_vn[, 400:700]
# Subset spectra to all entries where sample_name matches "indiv_7" or get the first three samples
spec_sub_byname <- spec_vn["indiv_7", ]
spec_sub_byidx <- spec_vn[1:3, ]
# Subsetting samples by indexes works and so does subsetting wavelengths by numerics or characters.
spec_sub_byidx[1, "405"] == spec_sub_byidx[1, 405]
# Simple spectra plot
plot(spec_vn, lwd = 0.75, lty = 1, col = "grey25", main = "All Spectra")
# Stand along quantile plot
plot_quantile(spec_vn, total_prob = 0.8, col = rgb(1, 0, 0, 0.5), lwd = 0.5, border = TRUE)
title("80% spectral quantile")
# Combined individual spectra, quantiles and shade spectral regions
plot(spec_vn, lwd = 0.25, lty = 1, col = "grey50", main = "Spectra, quantile and regions")
plot_quantile(spec_vn, total_prob = 0.8, col = rgb(1, 0, 0, 0.25),
border = FALSE, add = TRUE)
plot_regions(spec_vn, regions = default_spec_regions(), add = TRUE)
# Make a matrix from a `spectra` object
spec_as_mat = as.matrix(spec_vn, fix_names = "none")
spec_as_mat[1:4, 1:3]
# Make a matrix from a `spectra` object
spec_as_df = as.data.frame(spec_vn, fix_names = "none", metadata = TRUE)
spec_as_df[1:4, 1:5]
VIS <- c(400:700)
NIR <- c(800:1300)
SWIR1 <- c(1550:1800)
SWIR2 <- c(2000:2400)
spec_VIS <- spec_vn[, VIS]
spec_VIS
plot(spec_VIS, lwd = 0.75, lty = 1, col = "grey25", main = "Just VIS")
spec_as_df_clean <- spec_as_df[, 3:2001]
spec_as_df_clean[1:10, 1:5]
ind1 <- spec_as_df_clean[1, ]
Descriptives(as.numeric(ind1))
source("https://raw.githubusercontent.com/jesusNPL/BiodiversityScience/master/Spring2019/RFunctions/mixR.R")
Descriptives(as.numeric(ind1))
descript_all_individuals <- apply(spec_as_df_clean, MARGIN = 1, FUN = Descriptives)
descript_all_individuals[[10]] # these are the descriptes for the individual number 10
#head(spec_as_df_clean)
SR_spec = spec_as_df[, "845"]/spec_as_df[, "665"]
SR_spec
rm(list = ls())
allData <- read.csv("Data/Spectra/spec_chem_fiber.csv")
dim(allData)
class(allData)
spec_inter <- 20
allData <- allData[, c(1:6, seq(which(names(allData) %in% "X1200"),
which(names(allData) %in% "X2400"),
by = spec_inter))]
### setup dataset
dat <- data.frame(SampN = c(1:nrow(allData)))
dat$abbrev <- allData$abbrev ## optional info to keep
dat$NSC <- allData$nonstructural_perc ## select trait
dat$spec <- as.matrix(allData[, grepl("X", names(allData))]) ## add spectral data as matrix
dat <- na.exclude(dat)
# PLSR
mod <- plsr(NSC ~ spec, ncomp = 25, data = dat, validation = "LOO")
summary(mod)
validationplot(mod, val.type = "RMSEP", estimate = "CV") # The lower the RMSEP the better
validationplot(mod, val.type = "R2", estimate = "CV")
compi <- 12 ##
compi <- 12 ##
b <- predplot(mod, ncomp = compi, which = "train")
a <- predplot(mod, ncomp = compi, which = "validation")
dat_predtrue <- data.frame(abbrev = character(nrow(dat)))
dat_predtrue$abbrev <- dat$abbrev
dat_predtrue$measured <- a[, colnames(a) == "measured"]
dat_predtrue$predicted_val <- a[, colnames(a) == "predicted"]
dat_predtrue$predicted_train <- b[, colnames(b) == "predicted"]
dim(dat_predtrue)
head(dat_predtrue)
mod_fit <- lm(measured ~ predicted_val, data = dat_predtrue)
summary(mod_fit)
plot(measured ~ predicted_val, data = dat_predtrue, ylab = "Measured", xlab = "Predicted")
abline(mod_fit, col = ("red"), lwd = 2)
abline(0, 1, lty = 2, lwd = 2)
### Test if slope is sign diff from 1
mod1 <- nls(measured ~ k*predicted_val + d, data = dat_predtrue,
start = list(k = 1, d = 0))
## mod1 ... alternative mod, fixed slope at 1 and intercept at 0
mod0 <- nls(measured ~ predicted_val + d, data = dat_predtrue, start = list(d = 0))
## mod0 ... our model, but intercept fixed at 0 (only look at deviation of slope)
anova (mod1, mod0)
mod0d <- nls(measured ~ k*predicted_val, data = dat_predtrue, start = list(k = 1)) ## mod0 ... our model, but slope fixed at 1 (only look at dev of intercept)
anova (mod1, mod0d) ## we want no sign. diff
### Coefficients for predictions #####
coefNSC <- coef(mod, ncomp = compi, intercept = T)
#### RMSEP, root mean squared error of predictions, in orig units ####
rmse <- function(obs, pred) {sqrt(mean((obs-pred)^2))}
(rm <- rmse(dat_predtrue$measured, dat_predtrue$predicted_val))
### on average pred are x % off
wvl <- as.numeric(substr(colnames(dat$spec), 2, nchar(colnames(dat$spec))))
loadingplot(mod,comps = compi, xaxt = "n", xlab = "wavelength")
axis(1, seq(0, length(wvl), by = 10), labels = seq(wvl[1], wvl[length(wvl)],
length.out = 7))
(NSC_coef <- coef(mod, ncomp = compi, intercept = T))
dada <- read.csv("Data/Spectra/spec_data_for_preds.csv", check.names = F)
dada <- read.csv("Data/Spectra/spec_data_for_preds.csv", check.names = F)
dada_spec <- as.spectra(dada, name_idx = 1) # make spectra object
spec_vn <- normalize(dada_spec) # model is build with vector normalized spectra,
# length of each spectrum =  unity, to remove illumination differences
plot(spec_vn[1:10], col = rainbow(10))
spec_pred <- resample(spec_vn, new_wvls = seq(1200, 2400, 20))
meta(spec_pred, "NSC") <- reflectance(spec_pred) %*% coefNSC[-1] + coefNSC[1]
meta(spec_pred, "NSC")
preds <- as.data.frame(spec_pred)
preds <- as.data.frame(spec_pred)
head(preds)
dada <- read.csv("Data/Spectra/spec_data_for_preds.csv", check.names = F)
dada_spec <- as.spectra(dada, name_idx = 1) # make spectra object
spec_vn <- normalize(dada_spec) # model is build with vector normalized spectra,
# length of each spectrum =  unity, to remove illumination differences
plot(spec_vn[1:10], col = rainbow(10))
spec_pred <- resample(spec_vn, new_wvls = seq(1200, 2400, 20))
meta(spec_pred, "NSC") <- reflectance(spec_pred) %*% coefNSC[-1] + coefNSC[1]
meta(spec_pred, "NSC")
preds <- as.data.frame(spec_pred)
head(preds)
View(preds)
rm(list = ls())
### Create spectra from a matrix or data.frame
# Read data from the CSV file. If you don't use `check.names` = FALSE when reading
# the csv, R will usually add a letter to the column names (e.g. 'X450') which will
# cause problems when converting the matrix to spectra.
dada <- read.csv("Data/Spectra/spec_data_for_preds.csv", check.names = FALSE)
# remember to locate the data inside the main folder Data
head(dada)
# The sample names is in column 1.
dada_spec <- as.spectra(dada, name_idx = 1) ### make spectra object
library(spectrolab) # Class and Methods for Hyperspectral Data
library(pls) # Partial Least Squares and Principal Component Regression
# The sample names is in column 1.
dada_spec <- as.spectra(dada, name_idx = 1) ### make spectra object
# And now you have a spectra object with sample names and metadata...
dada_spec
plot_interactive(dada_spec) ### look at spectra
spec_vn <- normalize(dada_spec) ### model is build with vector normalized spectra, length of each spectrum =  unity, to remove illumination differences
# The spectra can be transformed to a data frame just using the base function as.data.frame
preds <- as.data.frame(spec_vn)
head(preds)
# Simply print the object
spec_vn
# Get the dataset's dimensions
dim(spec_vn)
# Vector of all sample names. Note: Duplicated sample names are permitted
n <- names(spec_vn)
# Vector of wavelengths
w <- wavelengths(spec_vn)
# Reflectance matrix
r <- reflectance(spec_vn)
# Metadata. Use simplify = TRUE to get a vector instead of a data.frame
m <- meta(spec_vn, simplify = TRUE)
library(rgbif)
library(maptools)
library(CoordinateCleaner)
library(raster)
library(dismo)
library(rworldmap)
library(rgdal)
gbif_furu <- occ_search(scientificName = "Furnarius rufus", return = "data", limit = 500)
View(gbif_furu)
class(gbif_furu)
subset(gbif_furu, !is.na(decimalLatitude))
gbif_furu <- subset(gbif_furu, !is.na(decimalLatitude))
cl_gbif_furu <- clean_coordinates(gbif_furu, lon = "decimalLongitude", lat = "decimalLatitude", countries = "countryCode", tests = c("centroids", "outliers"))
plot(SA)
SA <- subset(countriesCoarse, continent == "South America")
plot(SA)
points(gbif_furu$decimalLongitude, gbif_furu$decimalLatitude, col = "red",  pch = 19)
plot(SA)
points(gbif_furu$decimalLongitude, gbif_furu$decimalLatitude, col = "red", pch = 19)
points(gbif_furu$decimalLongitude[cl_gbif_furu$.summary], gbif_furu$decimalLatitude[cl_gbif_furu$.summary], col = "blue", pch = 18)
View(cl_gbif_furu)
class(cl_gbif_furu)
View(cl_gbif_furu)
View(gbif_furu)
gbif_furu[cl_gbif_furu$.summary,]
gbif_furu <- gbif_furu[cl_gbif_furu$.summary,]
cl_gbif_furu$.summary
