values(r_glm_bin) <- ifelse(values(r_glm_pred)>=thresh[3,2], 1, 0)
plot(stack(r_glm_pred, r_glm_bin),main=c('GLM prob.','GLM bin.'), axes=F)
library(vegan)
library(raster)
library(sp)
library(psych)
library(maps)
library(maptools)
library(dismo)
library(rworldmap)
datoG0 <- read.table("Data/Environment/bio_var_CCSM_0k_global.txt", h = T)
head(datoG0)
datoG0[1:5, 1:5]
dim(datoG0)
str(datoG0)
summary(datoG0)
class(datoG0)
names(datoG0)
gridded(datoG0) <- ~long+lat
gridded(datoG0) <- ~long+lat
library(vegan)
require(raster)
library(sp)
library(psych)
library(maps)
library(maptools)
library(dismo)
library(rworldmap)
gridded(datoG0) <- ~long+lat
class(datoG0)
clima0k <- stack(datoG0)
plot(clima0k$bio.1)
map(add = T)
# Set a geographical extension (South America long = -90, -30, lat = -60, 15)
e <- extent(c(-90, -30, -60, 15))
clima0k.SA <- crop(clima0k, e)
plot(clima0k.SA$bio.9)
map(add = T)
ncell(clima0k.SA)
SA0k <- values(clima0k.SA)
class(SA0k)
coord.SA <- xyFromCell(clima0k.SA, 1:ncell(clima0k.SA))
SA0k <- cbind(coord.SA, SA0k)
# Observ specific rows and columns
SA0k[1:5,]
SA0k[1:5, 1:5]
# Variable selection (exceute a factorial analysis [FA])
fa.parallel(SA0k[, -c(1:3)])
SA0k[1:5, 1:3]
SA0k.fa <- fa(SA0k[, -c(1:3)], nfactors = 5, rotate = "varimax")
SA0k.fa
#6. Save the selected variables.
write.table(SA0k[, c("x", "y", "bio.1", "bio.2", "bio.4", "bio.12", "bio.15")],
row.names = FALSE, "Data/Environment/climaSA0k.txt", sep = "\t")
writeRaster(clima0k.SA, "Data/Environment/climaSA0k.asc", format = "ascii", bylayer = T)
rm(list = ls())
hyacinth <- gbif("anodorhynchus", "hyacinthinus*", geo = FALSE)
# how many rows and colums?
dim(hyacinth)
## [1] 3986   130
# select the records that have longitude and latitude data
colnames(hyacinth)
hyacinth <- subset(hyacinth, !is.na(lon) & !is.na(lat))
dim(hyacinth)
## [1] 3703   130
# show some values
hyacinth[1:4, c(1:5, 7:10)]
hyacinth_coords <- hyacinth[, c(114, 84, 77)]
View(hyacinth_coords)
names(hyacinth)
hyacinth_coords <- hyacinth[, c(120, 90, 83)]
View(hyacinth_coords)
head(hyacinth_coords)
dir.create("Data/OCC")
write.csv(hyacinth_coords, "Data/OCC/hyacinth_data.csv")
write.csv(hyacinth_coords, "Data/OCC/hyacinth_data.csv")
rm(list = ls())
hyacinth <- read.csv("Data/OCC/hyacinth_data.csv")
head(hyacinth)
hyacinth_coords <- hyacinth[, c(3, 4)]
head(hyacinth_coords)
climSA0k <- read.table("Data/Environment/climaSA0k.txt", h = T)
class(climSA0k)
gridded(climSA0k) <- ~x + y
climSA0k <- stack(climSA0k)
climSA0k
plot(climSA0k$bio.1)
points(hyacinth_coords[, "lon"], hyacinth_coords[, "lat"])
hyacinth_var <- extract(climSA0k, hyacinth_coords, cellnumbers = T)
head(hyacinth_var)
hyacinth_var <- cbind(hyacinth_coords, hyacinth_var)
hyacinth_var[1:5, ]
hyacinth_var <- na.omit(hyacinth_var) # remove NA's
dim(hyacinth_var)
duplicated(hyacinth_var[,"cells"])
a <- which(duplicated(hyacinth_var[, "cells"]) == T)
a
hyacinth_var <- hyacinth_var[-a, ]
dim(hyacinth_var)
write.table(hyacinth_var, row.names = FALSE, "Data/OCC/hyacinth_var.txt", sep = "\t")
View(hyacinth_var)
plot(climSA0k$bio.1)
points(hyacinth_var[, "lon"], hyacinth_var[, "lat"])
id.back <- sample(1:nrow(clima0k), nrow(hyacinth_var)) # nrow(hyacinth_var) retunr the number of TRUE occurrences
id.back <- sample(1:nrow(climSA0k), nrow(hyacinth_var)) # nrow(hyacinth_var) retunr the number of TRUE occurrences
length(id.back)
background <- climSA0k[id.back, ]
dim(background)
names(background)
View(background)
clima0k <- read.table("Data/Environment/climaSA0k.txt", h = T)
dim(clima0k)
id.back <- sample(1:nrow(clima0k), 130) # nrow(hyacinth_var) retunr the same number of TRUE occurrences
length(id.back)
background <- clima0k[id.back, ]
View(background)
dim(background)
names(background)
id.back <- sample(1:nrow(clima0k), 130, replace = TRUE) # nrow(hyacinth_var) retunr the same number of TRUE occurrences
length(id.back)
background <- clima0k[id.back, ]
dim(background)
names(background)
View(background)
dim(na.omit(background))
id.back <- sample(1:nrow(climaSA0k), 130, replace = TRUE) # nrow(hyacinth_var) retunr the same number of TRUE occurrences
id.back <- sample(1:nrow(climSA0k), 130, replace = TRUE) # nrow(hyacinth_var) retunr the same number of TRUE occurrences
length(id.back)
background <- clima0k[id.back, ]
dim(background)
names(background)
View(background)
datoG0 <- read.table("Data/Environment/bio_var_CCSM_0k_global.txt", h = T)
head(datoG0)
datoG0[1:5, 1:5]
dim(datoG0)
str(datoG0)
summary(datoG0)
class(datoG0)
names(datoG0)
gridded(datoG0) <- ~long+lat
class(datoG0)
clima0k <- stack(datoG0)
plot(clima0k$bio.1)
map(add = T)
# Set a geographical extension (South America long = -90, -30, lat = -60, 15)
e <- extent(c(-90, -30, -60, 15))
clima0k.SA <- crop(clima0k, e)
plot(clima0k.SA$bio.9)
map(add = T)
ncell(clima0k.SA)
SA0k <- values(clima0k.SA)
class(SA0k)
coord.SA <- xyFromCell(clima0k.SA, 1:ncell(clima0k.SA))
SA0k <- cbind(coord.SA, SA0k)
# Observ specific rows and columns
SA0k[1:5,]
SA0k[1:5, 1:5]
# Variable selection (exceute a factorial analysis [FA])
fa.parallel(SA0k[, -c(1:3)])
SA0k[1:5, 1:3]
SA0k.fa <- fa(SA0k[, -c(1:3)], nfactors = 5, rotate = "varimax")
SA0k.fa <- fa(SA0k[, -c(1:3)], nfactors = 5, rotate = "varimax")
SA0k.fa <- fa(SA0k[, -c(1:3)], nfactors = 7, rotate = "varimax")
SA0k.fa <- fa(SA0k[, -c(1:3)], nfactors = 4, rotate = "varimax")
rm(list = ls())
hyacinth <- read.csv("Data/OCC/hyacinth_data.csv")
head(hyacinth)
head(hyacinth)
hyacinth_coords <- hyacinth[, c(3, 4)]
head(hyacinth_coords)
climSA0k <- read.table("Data/Environment/climaSA0k_all.txt", h = T)
class(climSA0k)
gridded(climSA0k) <- ~x + y
library(vegan)
require(raster)
library(sp)
library(psych)
library(rgeos)
library(maps)
library(maptools)
library(dismo)
library(rworldmap)
library(kernlab)
gridded(climSA0k) <- ~x + y
climSA0k <- stack(climSA0k)
climSA0k
plot(climSA0k$bio.1)
points(hyacinth_coords[, "lon"], hyacinth_coords[, "lat"])
hyacinth_spatial <- hyacinth_coords
coordinates(hyacinth_spatial) <- ~lon+lat
hyacinth_spatial <- hyacinth_coords
coordinates(hyacinth_spatial) <- ~lon+lat
hyacinth_spatial
climSA0k
proj4string(hyacinth_spatial) <- CRS("+proj=longlat +datum=WGS84")
hyacinth_spatial <- hyacinth_coords
coordinates(hyacinth_spatial) <- ~lon+lat
proj4string(hyacinth_spatial) <- CRS("+proj=longlat +datum=WGS84")
hyacinth_spatial
hyacinth_buffer <- gBuffer(hyacinth_spatial, byid = FALSE, id = NULL, width = 2.0,
quadsegs = 5, capStyle = "ROUND",
joinStyle = "ROUND", mitreLimit = 1.0)
plot(climSA0k$bio.1)
plot(hyacinth_buffer, add = TRUE)
hyacinth_coords <- na.omit(hyacinth_coords) # remove NA's
dim(hyacinth_coords)
View(hyacinth)
?gBuffer
hyacinth_buffer <- gBuffer(hyacinth_spatial, byid = FALSE, id = NULL, width = 3.0,
quadsegs = 5, capStyle = "ROUND",
joinStyle = "ROUND", mitreLimit = 1.0)
plot(climSA0k$bio.1)
plot(hyacinth_buffer, add = TRUE)
plot(hyacinth_spatial, add = TRUE)
hyacinth_bios <- crop(climSA0k, hyacinth_buffer)
plot(hyacinth_bios$bio.1)
plot(hyacinth_spatial, add = TRUE)
hyacinth_bios <- mask(climSA0k, hyacinth_buffer)
plot(hyacinth_bios$bio.1)
plot(hyacinth_spatial, add = TRUE)
hyacinth_bios <- mask(climSA0k, hyacinth_buffer)
hyacinth_bios <- crop(climSA0k, hyacinth_buffer)
plot(hyacinth_bios$bio.1)
plot(hyacinth_spatial, add = TRUE)
hyacinth_bios <- mask(climSA0k, hyacinth_buffer)
hyacinth_bios2 <- crop(hyacinth_bios, hyacinth_buffer)
plot(hyacinth_bios2$bio.1)
plot(hyacinth_spatial, add = TRUE)
hyacinth_bios <- crop(climSA0k, hyacinth_buffer)
hyacinth_bios2 <- mask(hyacinth_bios, hyacinth_buffer)
plot(hyacinth_bios2$bio.1)
plot(hyacinth_spatial, add = TRUE)
hyacinth_var <- extract(hyacinth_bios2, hyacinth_coords, cellnumbers = T)
head(hyacinth_var)
View(hyacinth_var)
hyacinth_var <- cbind(hyacinth_coords, hyacinth_var)
hyacinth_var[1:5, ]
write.table(hyacinth_var, row.names = FALSE, "Data/OCC/hyacinth_var.txt", sep = "\t")
hyacinth_var <- na.omit(hyacinth_var) # remove NA's
dim(hyacinth_var)
View(hyacinth_var)
duplicated(hyacinth_var[, "cells"])
a <- which(duplicated(hyacinth_var[, "cells"]) == T)
a
hyacinth_var_noDUPS <- hyacinth_var[-a, ]
dim(hyacinth_var)
hyacinth_var_noDUPS <- hyacinth_var[-a, ]
dim(hyacinth_var_noDUPS)
write.table(hyacinth_var_noDUPS, row.names = FALSE, "Data/OCC/hyacinth_var.txt", sep = "\t")
plot(hyacinth_bios2$bio.1)
points(hyacinth_var_noDUPS[, "lon"], hyacinth_var_noDUPS[, "lat"])
id.back <- sample(1:nrow(climSA0k), nrow(hyacinth_var)) # nrow(hyacinth_var) return the same number of TRUE occurrences
id.back <- sample(1:nrow(hyacinth_bios2), nrow(hyacinth_var)) # nrow(hyacinth_var) return the same number of TRUE occurrences
id.back <- sample(1:nrow(hyacinth_bios2), nrow(hyacinth_var), replace = TRUE) # nrow(hyacinth_var) return the same number of TRUE occurrences
length(id.back)
id.back <- sample(1:nrow(hyacinth_bios2), nrow(hyacinth_var_noDUPS), replace = TRUE) # nrow(hyacinth_var) return the same number of TRUE occurrences
length(id.back)
background <- hyacinth_bios2[id.back, ]
dim(background)
names(background)
View(background)
dim(na.omit(background))
ext <- extent(hyacinth_bios2)
id.back <- randomPoints(clim.m, n = 2*nrow(hyacinth_var_noDUPS), ext = ext)
ext <- extent(hyacinth_bios2)
id.back <- randomPoints(hyacinth_bios2, n = 2*nrow(hyacinth_var_noDUPS), ext = ext)
# This is other way to stablish random points
#id.back <- sample(1:nrow(hyacinth_bios2), nrow(hyacinth_var_noDUPS), replace = TRUE) # nrow(hyacinth_var) return the same number of TRUE occurrences
#length(id.back)
View(id.back)
ext <- extent(hyacinth_bios2)
id.back <- data.frame(randomPoints(hyacinth_bios2, n = 2*nrow(hyacinth_var_noDUPS),
ext = ext))
# This is other way to stablish random points
#id.back <- sample(1:nrow(hyacinth_bios2), nrow(hyacinth_var_noDUPS), replace = TRUE) # nrow(hyacinth_var) return the same number of TRUE occurrences
#length(id.back)
View(id.back)
plot(hyacinth_bios2$bio.1)
points(id.back[, "x"], id.back[, "y"])
View(hyacinth_var_noDUPS)
background_var <- extract(hyacinth_bios2, id.back, cellnumbers = T)
dim(background_var)
names(background_var)
View(background_var)
background_var <- cbind(id.back, background_var)
background_var[1:5, ]
write.table(background_var[, c(1:2, 5:23)], "Data/Environment/background.txt", row.names = F, sep = "\t")
hyacinth_var_tmp <- data.frame(hyacinth_var_noDUPS)
names(hyacinth_var_tmp) <- c("x", "y", "cells", "id", names(hyacinth_var_tmp)[5:23])
hyacinth_var_tmp$id <- rep(1, nrow(hyacinth_var_noDUPS))
background_tmp <- data.frame(background_var)
background_tmp$id <- rep(0, , nrow(background_var))
View(background_tmp)
View(hyacinth_var_tmp)
var_tmp <- rbind(hyacinth_var_tmp, background_tmp) # Here 1 means presence and 0 absence
head(var_tmp)
# We first estimate a correlation matrix from the predictors. We use Spearman rank correlation coefficient, as we do not know whether all variables are normally distributed.
cor_mat <- cor(na.omit(var_tmp[, c(5:23)]), method = 'spearman')
# We can visualise this correlation matrix. For better visibility, we plot the correlation coefficients as percentages.
corrplot.mixed(cor_mat, tl.pos = "lt", tl.cex = 0.5, number.cex = 0.5,
addCoefasPercent = TRUE)
library(vegan)
require(raster)
library(sp)
library(psych)
library(rgeos)
library(maps)
library(maptools)
library(dismo)
library(rworldmap)
library(kernlab)
library(corrplot)
# We first estimate a correlation matrix from the predictors. We use Spearman rank correlation coefficient, as we do not know whether all variables are normally distributed.
cor_mat <- cor(na.omit(var_tmp[, c(5:23)]), method = 'spearman')
# We can visualise this correlation matrix. For better visibility, we plot the correlation coefficients as percentages.
corrplot.mixed(cor_mat, tl.pos = "lt", tl.cex = 0.5, number.cex = 0.5,
addCoefasPercent = TRUE)
source("R-Functions/selectVariables.R")
bios <- names(var_tmp)[5:23]
head(var_tmp)
tail(var_tmp)
head(var_tmp)
tail(var_tmp)
bios <- names(var_tmp)[5:23]
var_sel <- selectBelow07(pred_names = bios, response_name = "id",
data = na.omit(var_tmp), cor_mat = cor_mat, threshold = 0.7)
var_sel$AIC
var_sel$cor_mat
var_sel$pred_sel
pred_sel <- var_sel$pred_sel
pred_sel
head(hyacinth_var)
hyacinth_var_sel <- hyacinth_var_noDUPS[, c("x", "y", "bio.1", "bio.6", "bio.8",
"bio.17", "bio.18", "bio.3", "bio.16")]
View(hyacinth_var_noDUPS)
head(hyacinth_var_noDUPS)
hyacinth_var_sel <- hyacinth_var_noDUPS[, c("lon", "lat", "bio.1", "bio.6", "bio.8",
"bio.17", "bio.18", "bio.3", "bio.16")]
head(hyacinth_var_sel)
background_sel <- background_var[, c("x", "y", "bio.1", "bio.6", "bio.8",
"bio.17", "bio.18", "bio.3", "bio.16")]
head(background_sel)
id.ocur <- sample(1:nrow(hyacinth_var), round(0.75*nrow(hyacinth_var_sel)))
length(id.ocur)
id.back <- sample(1:nrow(background), round(0.75*nrow(background_sel)))
length(id.back)
background_sel <- background_var[, c("x", "y", "bio.1", "bio.6", "bio.8",
"bio.17", "bio.18", "bio.3", "bio.16")]
head(background_sel)
hyacinth_bios_sel <- stack(hyacinth_bios2$bio.1, hyacinth_bios2$bio.6,
hyacinth_bios2$bio.8, hyacinth_bios2$bio.17,
hyacinth_bios2$bio.18, hyacinth_bios2$bio.3,
hyacinth_bios2$bio.16)
plot(hyacinth_bios_sel)
training <- prepareData(x = hyacinth_bios_sel,
p = hyacinth_var_sel[id.ocur, 1:2],
b = background_sel[id.back, 1:2], xy = T)
test <- prepareData(x = hyacinth_bios_sel,
p = hyacinth_var_sel[-id.ocur, 1:2],
b = background_sel[-id.back,1:2], xy = T)
View(test)
training <- prepareData(x = hyacinth_bios_sel,
p = hyacinth_var_sel[id.ocur, 1:2],
b = background_sel[id.back, 1:2], xy = T)
head(training)
test <- prepareData(x = hyacinth_bios_sel,
p = hyacinth_var_sel[-id.ocur, 1:2],
b = background_sel[-id.back,1:2], xy = T)
head(test)
View(training)
rm(training)
id.ocur <- sample(1:nrow(hyacinth_var), round(0.75*nrow(hyacinth_var_sel)))
length(id.ocur)
id.back <- sample(1:nrow(background), round(0.75*nrow(background_sel)))
length(id.back)
id.ocur <- sample(1:nrow(hyacinth_var_noDUPS), round(0.75*nrow(hyacinth_var_sel)))
length(id.ocur)
id.back <- sample(1:nrow(background), round(0.75*nrow(background_sel)))
length(id.back)
training <- prepareData(x = hyacinth_bios_sel,
p = hyacinth_var_sel[id.ocur, 1:2],
b = background_sel[id.back, 1:2], xy = T)
head(training)
test <- prepareData(x = hyacinth_bios_sel,
p = hyacinth_var_sel[-id.ocur, 1:2],
b = background_sel[-id.back,1:2], xy = T)
head(test)
Bioclim.model <- bioclim(x = training[training[, "pb"] == 1, -c(1:3)])
Bioclim.model
plot(Bioclim.model)
response(Bioclim.model)
Gower.model <- domain(x = training[training[, "pb"] == 1, -c(1:3)])
Gower.model
response(Gower.model)
svm.model <- ksvm(pb ~ bio.16 + bio.5 + bio.2 + bio.14 + bio.7, data = training)
head(training)
head(training)
svm.model <- ksvm(pb ~ bio.1 + bio.6 + bio.8 + bio.17 + bio.18 + bio.3,
bio.16, data = training)
head(training)
svm.model <- ksvm(pb ~ bio.1 + bio.6 + bio.8 + bio.17 + bio.18 + bio.3 + bio.16,
data = training)
glm.model <- glm(pb ~ bio.1 + bio.6 + bio.8 + bio.17 + bio.18 + bio.3 + bio.16,
data = training, family = binomial(link = "logit"))
Bioclim0k <- predict(object = Bioclim.model, x = climSA0k_sel)
Bioclim0k <- predict(object = Bioclim.model, x = hyacinth_bios_sel)
plot(Bioclim0k)
plot(Bioclim0k)
points(training[training[, "pb"] == 1, "x"], training[training[, "pb"] == 1, "y"])
Gower0k <- predict(hyacinth_bios_sel, Gower.model)
plot(Gower0k)
svm0k <- predict(hyacinth_bios_sel, svm.model)
plot(svm0k)
GLM0k <- predict(hyacinth_bios_sel, glm.model)
plot(GLM0k)
source("https://raw.githubusercontent.com/jesusNPL/DetectionTT/master/normalize.R")
GLM0k <- normalize(ras = GLM0k)
plot(GLM0k)
par(mfrow = c(2, 2))
plot(Bioclim0k, main = "bioclim")
plot(Gower0k, main = "Gower")
plot(svm0k, main = "svm")
plot(GLM0k, main = "glm")
Bioclim.eval <- evaluate(p = test[test[, "pb"] == 1, 1:2],
a = test[test[, "pb"] == 0, 1:2],
model = Bioclim.model,
x = hyacinth_bios_sel)
Bioclim.eval
str(Bioclim.eval)
Gower.eval <- evaluate(p = test[test[, "pb"] == 1, 1:2],
a = test[test[, "pb"] == 0, 1:2],
model = Gower.model,
x = hyacinth_bios_sel)
svm.eval <- evaluate(p = test[test[, "pb"] == 1, 1:2],
a = test[test[, "pb"] == 0, 1:2],
model = svm.model,
x = hyacinth_bios_sel)
glm.eval <- evaluate(p = test[test[, "pb"] == 1, 1:2],
a = test[test[, "pb"] == 0, 1:2],
model = glm.model,
x = hyacinth_bios_sel)
# validate results
par(mfrow = c(2, 2))
plot(Bioclim.eval, "ROC")
plot(Gower.eval, "ROC")
plot(svm.eval, "ROC")
plot(glm.eval, "ROC")
Bioclim.thr <- threshold(Bioclim.eval)
Bioclim.thr
bio <- Bioclim.thr$spec_sens
bio <- Bioclim.thr$spec_sens
Gower.thr <- threshold(Gower.eval)
gow <- Gower.thr$spec_sens
svm.thr <- threshold(svm.eval)
s <- svm.thr$spec_sens
glm.thr <- threshold(glm.eval)
g <- glm.thr$spec_sens
par(mfrow = c(2, 2))
plot(Bioclim0k > bio, main = "Bioclim")
plot(GLM0k > g, main = "GLM")
plot(Gower0k > gow, main = "Gower")
plot(svm0k > s, main = "SVM")
# Combine all thresholds
thrs <- (bio + gow + s + g)
tmp <- stack(Bioclim0k, Gower0k, GLM0k, svm0k)
map.sum <- sum(tmp) # sum
par(mfrow = c(2, 2))
plot(map.sum)
plot(map.sum > thrs)
plot(map.sum > 2)
plot(map.sum > 3)
map.mean <- mean(tmp) # mean
map.sd <- calc(tmp, sd) # sd
plot(map.mean)
par(mfrow = c(2, 2))
plot(map.mean)
plot(map.mean > thrs)
plot(map.mean > 0.2)
plot(map.mean > 0.3)
par(mfrow = c(1, 2))
plot(map.sum)
plot(map.sum > 2)
par(mfrow = c(2, 2))
plot(map.mean)
plot(map.sd)
plot(map.mean > 0.2)
plot(map.mean > 0.3)
par(mfrow = c(2, 2))
plot(map.mean)
plot(map.sd)
plot(map.mean > 0.1)
plot(map.mean > 0.3)
par(mfrow = c(1, 2))
plot(map.mean)
plot(map.sd)
auc <- sapply(list(Bioclim.eval, Gower.eval, svm.eval, glm.eval), function(x) x@auc)
w <- (auc-0.5)^2
map.mean.weight <- weighted.mean(tmp[[c("layer.1", "layer.2", "layer.3", "layer.4")]], w)
plot(map.mean.weight)
tmp <- stack(Bioclim0k, Gower0k, GLM0k, svm0k)
names(tmp) <- c("Bioclim", "Gower", "GLM", "SVM")
map.mean.weight <- weighted.mean(tmp, w)
plot(map.mean.weight)
rm(map.mean.weight)
map.mean.weight <- weighted.mean(tmp, w)
plot(map.mean.weight)
par(mfrow = c(2, 2))
plot(map.sum, main = "Sum of all models")
plot(map.mean, main = "Mean of all models")
plot(map.mean.weight, main = "Weighted mean of all models")
plot(map.sd, main = "Standard deviation of all models")
