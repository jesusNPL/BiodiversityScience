data = thinning,
proj4string = CRS("+proj=longlat +datum=WGS84 +ellps=WGS84 +towgs84=0,0,0"))
plot(quealb_spt, col = "red", pch = 15)
plot(thinned_spt, col = "darkgreen", pch = 16, add = TRUE)
plot(countriesCoarse, add = TRUE, lwd = 2)
save(occ_quealb, quealb_spt, thinning, thinned_spt,
file = "Data/OCC/quealb_OCC_processed.RData")
rm(gbif_data, occ_quealb, quealb_spt, thinning)
#write.csv(hyacinth_coords, "Data/OCC/hyacinth_data.csv")
dir.create("Data/Envi")
bios <- getData("worldclim", var = "bio", res = 10,
download = TRUE, path = "Data/Envi")
bios <- getData("worldclim", var = "bio", res = 10,
download = TRUE, path = "Data/Envi")
dir.create("Data/Envi")
bios <- raster::getData("worldclim", var = "bio", res = 10,
download = TRUE, path = "Data/Envi")
names(bios)
str(bios[[1]])
plot(stack(bios$bio1, bios$bio12))
NAs <- subset(countriesCoarse, continent == "North America") # used as extent
bios_NA <- crop(bios, NAs)
plot(bios_NA[[1]]) # mean annual temperature
plot(thinned_spt, col = "red", pch = 16, add = TRUE) # add occurrence records
plot(countriesCoarse, lwd = 2, lty = 2, add = TRUE) # add country borders
### Species specific accessible area
bb <- bbox(thinned_spt) # bounding box
e <- extent(c(bb[1]-3, bb[3]+3, bb[2]-3, bb[4]+3)) # bounding box + 300 km
p <- as(e, 'SpatialPolygons') # transform to polygon
crs(p) <- crs(bios_NA) # use the geographical reference of the bioclimatic variables
crs(NAs) <- crs(bios_NA)
out <- gIntersection(NAs, p, byid = FALSE) # use NAs to eliminate areas on the sea
plot(bios_NA[[1]])
plot(p, add = TRUE, lty = 2)
plot(out, add = TRUE, lwd = 2)
#enviSPP <- raster::crop(envi, out)
bios_spp <- raster::crop(bios_NA, out)
bios_spp <- raster::mask(bios_spp, out)
plot(bios_spp[[1]])
plot(thinned_spt, add = TRUE, col = "red", pch = 16)
plot(NAs, add = TRUE, lty = 2)
set.seed(12345) # Random Number Generation to obtain the same result
# Generate the data
absence <- randomPoints(mask = bios_spp[[1]],
n = round(nrow(thinned_spt)*2, 0), # number of pseudoabsences
p = thinned_spt, ext = extent(bios_spp))
presence <- data.frame(coordinates(thinned_spt)) # presence data
absence <- data.frame(absence) # pseudoabsence data
names(absence) <- names(presence)
presence$Occurrence <- 1 # presence data
absence$Occurrence <- 0 # pseudoabsence data
quealb <- rbind(presence, absence) # combine both information
quealb$Species <- "Quercus_alba"
View(quealb)
coordinates(quealb) <- ~ Longitude + Latitude
crs(quealb) <- crs(bios_spp)
quealb
plot(bios_spp[[1]])
plot(quealb[quealb$Occurrence == 1, ], col = "blue", add = TRUE, pch = 16)
points(quealb[quealb$Occurrence == 0, ], col = "red", pch = 16)
save(presence, absence, quealb, file = "Data/OCC/quealb_PresAbs.RData")
save(bb, e, NAs, out, p, file = "Data/Envi/accessible_area_quealb.RData")
rm(absence, presence, bios, e, out, p, bb)
quealb_bios <- data.frame(raster::extract(bios_spp, quealb))
quealb_bios <- cbind(data.frame(quealb), quealb_bios)
quealb_bios <- quealb_bios[complete.cases(quealb_bios), ]
quealb_bios <- na.omit(quealb_bios)
head(quealb_bios)
# We first estimate a correlation matrix from the predictors. We use Spearman rank correlation coefficient, as we do not know whether all variables are normally distributed.
cor_mat <- cor(quealb_bios[, c(6:24)], method = 'spearman')
corrplot.mixed(cor_mat, tl.pos = "lt", tl.cex = 0.5, number.cex = 0.5,
addCoefasPercent = TRUE, mar = c(0, 0, 1, 0))
library(mecofun)
# Run select07()
covar_sel <- select07(X = quealb_bios[, -c(1:5)], # only predictors data
y = quealb_bios$Occurrence, # presence-absence data
threshold = 0.7) # here you can change the threshold for one
# Check out the structure of the resulting object:
str(covar_sel)
covar_sel$AIC
covar_sel$cor_mat
covar_sel$pred_sel
preds <- covar_sel$pred_sel
preds
bios_quealb_sel <- stack(bios_spp$bio2, bios_spp$bio7, bios_spp$bio8,
bios_spp$bio10, bios_spp$bio12, bios_spp$bio15)
plot(bios_quealb_sel)
quealbDATA <- sdmData(formula = Occurrence ~ bio2 + bio7 + bio8 + bio10 + bio12 + bio15,
train = quealb, # presence-pseudoabsence data
predictors = bios_quealb_sel, # selected covariables
crs = crs(bios_quealb_sel))
quealbDATA
?sdm
getmethodNames('sdm')
quealbSDM <- sdm(Occurrence~., data = quealbDATA,
methods = c("bioclim", "domain.dismo",
"glm", "gam",
"rf", "svm"),
replication = "sub", test.percent = 30),
quealbDATA
quealbSDM <- sdm(Occurrence~., data = quealbDATA,
methods = c("bioclim", "domain.dismo", "glm", "gam", "rf", "svm"),
test.percent = 30),
quealbSDM <- sdm(Occurrence~., data = quealbDATA,
methods = c("bioclim", "domain.dismo", "glm", "gam", "rf", "svm"),
replication = "sub", test.percent = 30, n = 2,
parallelSettings = list(ncore = 48, method = "parallel"))
quealbSDM <- sdm(Occurrence~., data = quealbDATA,
methods = c("bioclim", "domain.dismo", "glm", "gam", "rf", "svm"),
replication = "sub", test.percent = 30, n = 2,
parallelSettings = list(ncore = 2, method = "parallel"))
quealbSDM
roc(quealbSDM)
roc(quealbSDM, smooth = TRUE)
quealb_ENM_bioclim <- predict(quealbSDM, newdata = bios_quealb_sel,
method = "bioclim", mean = TRUE)
quealb_ENM_bioclim
plot(quealb_ENM_bioclim)
plot(quealb_ENM_bioclim$sp_1.m_bioclim.re_subs)
plot(quealb_ENM_bioclim)
plot(quealb_ENM_bioclim$sp_1.m_bioclim.re_subs)
quealb_ENM_bioclim <- sdmvspecies::rescale(oakglm$sp_1.m_glm.re_subs)
quealb_ENM_bioclim <- sdmvspecies::rescale(quealb_ENM_bioclim$sp_1.m_glm.re_subs)
quealb_ENM_bioclim <- sdmvspecies::rescale(quealb_ENM_bioclim)
sdmvspecies::rescale(quealb_ENM_bioclim$sp_1.m_bioclim.re_subs)
quealb_ENM_bioclim <- sdmvspecies::rescale(quealb_ENM_bioclim$sp_1.m_bioclim.re_subs)
plot(quealb_ENM_bioclim)
quealb_ENM_bioclim
quealb_ENM_domain <- predict(quealbSDM, newdata = bios_quealb_sel,
method = "domain.dismo", mean = TRUE)
quealb_ENM_glm <- predict(quealbSDM, newdata = bios_quealb_sel,
method = "glm", mean = TRUE)
quealb_ENM_gam <- predict(quealbSDM, newdata = bios_quealb_sel,
method = "gam", mean = TRUE)
quealb_ENM_rf <- predict(quealbSDM, newdata = bios_quealb_sel,
method = "rf", mean = TRUE)
quealb_ENM_svm <- predict(quealbSDM, newdata = bios_quealb_sel,
method = "svm", mean = TRUE)
quealb_ENM_domain <- sdmvspecies::rescale(quealb_ENM_domain$sp_1.m_domain.dismo.re_subs)
quealb_ENM_glm <- sdmvspecies::rescale(quealb_ENM_glm$sp_1.m_glm.re_subs)
quealb_ENM_gam <- sdmvspecies::rescale(quealb_ENM_gam$sp_1.m_gam.re_subs)
quealb_ENM_rf <- sdmvspecies::rescale(quealb_ENM_rf$sp_1.m_rf.re_subs)
quealb_ENM_svm <- sdmvspecies::rescale(quealb_ENM_svm$sp_1.m_svm.re_subs)
plot(raster::stack(quealb_ENM_bioclim, quealb_ENM_domain,
quealb_ENM_glm, quealb_ENM_gam,
quealb_ENM_svm, quealb_ENM_rf))
plot(raster::stack(quealb_ENM_bioclim, quealb_ENM_domain,
quealb_ENM_glm, quealb_ENM_gam,
quealb_ENM_svm, quealb_ENM_rf),
names = c("Bioclim", "Domain", "GLM", "GAM", "SVM", "RF"))
quealb_ENM_all <- raster::stack(quealb_ENM_bioclim, quealb_ENM_domain,
quealb_ENM_glm, quealb_ENM_gam,
quealb_ENM_svm, quealb_ENM_rf)
names(quealb_ENM_all)
names(quealb_ENM_all) <- c("Bioclim", "Domain", "GLM", "GAM", "SVM", "RF"))
names(quealb_ENM_all) <- c("Bioclim", "Domain", "GLM", "GAM", "SVM", "RF")
names(quealb_ENM_all)
plot(quealb_ENM_all)
quealb_ENM_ensemble <- ensemble(quealbSDM, newdata = bios_quealb_sel,
method = c("rf", "gam", "svm"),
parallelSettings = list(ncore = 2, method = "parallel"))
?ensemble
quealb_ENM_ensemble <- ensemble(quealbSDM, newdata = bios_quealb_sel,
method = c("rf", "gam", "svm"),
setting = list(method = "weighted", stat = "TSS"),
parallelSettings = list(ncore = 2, method = "parallel"))
quealb_ENM_ensemble
quealb_ENM_ensemble <- sdmvspecies::rescale(quealb_ENM_ensemble)
plot(quealb_ENM_ensemble)
dir.create("Results")
dir.create("Results/ENMs")
?writeRaster
dir.create("Results")
dir.create("Results/ENMs")
writeRaster(quealb_ENM_all, filename = "Results/ENMs/que_alb_",
suffix = names(quealb_ENM_all), format = "GTiff",
bylayer = TRUE, overwrite = TRUE)
dir.create("Results")
dir.create("Results/ENMs")
writeRaster(quealb_ENM_all, filename = "Results/ENMs/que_alb",
suffix = names(quealb_ENM_all), format = "GTiff",
bylayer = TRUE, overwrite = TRUE)
dir.create("Results")
dir.create("Results/ENMs")
writeRaster(quealb_ENM_all, filename = "Results/ENMs/quealb",
suffix = names(quealb_ENM_all), format = "GTiff",
bylayer = TRUE, overwrite = TRUE)
writeRaster(quealb_ENM_all, filename = "Results/ENMs/quealb_Ensemble", format = "GTiff",
bylayer = TRUE, overwrite = TRUE)
dir.create("Results")
dir.create("Results/ENMs")
writeRaster(quealb_ENM_all, filename = "Results/ENMs/quealb",
suffix = names(quealb_ENM_all), format = "GTiff",
bylayer = TRUE, overwrite = TRUE)
writeRaster(quealb_ENM_ensemble, filename = "Results/ENMs/quealb_Ensemble",
format = "GTiff", bylayer = TRUE, overwrite = TRUE)
getEvaluation(quealbSDM)
df <- data.frame(quealbDATA)
df <- data.frame(quealb)
df
df <- data.frame(as.data.frame(quealbDATA), coordinates(quealbDATA))
df
head(df)
pr <- raster::extract(quealb_ENM_ensemble, df[, c("Longitude", "Latitude")])
pr
ev <- evaluates(df$Occurrence, pr)
ev
ev@threshold_based$threshold
?evaluates
threshold_sel
dt <- data.frame(as.data.frame(quealbDATA), coordinates(quealbDATA))
head(dt)
prediction <- raster::extract(quealb_ENM_ensemble, dt[, c("Longitude", "Latitude")])
evaluation <- evaluates(df$Occurrence, prediction) # observed versus expected
threshold_sel <- evaluation@threshold_based$threshold[2]
threshold_sel
round(threshold_sel, 2)
quealb_SDM_ensemble <- quealb_ENM_ensemble
quealb_SDM_ensemble[] <- ifelse(quealb_SDM_ensemble[] >= threshold_sel, 1, 0)
plot(quealb_SDM_ensemble)
dir.create("Results/SDMs")
writeRaster(quealb_SDM_ensemble, filename = "Results/SDMs/quealb_Ensemble",
format = "GTiff", bylayer = TRUE, overwrite = TRUE)
dir.create("Results/SDMs")
writeRaster(quealb_SDM_ensemble, filename = "Results/SDMs/quealb_ensemble_SDM",
format = "GTiff", bylayer = TRUE, overwrite = TRUE)
dir.create("Results")
dir.create("Results/ENMs")
writeRaster(quealb_ENM_all, filename = "Results/ENMs/quealb_ENM",
suffix = names(quealb_ENM_all), format = "GTiff",
bylayer = TRUE, overwrite = TRUE)
writeRaster(quealb_ENM_ensemble, filename = "Results/ENMs/quealb_ENM_Ensemble",
format = "GTiff", bylayer = TRUE, overwrite = TRUE)
dir.create("Results/SDMs")
writeRaster(quealb_SDM_ensemble, filename = "Results/SDMs/quealb_SDM_Ensemble",
format = "GTiff", bylayer = TRUE, overwrite = TRUE)
plot(quealb_SDM_ensemble)
plot(countriesCoarse, add = TRUE)
lapply(packages, library, character.only = TRUE)
packages <- c("picante", "dplyr", "tidyr", "picante", "lubridate",
"Taxonstand", "ape", "neonUtilities", "phytools", "vegan", "car")
# Install packages not yet installed
installed_packages <- packages %in% rownames(installed.packages())
if (any(installed_packages == FALSE)) {
install.packages(packages[!installed_packages], dependencies = TRUE)
}
if ( ! ("V.PhyloMaker" %in% installed.packages())) {remotes::install_github("jinyizju/V.PhyloMaker")}
lapply(packages, library, character.only = TRUE)
require(V.PhyloMaker)
# Set global option to NOT convert all character variables to factors
options(stringsAsFactors = F)
NEON_data <- loadByProduct(dpID = "DP1.10058.001",
site = c("HARV", "CPER", "ABBY"),
package = "expanded", check.size = TRUE)
# type "y" (with no quotes) in your console to start downloading the data from NEON
sel <- NEON_data$div_1m2Data %>%
select(namedLocation, domainID, siteID, plotType, plotID, subplotID, endDate,
taxonID, taxonRank, family, scientificName, nativeStatusCode,
percentCover, heightPlantSpecies)
unique(sel$namedLocation)
unique(sel$siteID)
unique(sel$endDate)
sel <- sel %>%
drop_na(scientificName) %>% # Removing NAs in the column of species
mutate(Date = endDate) %>%
separate(endDate, sep = "-", into = c("Year", "Month", "Day"))
unique(sel$Year)
unique(sel$siteID)
HARV <- sel %>%
filter(siteID == "HARV" & Year == 2018)
unique(HARV$Year)
unique(HARV$siteID)
head(HARV)
spp <- unique(HARV$scientificName) # vector with scientific names
# Perform taxonomic standardization on plant names (TPL table)
spp_check <- TPL(spp, infra = TRUE, corr = TRUE)
head(spp_check)
taxonomy <- spp_check %>%
drop_na(New.Genus, New.Species) %>%
select(Taxon, Family, New.Genus, New.Species, Tax_res)
HARV_data <- full_join(HARV, taxonomy, by = c("scientificName" = "Taxon"))
HARV_data <- HARV_data %>%
mutate(sciName = paste0(HARV_data$New.Genus, "_", HARV_data$New.Species)) %>%
select(siteID, plotID, subplotID, Tax_res, Family, sciName, percentCover) %>%
filter(Tax_res == "Species")
head(HARV_data)
HARV_mat <- sample2matrix(HARV_data[, c(2, 7, 6)])
nrow(HARV_mat)
ncol(HARV_mat)
sppPhylo <- HARV_data[, c(5, 6)]
# Prepare the taxonomy data to extract the phylogeny
sppPhylo <- sppPhylo %>%
mutate(family = Family) %>%
mutate(species = gsub("_" , " ", sciName)) %>%
separate(sciName, sep = "_", into = c("genus", "ephitet")) %>%
select(species, genus, family)
sppPhylo <- unique(sppPhylo[ c("species", "genus", "family")])
head(sppPhylo)
unique(sppPhylo[ c("species", "genus", "family")])
sppPhylo[ c("species", "genus", "family")]
sppPhylo[, c("species", "genus", "family")]
rm(sppPhylo)
sppPhylo <- HARV_data[, c(5, 6)]
# Prepare the taxonomy data to extract the phylogeny
sppPhylo <- sppPhylo %>%
mutate(family = Family) %>%
mutate(species = gsub("_" , " ", sciName)) %>%
separate(sciName, sep = "_", into = c("genus", "ephitet")) %>%
select(species, genus, family)
sppPhylo <- unique(sppPhylo[, c("species", "genus", "family")])
head(sppPhylo)
sppPhylo <- HARV_data[, c(5, 6)]
head(sppPhylo)
packages <- c("ape", "geiger", "nlme", "phytools", "rr2")
# Package vector names
# Install packages not yet installed
installed_packages <- packages %in% rownames(installed.packages())
if (any(installed_packages == FALSE)) {
install.packages(packages[!installed_packages],dependencies=T)
}
library(ape)
library(geiger)
library(nlme)
library(phytools)
library(rr2)
anoleData <- read.csv("Data/anolisDataAppended.csv", row.names = 1)
anoleTree <- read.tree("Data/anolis.phy")
plot(anoleTree)
plot.phylo(anoleTree, no.margin = T, cex = 0.5)
plot.phylo(anoleTree, type = "fan", no.margin = TRUE, cex = 0.7)
head(anoleData) # this will show you the first few rows of your data matrix and its header
dimnames(anoleData) # this will show you the row and column headers for your matrix
View(anoleData) # this will let you visualize the entire matrix
awe <- anoleData[, "awesomeness"]
names(awe) <- rownames(anoleData)
# data vectors have to be labelled with tip names for the associated tree.
# This is how to do that.
anoleTree
brownianModel <- fitContinuous(anoleTree, awe)
brownianModel # this will show you the fit statistics and parameter values
contMap(anoleTree, awe, fsize = 0.5, lwd = 3)
lm_awehost <- lm(awe ~ host)
host <- anoleData[, "hostility"]
names(host) <- rownames(anoleData)
lm_awehost <- lm(awe ~ host)
summary(lm_awehost)
island <- anoleData$island
names(island) <- rownames(anoleData)
packages <- c("picante", "dplyr", "tidyr", "picante", "lubridate",
"Taxonstand", "ape", "neonUtilities", "phytools", "vegan", "car")
# Install packages not yet installed
installed_packages <- packages %in% rownames(installed.packages())
if (any(installed_packages == FALSE)) {
install.packages(packages[!installed_packages], dependencies = TRUE)
}
if ( ! ("V.PhyloMaker" %in% installed.packages())) {remotes::install_github("jinyizju/V.PhyloMaker")}
sapply(packages, require, character.only = TRUE)
require(V.PhyloMaker)
# Set global option to NOT convert all character variables to factors
options(stringsAsFactors = F)
NEON_data <- loadByProduct(dpID = "DP1.10058.001",
site = c("HARV", "CPER", "ABBY"),
package = "expanded", check.size = TRUE)
# type "y" (with no quotes) in your console to start downloading the data from NEON
View(NEON_data$div_10m2Data100m2Data)
packages <- c("vegan", "raster", "sp", "rgeos", "rworldmap",
"corrplot", "dismo", "rgdal", "maptools", "kernlab",
"rgbif", "scrubr", "tidyr", "dplyr", "spThin",
"corrplot", "sdmvspecies", "mmap")
# Install packages not yet installed
installed_packages <- packages %in% rownames(installed.packages())
if (any(installed_packages == FALSE)) {
install.packages(packages[!installed_packages], dependencies = TRUE)
}
sapply(packages, require, character.only = TRUE)
library(sdm)
load("Data/OCC/oaks_raw_occ.RDATA")
#gbif_data
# if, for any species, "Records found" is larger than "Records returned", you need to increase the 'limit' argument above -- see help(occ_data) for options and limitations
# check how the data are organized:
names(gbif_data)
names(gbif_data[[3]]$meta)
names(gbif_data[[3]]$data)
# get the columns that matter for mapping and cleaning the occurrence data:
occ_quealb <- gbif_data[[3]]$data[, c("decimalLongitude", "decimalLatitude",
"scientificName", "occurrenceStatus",
"coordinateUncertaintyInMeters",
"institutionCode", "references")]
head(occ_quealb)
occ_quealb <- subset(occ_quealb, !is.na(decimalLongitude) & !is.na(decimalLatitude))
occ_quealb <- coord_incomplete(coord_imprecise(coord_impossible(coord_unlikely(occ_quealb))))
dim(occ_quealb)
## 1999    7
# show some values
#occ_quealb[1:4, c(1:5, 7:10)]
quealb_spt <- SpatialPointsDataFrame(coords = occ_quealb[, 1:2],
data = data.frame(occ_quealb),
proj4string = CRS("+proj=longlat +datum=WGS84 +ellps=WGS84 +towgs84=0,0,0"))
plot(quealb_spt, col = "darkgreen", pch = 16)
plot(countriesCoarse, add = TRUE, lwd = 2)
thinning <- thin(
loc.data =  occ_quealb,
verbose = FALSE,
long.col = "decimalLongitude",
lat.col = "decimalLatitude",
spec.col = "scientificName",
thin.par = 5, # points have at least a minimum distance of 5 km from each other
reps = 1,
locs.thinned.list.return = TRUE,
write.files = FALSE,
out.dir = "Data/OCC/")
thinning <- as.data.frame(thinning)
thinning$Species <- "Quercus_alba"
thinned_spt <- SpatialPointsDataFrame(coords = thinning[, 1:2],
data = thinning,
proj4string = CRS("+proj=longlat +datum=WGS84 +ellps=WGS84 +towgs84=0,0,0"))
plot(quealb_spt, col = "red", pch = 15)
plot(thinned_spt, col = "darkgreen", pch = 16, add = TRUE)
plot(countriesCoarse, add = TRUE, lwd = 2)
thinned_spt <- SpatialPointsDataFrame(coords = thinning[, 1:2],
data = thinning,
proj4string = CRS("+proj=longlat +datum=WGS84 +ellps=WGS84 +towgs84=0,0,0"))
save(occ_quealb, quealb_spt, thinning, thinned_spt,
file = "Data/OCC/quealb_OCC_processed.RData")
rm(gbif_data, occ_quealb, quealb_spt, thinning)
dir.create("Data/Envi")
bios <- raster::getData("worldclim", var = "bio", res = 10,
download = TRUE, path = "Data/Envi")
names(bios)
str(bios[[1]])
plot(stack(bios$bio1, bios$bio12))
NAs <- subset(countriesCoarse, continent == "North America") # used as extent
bios_NA <- crop(bios, NAs)
plot(bios_NA[[1]]) # mean annual temperature
plot(thinned_spt, col = "red", pch = 16, add = TRUE) # add occurrence records
plot(countriesCoarse, lwd = 2, lty = 2, add = TRUE) # add country borders
### Species specific accessible area
bb <- bbox(thinned_spt) # bounding box
e <- extent(c(bb[1]-3, bb[3]+3, bb[2]-3, bb[4]+3)) # bounding box + 300 km
p <- as(e, 'SpatialPolygons') # transform to polygon
crs(p) <- crs(bios_NA) # use the geographical reference of the bioclimatic variables
crs(NAs) <- crs(bios_NA)
out <- gIntersection(NAs, p, byid = FALSE) # use NAs to eliminate areas on the sea
plot(bios_NA[[1]])
plot(p, add = TRUE, lty = 2)
plot(out, add = TRUE, lwd = 2)
#enviSPP <- raster::crop(envi, out)
bios_spp <- raster::crop(bios_NA, out)
bios_spp <- raster::mask(bios_spp, out)
plot(bios_spp[[1]])
plot(thinned_spt, add = TRUE, col = "red", pch = 16)
plot(NAs, add = TRUE, lty = 2)
set.seed(12345) # Random Number Generation to obtain the same result
# Generate the data
absence <- randomPoints(mask = bios_spp[[1]],
n = round(nrow(thinned_spt)*2, 0), # number of pseudoabsences
p = thinned_spt, ext = extent(bios_spp))
presence <- data.frame(coordinates(thinned_spt)) # presence data
absence <- data.frame(absence) # pseudoabsence data
names(absence) <- names(presence)
presence$Occurrence <- 1 # presence data
absence$Occurrence <- 0 # pseudoabsence data
quealb <- rbind(presence, absence) # combine both information
quealb$Species <- "Quercus_alba"
coordinates(quealb) <- ~ Longitude + Latitude
crs(quealb) <- crs(bios_spp)
quealb
plot(bios_spp[[1]])
plot(quealb[quealb$Occurrence == 1, ], col = "blue", add = TRUE, pch = 16)
points(quealb[quealb$Occurrence == 0, ], col = "red", pch = 16)
save(presence, absence, quealb, file = "Data/OCC/quealb_PresAbs.RData")
save(bb, e, NAs, out, p, file = "Data/Envi/accessible_area_quealb.RData")
rm(absence, presence, bios, e, out, p, bb)
quealb_bios <- data.frame(raster::extract(bios_spp, quealb))
quealb_bios <- cbind(data.frame(quealb), quealb_bios)
quealb_bios <- quealb_bios[complete.cases(quealb_bios), ]
quealb_bios <- na.omit(quealb_bios)
head(quealb_bios)
# We first estimate a correlation matrix from the predictors. We use Spearman rank correlation coefficient, as we do not know whether all variables are normally distributed.
cor_mat <- cor(quealb_bios[, c(6:24)], method = 'spearman')
corrplot.mixed(cor_mat, tl.pos = "lt", tl.cex = 0.5, number.cex = 0.5,
addCoefasPercent = TRUE, mar = c(0, 0, 1, 0))
library(mecofun)
# Run select07()
covar_sel <- select07(X = quealb_bios[, -c(1:5)], # only predictors data
y = quealb_bios$Occurrence, # presence-absence data
threshold = 0.7) # here you can change the threshold for one
# Check out the structure of the resulting object:
str(covar_sel)
covar_sel$AIC
covar_sel$cor_mat
covar_sel$pred_sel
preds <- covar_sel$pred_sel
preds
source("R-Functions/select07_mod.R")
preds <- covar_sel$pred_sel
preds
source("R-Functions/select07_mod.R")
# Run select07()
covar_sel <- select07_v2(X = quealb_bios[, -c(1:5)], # only predictors data
y = quealb_bios$Occurrence, # presence-absence data
threshold = 0.7) # here you can change the threshold for one
preds <- covar_sel$pred_sel
preds
#source("R-Functions/select07_mod.R")
source("https://raw.githubusercontent.com/jesusNPL/BiodiversityScience/master/Spring2021/R-Functions/select07_mod.R")
# Run select07()
covar_sel <- select07_v2(X = quealb_bios[, -c(1:5)], # only predictors data
y = quealb_bios$Occurrence, # presence-absence data
threshold = 0.7) # here you can change the threshold for one
preds <- covar_sel$pred_sel
preds
