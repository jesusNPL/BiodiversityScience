Data$Provis
Data$Cases
Data$Cases
cases <- Data$Cases
View(cases)
Data$Centers
Data$CovidDeaths
deaths <- Data$CovidDeaths
View(deaths)
Data$Age.Pop
nfections.by.state(states=NULL,
cumulative=FALSE,
stacked=TRUE,
data=Data,
delay=20,
ifr=0.005,
window=7,
smooth=TRUE,
span=c(0.2,0.3),
show.ifr=TRUE,
bg="transparent",
xlim=c(60,366+46),
show.as.percent=FALSE)
infections.by.state(states=NULL,
cumulative=FALSE,
stacked=TRUE,
data=Data,
delay=20,
ifr=0.005,
window=7,
smooth=TRUE,
span=c(0.2,0.3),
show.ifr=TRUE,
bg="transparent",
xlim=c(60,366+46),
show.as.percent=FALSE)
infections.by.state(states="MN",
cumulative=FALSE,
stacked=TRUE,
data=Data,
delay=20,
ifr=0.005,
window=7,
smooth=TRUE,
span=c(0.2,0.3),
show.ifr=TRUE,
bg="transparent",
xlim=c(60,366+46),
show.as.percent=FALSE)
infections.by.state(states="Minnesota",
cumulative=FALSE,
stacked=TRUE,
data=Data,
delay=20,
ifr=0.005,
window=7,
smooth=TRUE,
span=c(0.2,0.3),
show.ifr=TRUE,
bg="transparent",
xlim=c(60,366+46),
show.as.percent=FALSE)
View(cases)
infections.by.state(states= c("MN", "CA"),
cumulative=FALSE,
stacked=TRUE,
data=Data,
delay=20,
ifr=0.005,
window=7,
smooth=TRUE,
span=c(0.2,0.3),
show.ifr=TRUE,
bg="transparent",
xlim=c(60,366+46),
show.as.percent=FALSE)
View(cases)
names(cases)
cases_mn <- subset(cases, state = "MN")
View(cases_mn)
cases_mn <- subset(cases, state == "MN")
cases_mn
Days <- 1:nrow(cases_mn)
plot(Days, cases_mn$tot_cases, type = "b",
ylab = "Infected", xlab = "Days since the first case")
dev.off()
plot(Days, cases_mn$tot_cases, type = "b",
ylab = "Infected", xlab = "Days since the first case")
View(cases)
cases_mn <- subset(cases, state == "MA")
Days <- 1:nrow(cases_mn)
plot(Days, cases_mn$tot_cases, type = "b",
ylab = "Infected", xlab = "Days since the first case")
plot(cases_mn$submission_date, cases_mn$tot_cases, type = "b",
ylab = "Infected", xlab = "Days since the first case")
cases_mn$submission_date
View(deaths)
plot(deaths$MMWR.Week, deaths$Total.Deaths, type = "b",
ylab = "Infected", xlab = "Days since the first case")
View(deaths)
hist(deaths$Total.Deaths)
Data$Counts
counts <- Data$Counts
View(counts)
counts_MN <- subset(counts, counts$Jurisdiction.of.Occurrence == "Minnesota")
View(counts_MN)
Data$Provis
provis <- Data$Provis
View(provis)
provis_mn <- subset(provis, provis$Jurisdiction.of.Occurrence == "Minnesota")
View(provis_mn)
plot(provis_mn$MMWR.Week, provis_mn$COVID.19..U071..Multiple.Cause.of.Death., type = "l")
plot(provis_mn$MMWR.Week, provis_mn$COVID.19..U071..Underlying.Cause.of.Death., type = "l")
plot(Days, cases_mn$tot_death, type = "b",
ylab = "Infected", xlab = "Days since the first case")
infections.by.state
infections.by.state(states= c("Michigan", "Minnesota", "Mississippi", "Missouri"),
cumulative=FALSE,
stacked=TRUE,
data=Data,
delay=20,
ifr=0.005,
window=7,
smooth=TRUE,
span=c(0.2,0.3),
show.ifr=TRUE,
bg="transparent",
xlim=c(60,366+46),
show.as.percent=FALSE)
dev.off()
infections.by.state(states= c("Michigan", "Minnesota", "Mississippi", "Missouri"),
cumulative=FALSE,
stacked=TRUE,
data=Data,
delay=20,
ifr=0.005,
window=7,
smooth=TRUE,
span=c(0.2,0.3),
show.ifr=TRUE,
bg="transparent",
xlim=c(60, 366+46),
show.as.percent=FALSE)
View(cases_mn)
plot(Days, cases_mn$new_case, type = "b",
ylab = "Infected", xlab = "Days since the first case")
plot(Days, cases_mn$new_death, type = "b",
ylab = "Infected", xlab = "Days since the first case")
library(ape)
tr <- read.nexus("Downloads/nextstrain_ncov_global_timetree.nexus")
tr
LTT(tr)
ltt.plot(tr)
library(phytools)
ltt(tree,gamma=FALSE)
ltt(tr, gamma = FALSE)
ln_ltt_plot <- ltt(tr, log = TRUE)
lines(c(0, max(nodeHeights(tr))), c(log(2), log(length(tr$tip.label))),
lty = "dashed", lwd = 2, col = "red")
(log(length(tr$tip.label)) - log(2)) / (max(nodeHeights(tr)))
yule(tr)
tr
tr_d <- multi2di(tr)
tr_d
is.ultrametric()
is.ultrametric(tr_d)
yule(tr)
is.binary(tr_d)
?force.ultrametric
tr_d <- force.ultrametric(tr, method = "nnls")
is.ultrametric(tr_d)
tr_d <- force.ultrametric(tr, method = "extend")
is.ultrametric(tr_d)
is.binary(tr_d)
yule(tr)
is.ultrametric(tr_d)
is.binary.phylo(tr_d)
?multi2di
tr_d2 <- multi2di.phylo(tr_d)
is.binary.phylo(tr_d2)
yule(tr)
tr_d2
ltt.plot(tr)
(log(length(tr$tip.label)) - log(2)) / (max(nodeHeights(tr)))
bd_stats <- birthdeath(tr)
birthdeath(tr_d)
bd_stats <- birthdeath(tr_d2)
bd_stats
r <- bd_stats$para[[1]]
d <- bd_stats$para[[2]]
r
r
d
(log(length(tr$tip.label)) - log(2)) / (max(nodeHeights(tr)))
yule(tr_d2)
library(TreeSim)
LTT.plot(tr)
LTT.plot(tr_d2)
ages<-c()
for (i in 1:length(tr)){
ages<-c(ages,tr[[i]]$root.edge+max(getx(tr[[i]])))
}
ages<-c()
for (i in 1:length(tr_d2)){
ages<-c(ages,tr_d2[[i]]$root.edge+max(getx(tr_d2[[i]])))
}
tr_d2[[i]]$root.edge
?geiger
bd.ms(phy = tr_d2)
bd.mk(phy = tr_d2)
bd.ms(phy = tr_d2, CI = 0.95)
bd.km(phy = tr_d2)
require(diversitree)
lik <- make.bd(tr)
lik <- make.bd(tr_d2)
lik <- make.bd(tr_d)
plot(tr, show.tip.label = F)
plot(tr_d, show.tip.label = F)
plot(tr_d2, show.tip.label = F)
lik <- make.bd(tr_d2)
tr_d2 <- multi2di.phylo(tr_d, tol = 1e-08)
is.binary.phylo(tr_d2)
lik <- make.bd(tr_d2)
tr_d2 <- di2multi(tr_d, tol = 1e-08)
is.binary.phylo(tr_d2)
tr_d2 <- di2multi(tr, tol = 1e-08)
is.binary.phylo(tr_d2)
?di2multi
(multi2di(tr_d, random = TRUE))
tr_d3 <- (multi2di(tr_d, random = TRUE))
tr_d3
is.binary(tr_d3)
lik <- make.bd(tr_d3)
tr_d3 <- (multi2di(tr_d, random = FALSE))
is.binary(tr_d3)
geotree <- compute.brlen(tr, 1)
yule(geotree)
geotree <- compute.brlen(tr_d3, 1)
yule(geotree)
tr_d <- force.ultrametric(tr, method = "extend")
is.ultrametric(tr_d)
tr_d2 <- di2multi(tr_d, tol = 1e-08)
is.binary.phylo(tr_d2)
tr_d$edge.length <- pmax(tr_d$edge.length,1/365)
tr_d$edge.length
tr_d <- force.ultrametric(tr, method = "extend")
is.ultrametric(tr_d)
tr_d
tr_d$edge.length
tr_d$edge.length <- pmax(tr_d$edge.length,1/365)
tr_d$edge.length
is.binary.phylo(tr_d)
tr_d3 <- multi2di(tr_d, random = FALSE)
is.binary(tr_d3)
plot(tr_d2, show.tip.label = F)
tr_d2 <- multi2di(tr_d)
is.binary.phylo(tr_d2)
yule(tr_d2)
bd_stats <- birthdeath(tr_d2)
bd_stats
pmax(tr_d$edge.length, 1/365)
ltt.plot(tr_d2)
obj <- ltt(tr, gamma = FALSE)
ages<-c()
for (i in 1:length(tr_d2)){
ages<-c(ages, tr_d2[[i]]$root.edge+max(getx(tr_d2[[i]])))
}
LTT.plot(tr_d2)
lik <- make.bd(tr_d2)
lines(c(0, max(nodeHeights(tr))), c(log(2), log(length(tr$tip.label))),
lty = "dashed", lwd = 2, col = "red")
ln_ltt_plot <- ltt(tr_d2, log = TRUE)
?yule
lines(c(0, max(nodeHeights(tr_d2))), c(log(2), log(length(tr_d2$tip.label))),
lty = "dashed", lwd = 2, col = "red")
(log(length(tr_d2$tip.label)) - log(2)) / (max(nodeHeights(tr_d2)))
tr_d <- force.ultrametric(tr, method = "nnls")
is.ultrametric(tr_d)
tr_d <- force.ultrametric(tr)
tr_d <- force.ultrametric(tr, method = "extended")
is.ultrametric(tr_d)
tr_d <- force.ultrametric(tr, method = "extend")
is.ultrametric(tr_d)
trr <- nnls.tree(cophenetic(tr), tr, rooted = TRUE, trace = 0)
require(phangorn)
trr <- nnls.tree(cophenetic(tr), tr, rooted = TRUE, trace = 0)
?nnls.tree
trr <- nnls.tree(cophenetic(tr), tr, trace = 0)
trr <- nnls.tree(cophenetic(tr), tr, rooted = FALSE, trace = 0)
tr
tr$root.edge
tr$tip.label
tr
tr$node.label
tr$Nnode
length(tr$tip.label)
length(tr$edge.length)
tr$edge.length
ages<-c()
for (i in 1:length(tr_d2)){
ages<-c(ages, tr_d2$root.edge+max(getx(tr_d2)))
}
LTT.plot(tr_d2)
?LTT.plot
LTT.plot(tr_d2, list(ages))
LTT.plot(c(tr_d2, list(ages)), avg = TRUE)
ltt(tr,log=FALSE)
dev.off()
gc()
tr <- read.nexus("Downloads/nextstrain_ncov_global_timetree.nexus")
is.ultrametric(tr)
is.binary(tr)
tr <- multi2di(read.nexus("Downloads/nextstrain_ncov_global_timetree.nexus"))
is.ultrametric(tr)
is.binary(tr)
tr <- force.ultrametric(tr)
tr <- force.ultrametric(tr, method = "extend")
is.ultrametric(tr)
tr
tr
tr$root.edge
tr$root.edge <- NULL
tr
is.ultrametric(tr)
is.binary(tr)
tr <- force.ultrametric(tr, method = "nnls")
tr <- force.ultrametric(tr, method = "extend")
tr
str(tr)
tr <- multi2di(read.nexus("Downloads/nextstrain_ncov_global_timetree.nexus"))
str(tr)
tr$root.edge <- NULL
plot(tr, show.tip.label = F)
tr <- force.ultrametric(tr, method = "extend")
plot(tr, show.tip.label = F)
is.ultrametric(tr)
is.binary(tr)
?multi2di
tr <- di2multi(tr, tol = 1e-08)
tr
is.ultrametric(tr)
ltt.plot(tr)
lines(c(0, max(nodeHeights(tr_d2))), c(log(2), log(length(tr_d2$tip.label))),
lty = "dashed", lwd = 2, col = "red")
lines(c(0, max(nodeHeights(tr))), c(log(2), log(length(tr$tip.label))),
lty = "dashed", lwd = 2, col = "red")
?ltt.plot
ltt.plot(tr, log = "y")
lines(c(0, max(nodeHeights(tr))), c(log(2), log(length(tr$tip.label))),
lty = "dashed", lwd = 2, col = "red")
max(nodeHeights(tr))
log(length(tr$tip.label))
(log(length(tr$tip.label)) - log(2)) / (max(nodeHeights(tr)))
yule(tr)
l.w.phy <- ltt.plot(tr, log = "y")
lm(log(1:85)~l.w.phy[[2]])
l.w.phy[[2]]
ltt.plot(tr, log = "y")
ln_ltt_plot <- ltt(tr_d2, log = TRUE)
ln_ltt_plot <- ltt(tr, log = TRUE)
lines(c(0, max(nodeHeights(tr))), c(log(2), log(length(tr$tip.label))),
lty = "dashed", lwd = 2, col = "red")
lm(log(Ntip(tr)) ~ ln_ltt_plot[[2]])
ln_ltt_plot
(log(length(tr$tip.label)) - log(2)) / (max(nodeHeights(tr)))
ln_ltt_plot[[2]]
log(1:85)
log(1:Ntip(tr)
)
lm(log(1:Ntip(tr)) ~ ln_ltt_plot[[2]])
data(whales)
w.phy = whales$phy
plot(w.phy,show.tip.label=F)
l.w.phy=ltt(w.phy)
(c.w.phy = lm(log(1:85)~l.w.phy[[2]]))
w.phy
l.w.phy[[2]]
length(l.w.phy[[2]])
length(ln_ltt_plot[[2]])
Ntip(tr)
7299/2
lm(log(1:length(ln_ltt_plot[[2]])) ~ ln_ltt_plot[[2]])
covltt = ltt(tr)
cof <- (log(length(tr$tip.label)) - log(2)) / (max(nodeHeights(tr)))
abline(a = cof$coefficients[1], b = cof$coefficients[2], col = "red")
cof
cof <- lm(log(1:length(ln_ltt_plot[[2]])) ~ ln_ltt_plot[[2]])
cof
abline(a = cof$coefficients[1], b = cof$coefficients[2], col = "red")
legend(x = 28, y = 1, legend = c("Lambda", round(cof$coefficients[2], 3)))
tr
ln_ltt_plot
(log(length(tr$tip.label)) - log(2)) / (max(nodeHeights(tr)))
lines(c(0, max(nodeHeights(tr))), c(log(2), log(length(tr$tip.label))),
lty = "dashed", lwd = 2, col = "red")
cof
tr <- multi2di(read.nexus("Downloads/nextstrain_ncov_global_timetree.nexus"))
tr$root.edge <- NULL
ln_ltt_plot <- ltt(tr, log = TRUE)
lines(c(0, max(nodeHeights(tr))), c(log(2), log(length(tr$tip.label))),
lty = "dashed", lwd = 2, col = "red")
(log(length(tr$tip.label)) - log(2)) / (max(nodeHeights(tr)))
cof <- lm(log(1:length(ln_ltt_plot[[2]])) ~ ln_ltt_plot[[2]])
abline(a = cof$coefficients[1], b = cof$coefficients[2], col = "red")
tr2 <- force.ultrametric(tr, method = "extend")
tr3 <- di2multi(tr3, tol = 1e-08)
tr3 <- di2multi(tr2, tol = 1e-08)
is.ultrametric(tr3)
is.binary(tr3)
is.ultrametric(tr2)
is.binary(tr2)
ln_ltt_plot <- ltt(tr, log = TRUE)
ln_ltt_plot <- ltt(tr2, log = TRUE)
lines(c(0, max(nodeHeights(tr))), c(log(2), log(length(tr$tip.label))),
lty = "dashed", lwd = 2, col = "red")
(log(length(tr$tip.label)) - log(2)) / (max(nodeHeights(tr)))
cof <- lm(log(1:length(ln_ltt_plot[[2]])) ~ ln_ltt_plot[[2]])
abline(a = cof$coefficients[1], b = cof$coefficients[2], col = "red")
legend(x = 1, y = 0.5, legend = c("Lambda", round(cof$coefficients[2], 3)))
legend(x = 1, y = 0.1, legend = c("Lambda", round(cof$coefficients[2], 3)))
legend(x = 2, y = 0.1, legend = c("Lambda", round(cof$coefficients[2], 3)))
c("Lambda", round(cof$coefficients[2], 3))
dat <- read.csv("Downloads/nextstrain_ncov_global_metadata.tsv")
dat <- read.csv("Downloads/nextstrain_ncov_global_metadata.tsv", row.names = FALSE)
dat <- read.csv("Downloads/nextstrain_ncov_global_metadata.tsv")
View(dat)
dat <- read.csv("Downloads/nextstrain_ncov_global_metadata.tsv", sep = '\t', header = TRUE)
View(dat)
(dat$Clade)
unique(dat$Clade)
clade19 <- subset(dat, Clade == "19A")
clade19
tree19 <- drop.tip(tr2, setdiff(tr2$tip.label, clade19$Strain))
tree19
plot(tree19)
plot(tree19, show.tip.label = F)
?pd
ltt.plot(tree19, log = "y")
obj <- ltt(tree19,log.lineages = TRUE)
sum(tree19$edge.length)
sum(tr2$edge.length)
View(dat)
setwd(here::here("Documents/GitHub/BiodiversityScience/"))
setwd("Spring2021")
require(maptools)
require(rgdal)
require(raster)
require(rangeBuilder)
library(spdep)
library(ncf)
require(geiger)
require(dismo)
library(rworldmap)
require(spatialreg)
require(ape)
franges <- readOGR(dsn = "Data/Franges", layer = "Furnarii_ranges_geo")
class(franges)
neo_ras <- raster() # empty raster
extent(neo_ras) <- extent(franges) # Set the raster "extent"
res(neo_ras) <- 1 # Set the raster "resolution"
neo_ras # print the raster object in the console
values(neo_ras) <- 0 # assign O values to all pixels in the raster
f_sr_raster <- rasterize(franges, neo_ras, field = "SCINAME",
fun = function(x,...){length(unique(na.omit(x)))})
# this will take a while (~30 secs in Jesús's computer), please be patient.
plot(f_sr_raster)
plot(SA, add = TRUE)
plot(f_sr_raster)
plot(f_sr_raster)
plot(SA, add = TRUE)
SA <- subset(countriesCoarse, continent == "South America") # Select South America
plot(SA)
plot(fur_ruf, col = "green", add = TRUE) # Furnarius rufus
plot(f_sr_raster)
plot(SA, add = TRUE)
rasterize(franges, neo_ras, field = "SCINAME")
rasterize(franges, neo_ras, field = "SCINAME", fun = sum)
rasterize(franges, neo_ras, field = "SCINAME", fun = "sum")
?rasterize
f_sr_2dg_raster <- rasterize(franges, neo_ras_2dg, field = "SCINAME)
")"
f_sr_2dg_raster <- rasterize(franges, neo_ras_2dg, field = "SCINAME")
f_sr_2dg_raster <- rasterize(franges, neo_ras, field = "SCINAME")
f_sr_2dg_raster <- rasterize(franges, neo_ras, field = "SCINAME", fun = sum)
f_sr_2dg_raster <- rasterize(franges, neo_ras, field = "SCINAME", fun = "sum")
f_sr_raster <- rasterize(franges, neo_ras, field = "SCINAME",
fun = function(x,...){length(unique(na.omit(x)))})
# this will take a while (~30 secs in Jesús's computer), please be patient.
plot(f_sr_raster)
plot(SA, add = TRUE)
f_sr_raster <- rasterize(franges, neo_ras, field = "SCINAME",
fun = function(x, ...){length(unique(na.omit(x)))})
# this will take a while (~30 secs in Jesús's computer), please be patient.
plot(f_sr_raster)
plot(SA, add = TRUE)
neo_ras <- raster() # empty raster
extent(neo_ras) <- extent(franges) # Set the raster "extent"
res(neo_ras) <- 1 # Set the raster "resolution"
neo_ras # print the raster object in the console
values(neo_ras) <- 0 # assign O values to all pixels in the raster
f_sr_raster <- rasterize(franges, neo_ras, field = "SCINAME",
fun = function(x, ...){length(unique(na.omit(x)))})
# this will take a while (~30 secs in Jesús's computer), please be patient.
print(raster())
print(neo_ras)
f_sr_raster <- rasterize(x = franges,
y = neo_ras,
field = "SCINAME",
fun = function(x, ...){
length(unique(na.omit(x)))
})
# this will take a while (~30 secs in Jesús's computer), please be patient.
