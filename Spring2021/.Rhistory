ltt(tr, gamma = FALSE)
ln_ltt_plot <- ltt(tr, log = TRUE)
lines(c(0, max(nodeHeights(tr))), c(log(2), log(length(tr$tip.label))),
lty = "dashed", lwd = 2, col = "red")
(log(length(tr$tip.label)) - log(2)) / (max(nodeHeights(tr)))
yule(tr)
tr
tr_d <- multi2di(tr)
tr_d
is.ultrametric()
is.ultrametric(tr_d)
yule(tr)
is.binary(tr_d)
?force.ultrametric
tr_d <- force.ultrametric(tr, method = "nnls")
is.ultrametric(tr_d)
tr_d <- force.ultrametric(tr, method = "extend")
is.ultrametric(tr_d)
is.binary(tr_d)
yule(tr)
is.ultrametric(tr_d)
is.binary.phylo(tr_d)
?multi2di
tr_d2 <- multi2di.phylo(tr_d)
is.binary.phylo(tr_d2)
yule(tr)
tr_d2
ltt.plot(tr)
(log(length(tr$tip.label)) - log(2)) / (max(nodeHeights(tr)))
bd_stats <- birthdeath(tr)
birthdeath(tr_d)
bd_stats <- birthdeath(tr_d2)
bd_stats
r <- bd_stats$para[[1]]
d <- bd_stats$para[[2]]
r
r
d
(log(length(tr$tip.label)) - log(2)) / (max(nodeHeights(tr)))
yule(tr_d2)
library(TreeSim)
LTT.plot(tr)
LTT.plot(tr_d2)
ages<-c()
for (i in 1:length(tr)){
ages<-c(ages,tr[[i]]$root.edge+max(getx(tr[[i]])))
}
ages<-c()
for (i in 1:length(tr_d2)){
ages<-c(ages,tr_d2[[i]]$root.edge+max(getx(tr_d2[[i]])))
}
tr_d2[[i]]$root.edge
?geiger
bd.ms(phy = tr_d2)
bd.mk(phy = tr_d2)
bd.ms(phy = tr_d2, CI = 0.95)
bd.km(phy = tr_d2)
require(diversitree)
lik <- make.bd(tr)
lik <- make.bd(tr_d2)
lik <- make.bd(tr_d)
plot(tr, show.tip.label = F)
plot(tr_d, show.tip.label = F)
plot(tr_d2, show.tip.label = F)
lik <- make.bd(tr_d2)
tr_d2 <- multi2di.phylo(tr_d, tol = 1e-08)
is.binary.phylo(tr_d2)
lik <- make.bd(tr_d2)
tr_d2 <- di2multi(tr_d, tol = 1e-08)
is.binary.phylo(tr_d2)
tr_d2 <- di2multi(tr, tol = 1e-08)
is.binary.phylo(tr_d2)
?di2multi
(multi2di(tr_d, random = TRUE))
tr_d3 <- (multi2di(tr_d, random = TRUE))
tr_d3
is.binary(tr_d3)
lik <- make.bd(tr_d3)
tr_d3 <- (multi2di(tr_d, random = FALSE))
is.binary(tr_d3)
geotree <- compute.brlen(tr, 1)
yule(geotree)
geotree <- compute.brlen(tr_d3, 1)
yule(geotree)
tr_d <- force.ultrametric(tr, method = "extend")
is.ultrametric(tr_d)
tr_d2 <- di2multi(tr_d, tol = 1e-08)
is.binary.phylo(tr_d2)
tr_d$edge.length <- pmax(tr_d$edge.length,1/365)
tr_d$edge.length
tr_d <- force.ultrametric(tr, method = "extend")
is.ultrametric(tr_d)
tr_d
tr_d$edge.length
tr_d$edge.length <- pmax(tr_d$edge.length,1/365)
tr_d$edge.length
is.binary.phylo(tr_d)
tr_d3 <- multi2di(tr_d, random = FALSE)
is.binary(tr_d3)
plot(tr_d2, show.tip.label = F)
tr_d2 <- multi2di(tr_d)
is.binary.phylo(tr_d2)
yule(tr_d2)
bd_stats <- birthdeath(tr_d2)
bd_stats
pmax(tr_d$edge.length, 1/365)
ltt.plot(tr_d2)
obj <- ltt(tr, gamma = FALSE)
ages<-c()
for (i in 1:length(tr_d2)){
ages<-c(ages, tr_d2[[i]]$root.edge+max(getx(tr_d2[[i]])))
}
LTT.plot(tr_d2)
lik <- make.bd(tr_d2)
lines(c(0, max(nodeHeights(tr))), c(log(2), log(length(tr$tip.label))),
lty = "dashed", lwd = 2, col = "red")
ln_ltt_plot <- ltt(tr_d2, log = TRUE)
?yule
lines(c(0, max(nodeHeights(tr_d2))), c(log(2), log(length(tr_d2$tip.label))),
lty = "dashed", lwd = 2, col = "red")
(log(length(tr_d2$tip.label)) - log(2)) / (max(nodeHeights(tr_d2)))
tr_d <- force.ultrametric(tr, method = "nnls")
is.ultrametric(tr_d)
tr_d <- force.ultrametric(tr)
tr_d <- force.ultrametric(tr, method = "extended")
is.ultrametric(tr_d)
tr_d <- force.ultrametric(tr, method = "extend")
is.ultrametric(tr_d)
trr <- nnls.tree(cophenetic(tr), tr, rooted = TRUE, trace = 0)
require(phangorn)
trr <- nnls.tree(cophenetic(tr), tr, rooted = TRUE, trace = 0)
?nnls.tree
trr <- nnls.tree(cophenetic(tr), tr, trace = 0)
trr <- nnls.tree(cophenetic(tr), tr, rooted = FALSE, trace = 0)
tr
tr$root.edge
tr$tip.label
tr
tr$node.label
tr$Nnode
length(tr$tip.label)
length(tr$edge.length)
tr$edge.length
ages<-c()
for (i in 1:length(tr_d2)){
ages<-c(ages, tr_d2$root.edge+max(getx(tr_d2)))
}
LTT.plot(tr_d2)
?LTT.plot
LTT.plot(tr_d2, list(ages))
LTT.plot(c(tr_d2, list(ages)), avg = TRUE)
ltt(tr,log=FALSE)
dev.off()
gc()
tr <- read.nexus("Downloads/nextstrain_ncov_global_timetree.nexus")
is.ultrametric(tr)
is.binary(tr)
tr <- multi2di(read.nexus("Downloads/nextstrain_ncov_global_timetree.nexus"))
is.ultrametric(tr)
is.binary(tr)
tr <- force.ultrametric(tr)
tr <- force.ultrametric(tr, method = "extend")
is.ultrametric(tr)
tr
tr
tr$root.edge
tr$root.edge <- NULL
tr
is.ultrametric(tr)
is.binary(tr)
tr <- force.ultrametric(tr, method = "nnls")
tr <- force.ultrametric(tr, method = "extend")
tr
str(tr)
tr <- multi2di(read.nexus("Downloads/nextstrain_ncov_global_timetree.nexus"))
str(tr)
tr$root.edge <- NULL
plot(tr, show.tip.label = F)
tr <- force.ultrametric(tr, method = "extend")
plot(tr, show.tip.label = F)
is.ultrametric(tr)
is.binary(tr)
?multi2di
tr <- di2multi(tr, tol = 1e-08)
tr
is.ultrametric(tr)
ltt.plot(tr)
lines(c(0, max(nodeHeights(tr_d2))), c(log(2), log(length(tr_d2$tip.label))),
lty = "dashed", lwd = 2, col = "red")
lines(c(0, max(nodeHeights(tr))), c(log(2), log(length(tr$tip.label))),
lty = "dashed", lwd = 2, col = "red")
?ltt.plot
ltt.plot(tr, log = "y")
lines(c(0, max(nodeHeights(tr))), c(log(2), log(length(tr$tip.label))),
lty = "dashed", lwd = 2, col = "red")
max(nodeHeights(tr))
log(length(tr$tip.label))
(log(length(tr$tip.label)) - log(2)) / (max(nodeHeights(tr)))
yule(tr)
l.w.phy <- ltt.plot(tr, log = "y")
lm(log(1:85)~l.w.phy[[2]])
l.w.phy[[2]]
ltt.plot(tr, log = "y")
ln_ltt_plot <- ltt(tr_d2, log = TRUE)
ln_ltt_plot <- ltt(tr, log = TRUE)
lines(c(0, max(nodeHeights(tr))), c(log(2), log(length(tr$tip.label))),
lty = "dashed", lwd = 2, col = "red")
lm(log(Ntip(tr)) ~ ln_ltt_plot[[2]])
ln_ltt_plot
(log(length(tr$tip.label)) - log(2)) / (max(nodeHeights(tr)))
ln_ltt_plot[[2]]
log(1:85)
log(1:Ntip(tr)
)
lm(log(1:Ntip(tr)) ~ ln_ltt_plot[[2]])
data(whales)
w.phy = whales$phy
plot(w.phy,show.tip.label=F)
l.w.phy=ltt(w.phy)
(c.w.phy = lm(log(1:85)~l.w.phy[[2]]))
w.phy
l.w.phy[[2]]
length(l.w.phy[[2]])
length(ln_ltt_plot[[2]])
Ntip(tr)
7299/2
lm(log(1:length(ln_ltt_plot[[2]])) ~ ln_ltt_plot[[2]])
covltt = ltt(tr)
cof <- (log(length(tr$tip.label)) - log(2)) / (max(nodeHeights(tr)))
abline(a = cof$coefficients[1], b = cof$coefficients[2], col = "red")
cof
cof <- lm(log(1:length(ln_ltt_plot[[2]])) ~ ln_ltt_plot[[2]])
cof
abline(a = cof$coefficients[1], b = cof$coefficients[2], col = "red")
legend(x = 28, y = 1, legend = c("Lambda", round(cof$coefficients[2], 3)))
tr
ln_ltt_plot
(log(length(tr$tip.label)) - log(2)) / (max(nodeHeights(tr)))
lines(c(0, max(nodeHeights(tr))), c(log(2), log(length(tr$tip.label))),
lty = "dashed", lwd = 2, col = "red")
cof
tr <- multi2di(read.nexus("Downloads/nextstrain_ncov_global_timetree.nexus"))
tr$root.edge <- NULL
ln_ltt_plot <- ltt(tr, log = TRUE)
lines(c(0, max(nodeHeights(tr))), c(log(2), log(length(tr$tip.label))),
lty = "dashed", lwd = 2, col = "red")
(log(length(tr$tip.label)) - log(2)) / (max(nodeHeights(tr)))
cof <- lm(log(1:length(ln_ltt_plot[[2]])) ~ ln_ltt_plot[[2]])
abline(a = cof$coefficients[1], b = cof$coefficients[2], col = "red")
tr2 <- force.ultrametric(tr, method = "extend")
tr3 <- di2multi(tr3, tol = 1e-08)
tr3 <- di2multi(tr2, tol = 1e-08)
is.ultrametric(tr3)
is.binary(tr3)
is.ultrametric(tr2)
is.binary(tr2)
ln_ltt_plot <- ltt(tr, log = TRUE)
ln_ltt_plot <- ltt(tr2, log = TRUE)
lines(c(0, max(nodeHeights(tr))), c(log(2), log(length(tr$tip.label))),
lty = "dashed", lwd = 2, col = "red")
(log(length(tr$tip.label)) - log(2)) / (max(nodeHeights(tr)))
cof <- lm(log(1:length(ln_ltt_plot[[2]])) ~ ln_ltt_plot[[2]])
abline(a = cof$coefficients[1], b = cof$coefficients[2], col = "red")
legend(x = 1, y = 0.5, legend = c("Lambda", round(cof$coefficients[2], 3)))
legend(x = 1, y = 0.1, legend = c("Lambda", round(cof$coefficients[2], 3)))
legend(x = 2, y = 0.1, legend = c("Lambda", round(cof$coefficients[2], 3)))
c("Lambda", round(cof$coefficients[2], 3))
dat <- read.csv("Downloads/nextstrain_ncov_global_metadata.tsv")
dat <- read.csv("Downloads/nextstrain_ncov_global_metadata.tsv", row.names = FALSE)
dat <- read.csv("Downloads/nextstrain_ncov_global_metadata.tsv")
View(dat)
dat <- read.csv("Downloads/nextstrain_ncov_global_metadata.tsv", sep = '\t', header = TRUE)
View(dat)
(dat$Clade)
unique(dat$Clade)
clade19 <- subset(dat, Clade == "19A")
clade19
tree19 <- drop.tip(tr2, setdiff(tr2$tip.label, clade19$Strain))
tree19
plot(tree19)
plot(tree19, show.tip.label = F)
?pd
ltt.plot(tree19, log = "y")
obj <- ltt(tree19,log.lineages = TRUE)
sum(tree19$edge.length)
sum(tr2$edge.length)
View(dat)
setwd(here::here("Documents/GitHub/BiodiversityScience/"))
setwd("Spring2021")
require(maptools)
require(rgdal)
require(raster)
require(rangeBuilder)
library(spdep)
library(ncf)
require(geiger)
require(dismo)
library(rworldmap)
require(spatialreg)
require(ape)
franges <- readOGR(dsn = "Data/Franges", layer = "Furnarii_ranges_geo")
class(franges)
neo_ras <- raster() # empty raster
extent(neo_ras) <- extent(franges) # Set the raster "extent"
res(neo_ras) <- 1 # Set the raster "resolution"
neo_ras # print the raster object in the console
values(neo_ras) <- 0 # assign O values to all pixels in the raster
f_sr_raster <- rasterize(franges, neo_ras, field = "SCINAME",
fun = function(x,...){length(unique(na.omit(x)))})
# this will take a while (~30 secs in JesÃºs's computer), please be patient.
plot(f_sr_raster)
plot(SA, add = TRUE)
plot(f_sr_raster)
plot(f_sr_raster)
plot(SA, add = TRUE)
SA <- subset(countriesCoarse, continent == "South America") # Select South America
plot(SA)
plot(fur_ruf, col = "green", add = TRUE) # Furnarius rufus
plot(f_sr_raster)
plot(SA, add = TRUE)
rasterize(franges, neo_ras, field = "SCINAME")
rasterize(franges, neo_ras, field = "SCINAME", fun = sum)
rasterize(franges, neo_ras, field = "SCINAME", fun = "sum")
?rasterize
f_sr_2dg_raster <- rasterize(franges, neo_ras_2dg, field = "SCINAME)
")"
f_sr_2dg_raster <- rasterize(franges, neo_ras_2dg, field = "SCINAME")
f_sr_2dg_raster <- rasterize(franges, neo_ras, field = "SCINAME")
f_sr_2dg_raster <- rasterize(franges, neo_ras, field = "SCINAME", fun = sum)
f_sr_2dg_raster <- rasterize(franges, neo_ras, field = "SCINAME", fun = "sum")
f_sr_raster <- rasterize(franges, neo_ras, field = "SCINAME",
fun = function(x,...){length(unique(na.omit(x)))})
# this will take a while (~30 secs in JesÃºs's computer), please be patient.
plot(f_sr_raster)
plot(SA, add = TRUE)
f_sr_raster <- rasterize(franges, neo_ras, field = "SCINAME",
fun = function(x, ...){length(unique(na.omit(x)))})
# this will take a while (~30 secs in JesÃºs's computer), please be patient.
plot(f_sr_raster)
plot(SA, add = TRUE)
neo_ras <- raster() # empty raster
extent(neo_ras) <- extent(franges) # Set the raster "extent"
res(neo_ras) <- 1 # Set the raster "resolution"
neo_ras # print the raster object in the console
values(neo_ras) <- 0 # assign O values to all pixels in the raster
f_sr_raster <- rasterize(franges, neo_ras, field = "SCINAME",
fun = function(x, ...){length(unique(na.omit(x)))})
# this will take a while (~30 secs in JesÃºs's computer), please be patient.
print(raster())
print(neo_ras)
f_sr_raster <- rasterize(x = franges,
y = neo_ras,
field = "SCINAME",
fun = function(x, ...){
length(unique(na.omit(x)))
})
# this will take a while (~30 secs in JesÃºs's computer), please be patient.
packages <- c("coronavirus", "deSolve", "dplyr", "tidyr", "ggplot2", "lubridate",
"phytools", "ape", "phangorn")
# Install packages not yet installed
installed_packages <- packages %in% rownames(installed.packages())
if (any(installed_packages == FALSE)) {
install.packages(packages[!installed_packages], dependencies = TRUE)
}
lapply(packages, library, character.only = TRUE)
data("coronavirus")
corona <- refresh_coronavirus_jhu()
head(corona)
# Get top confirmed cases by country
corona_total <- coronavirus %>%
filter(type == "confirmed") %>%
group_by(country) %>%
summarise(total = sum(cases)) %>%
arrange(-total)
# See the 20 countries with more cases
head(corona_total, 20)
corona_total %>%
head(20) %>%
ggplot(aes(y = country, x = total)) +
geom_bar(stat = "identity") +
labs(x = "Number of cases", y = "Countries with more reported cases")
corona_total %>%
tail(20) %>%
ggplot(aes(y = country, x = total)) +
geom_bar(stat = "identity") +
labs(x = "Number of cases", y = "Countries with less reported cases")
# Get the number of recovered cases
coronavirus %>%
filter(type == "recovered") %>%
group_by(country) %>%
summarise(total = sum(cases)) %>%
arrange(-total) %>%
head(20) %>%
ggplot(aes(y = country, x = total)) + # plot the top 20 countries with more recovered subjects
geom_bar(stat = "identity") +
labs(x = "Number of recovered subjects", y = "Countries with more recovered subjects")
corona_us <- subset(corona, location == "US")
head(corona_us)
corona_us <- corona_us[order(corona_us$date), ] # sort the data according dates
head(corona_us)
infected_us <- subset(corona_us, data_type == "cases_new")
deaths_us <- subset(corona_us, data_type == "deaths_new")
recovered_us <- subset(corona_us, data_type == "recovered_new")
head(infected_us)
plot(infected_us$date, infected_us$value, type = "b")
Days <- 1:nrow(infected_us)
infected_us <- data.frame(infected_us, Days)
head(infected_us)
plot(infected_us$Days, infected_us$value, type = "b",
ylab = "Infected", xlab = "Days since the first case")
# Get data from the CDC
url_data <- "https://data.cdc.gov/api/views/9mfq-cb36/rows.csv?accessType=DOWNLOAD"
covid_us <- read.csv(url_data)
head(covid_us, 10)
covid_us %>%
arrange(state) %>%
ggplot(aes(y = state, x = tot_cases)) +
geom_bar(stat = "identity") +
labs(x = "Number of cases", y = "Reported cases by State")
covid_us <- covid_us %>%
mutate(Date = submission_date) %>%
mutate(Date2 = mdy(Date)) %>%
separate(submission_date, sep = "/", into = c("month", "day", "year"))
# Sort the data in an increasing order
covid_us <- covid_us[order(covid_us$Date2), ]
head(covid_us)
covid_mn <- subset(covid_us, state == "MN")
head(covid_mn)
plot(1:nrow(covid_mn), covid_mn$new_case, type = "b",
ylab = "Infected Subjects", xlab = "Days since the pandemic started")
plot(1:nrow(covid_mn), covid_mn$tot_cases, type = "b",
ylab = "Total Infected Subjects", xlab = "Days since the pandemic started")
plot(1:nrow(covid_mn), abs(covid_mn$new_death), type = "b",
ylab = "Number of Deaths", xlab = "Days since the pandemic started")
SIR <- function(time, state, parameters) {
par <- as.list(c(state, parameters))
with(par, {
dS <- -Beta * I * S / N # Equation one
dI <- Beta * I * S / N - Gamma * I # Equation two
dR <- Gamma * I # Equation three
list(c(dS, dI, dR))
})
}
RSS <- function(parameters) {
names(parameters) <- c("Beta", "Gamma")
out <- ode(y = init, times = Days, func = SIR, parms = parameters)
# the out object includes the SIR function we wrote above
fit <- out[, 3]
sum((Infected - fit)^2)
}
N <- 5686649 # Total population for the State of Minnesota for the 2020
start_date <- "2020-03-06"
end_date <- "2020-05-10"
# isolating the infected subjects in the state of Minnesota since the start date
Infected <- subset(covid_mn, Date2 >= ymd(start_date) & Date2 <= ymd(end_date))$new_case
Days <- 1:length(Infected) # Number of days since the first case
plot(Days, Infected, type = "b")
plot(Days, Infected, log = "y")
#abline(lm(log10(Infected) ~ Days))
title("Confirmed Cases 2019-nCoV in MN, first 60 days", outer = TRUE, line = -2)
init <- c(
S = N - Infected[1], # Susceptible group
I = Infected[1], # Infected group
R = 0 # Recovered group.
)
Opt <- optim(c(0.5, 0.5),
RSS,
method = "L-BFGS-B",
lower = c(0, 0),
upper = c(1, 1)
)
# optimize with some sensible conditions
Opt$message
# [1] "CONVERGENCE: REL_REDUCTION_OF_F <= FACTR*EPSMCH"
Opt_par <- setNames(Opt$par, c("Beta", "Gamma"))
Opt_par
# get the fitted values from our SIR model
fit_incidence <- data.frame(ode(
y = init, times = Days,
func = SIR, parms = Opt_par
))
head(fit_incidence)
tail(fit_incidence)
matplot(fit_incidence$time, fit_incidence$I,
type = "l", log = "y",
xlab = "Days", ylab = "Number of infected subjects",
lwd = 2, lty = 1)
points(Days, Infected)
times <- 1:150 # time in days
fit_150 <- data.frame(ode(
y = init, times = times,
func = SIR, parms = Opt_par))
head(fit_150)
tail(fit_150)
cols <- 1:3 # colors: black = susceptible, red = infected and green = recovered
matplot(fit_150$time, fit_150[, 2:4], type = "l",
xlab = "Days", ylab = "Number of subjects",
lwd = 2, lty = 1, col = cols)
legend("left", c("Susceptible", "Infected", "Recovered"),
lty = 1, lwd = 2, col = cols, inset = 0.05)
matplot(fit_150$time, fit_150[ , 2:4], type = "l",
xlab = "Days", ylab = "Number of subjects",
lwd = 2, lty = 1, col = cols, log = "y")
## Warning in xy.coords(x, y, xlabel, ylabel, log = log): 1 y value <= 0
## omitted from logarithmic plot
points(Days, Infected)
legend("bottomright", c("Susceptible", "Infected", "Recovered"),
lty = 1, lwd = 2, col = cols, inset = 0.05)
title("SIR model 2019-nCoV United States", outer = TRUE, line = -2)
# Peak of the pandemic for the first 60 days
fit_incidence[fit_incidence$I == max(fit_incidence$I), c("time", "I")]
max(fit_incidence$I) * 0.02 # Assuming 2% of fatality rate
