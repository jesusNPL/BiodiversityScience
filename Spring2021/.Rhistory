rasterize(franges, neo_ras, field = "SCINAME")
rasterize(franges, neo_ras, field = "SCINAME", fun = sum)
rasterize(franges, neo_ras, field = "SCINAME", fun = "sum")
?rasterize
f_sr_2dg_raster <- rasterize(franges, neo_ras_2dg, field = "SCINAME)
")"
f_sr_2dg_raster <- rasterize(franges, neo_ras_2dg, field = "SCINAME")
f_sr_2dg_raster <- rasterize(franges, neo_ras, field = "SCINAME")
f_sr_2dg_raster <- rasterize(franges, neo_ras, field = "SCINAME", fun = sum)
f_sr_2dg_raster <- rasterize(franges, neo_ras, field = "SCINAME", fun = "sum")
f_sr_raster <- rasterize(franges, neo_ras, field = "SCINAME",
fun = function(x,...){length(unique(na.omit(x)))})
# this will take a while (~30 secs in Jesús's computer), please be patient.
plot(f_sr_raster)
plot(SA, add = TRUE)
f_sr_raster <- rasterize(franges, neo_ras, field = "SCINAME",
fun = function(x, ...){length(unique(na.omit(x)))})
# this will take a while (~30 secs in Jesús's computer), please be patient.
plot(f_sr_raster)
plot(SA, add = TRUE)
neo_ras <- raster() # empty raster
extent(neo_ras) <- extent(franges) # Set the raster "extent"
res(neo_ras) <- 1 # Set the raster "resolution"
neo_ras # print the raster object in the console
values(neo_ras) <- 0 # assign O values to all pixels in the raster
f_sr_raster <- rasterize(franges, neo_ras, field = "SCINAME",
fun = function(x, ...){length(unique(na.omit(x)))})
# this will take a while (~30 secs in Jesús's computer), please be patient.
print(raster())
print(neo_ras)
f_sr_raster <- rasterize(x = franges,
y = neo_ras,
field = "SCINAME",
fun = function(x, ...){
length(unique(na.omit(x)))
})
# this will take a while (~30 secs in Jesús's computer), please be patient.
packages <- c("coronavirus", "deSolve", "dplyr", "tidyr", "ggplot2", "lubridate",
"phytools", "ape", "phangorn")
# Install packages not yet installed
installed_packages <- packages %in% rownames(installed.packages())
if (any(installed_packages == FALSE)) {
install.packages(packages[!installed_packages], dependencies = TRUE)
}
lapply(packages, library, character.only = TRUE)
data("coronavirus")
corona <- refresh_coronavirus_jhu()
head(corona)
# Get top confirmed cases by country
corona_total <- coronavirus %>%
filter(type == "confirmed") %>%
group_by(country) %>%
summarise(total = sum(cases)) %>%
arrange(-total)
# See the 20 countries with more cases
head(corona_total, 20)
corona_total %>%
head(20) %>%
ggplot(aes(y = country, x = total)) +
geom_bar(stat = "identity") +
labs(x = "Number of cases", y = "Countries with more reported cases")
corona_total %>%
tail(20) %>%
ggplot(aes(y = country, x = total)) +
geom_bar(stat = "identity") +
labs(x = "Number of cases", y = "Countries with less reported cases")
# Get the number of recovered cases
coronavirus %>%
filter(type == "recovered") %>%
group_by(country) %>%
summarise(total = sum(cases)) %>%
arrange(-total) %>%
head(20) %>%
ggplot(aes(y = country, x = total)) + # plot the top 20 countries with more recovered subjects
geom_bar(stat = "identity") +
labs(x = "Number of recovered subjects", y = "Countries with more recovered subjects")
corona_us <- subset(corona, location == "US")
head(corona_us)
corona_us <- corona_us[order(corona_us$date), ] # sort the data according dates
head(corona_us)
infected_us <- subset(corona_us, data_type == "cases_new")
deaths_us <- subset(corona_us, data_type == "deaths_new")
recovered_us <- subset(corona_us, data_type == "recovered_new")
head(infected_us)
plot(infected_us$date, infected_us$value, type = "b")
Days <- 1:nrow(infected_us)
infected_us <- data.frame(infected_us, Days)
head(infected_us)
plot(infected_us$Days, infected_us$value, type = "b",
ylab = "Infected", xlab = "Days since the first case")
# Get data from the CDC
url_data <- "https://data.cdc.gov/api/views/9mfq-cb36/rows.csv?accessType=DOWNLOAD"
covid_us <- read.csv(url_data)
head(covid_us, 10)
covid_us %>%
arrange(state) %>%
ggplot(aes(y = state, x = tot_cases)) +
geom_bar(stat = "identity") +
labs(x = "Number of cases", y = "Reported cases by State")
covid_us <- covid_us %>%
mutate(Date = submission_date) %>%
mutate(Date2 = mdy(Date)) %>%
separate(submission_date, sep = "/", into = c("month", "day", "year"))
# Sort the data in an increasing order
covid_us <- covid_us[order(covid_us$Date2), ]
head(covid_us)
covid_mn <- subset(covid_us, state == "MN")
head(covid_mn)
plot(1:nrow(covid_mn), covid_mn$new_case, type = "b",
ylab = "Infected Subjects", xlab = "Days since the pandemic started")
plot(1:nrow(covid_mn), covid_mn$tot_cases, type = "b",
ylab = "Total Infected Subjects", xlab = "Days since the pandemic started")
plot(1:nrow(covid_mn), abs(covid_mn$new_death), type = "b",
ylab = "Number of Deaths", xlab = "Days since the pandemic started")
SIR <- function(time, state, parameters) {
par <- as.list(c(state, parameters))
with(par, {
dS <- -Beta * I * S / N # Equation one
dI <- Beta * I * S / N - Gamma * I # Equation two
dR <- Gamma * I # Equation three
list(c(dS, dI, dR))
})
}
RSS <- function(parameters) {
names(parameters) <- c("Beta", "Gamma")
out <- ode(y = init, times = Days, func = SIR, parms = parameters)
# the out object includes the SIR function we wrote above
fit <- out[, 3]
sum((Infected - fit)^2)
}
N <- 5686649 # Total population for the State of Minnesota for the 2020
start_date <- "2020-03-06"
end_date <- "2020-05-10"
# isolating the infected subjects in the state of Minnesota since the start date
Infected <- subset(covid_mn, Date2 >= ymd(start_date) & Date2 <= ymd(end_date))$new_case
Days <- 1:length(Infected) # Number of days since the first case
plot(Days, Infected, type = "b")
plot(Days, Infected, log = "y")
#abline(lm(log10(Infected) ~ Days))
title("Confirmed Cases 2019-nCoV in MN, first 60 days", outer = TRUE, line = -2)
init <- c(
S = N - Infected[1], # Susceptible group
I = Infected[1], # Infected group
R = 0 # Recovered group.
)
Opt <- optim(c(0.5, 0.5),
RSS,
method = "L-BFGS-B",
lower = c(0, 0),
upper = c(1, 1)
)
# optimize with some sensible conditions
Opt$message
# [1] "CONVERGENCE: REL_REDUCTION_OF_F <= FACTR*EPSMCH"
Opt_par <- setNames(Opt$par, c("Beta", "Gamma"))
Opt_par
# get the fitted values from our SIR model
fit_incidence <- data.frame(ode(
y = init, times = Days,
func = SIR, parms = Opt_par
))
head(fit_incidence)
tail(fit_incidence)
matplot(fit_incidence$time, fit_incidence$I,
type = "l", log = "y",
xlab = "Days", ylab = "Number of infected subjects",
lwd = 2, lty = 1)
points(Days, Infected)
times <- 1:150 # time in days
fit_150 <- data.frame(ode(
y = init, times = times,
func = SIR, parms = Opt_par))
head(fit_150)
tail(fit_150)
cols <- 1:3 # colors: black = susceptible, red = infected and green = recovered
matplot(fit_150$time, fit_150[, 2:4], type = "l",
xlab = "Days", ylab = "Number of subjects",
lwd = 2, lty = 1, col = cols)
legend("left", c("Susceptible", "Infected", "Recovered"),
lty = 1, lwd = 2, col = cols, inset = 0.05)
matplot(fit_150$time, fit_150[ , 2:4], type = "l",
xlab = "Days", ylab = "Number of subjects",
lwd = 2, lty = 1, col = cols, log = "y")
## Warning in xy.coords(x, y, xlabel, ylabel, log = log): 1 y value <= 0
## omitted from logarithmic plot
points(Days, Infected)
legend("bottomright", c("Susceptible", "Infected", "Recovered"),
lty = 1, lwd = 2, col = cols, inset = 0.05)
title("SIR model 2019-nCoV United States", outer = TRUE, line = -2)
# Peak of the pandemic for the first 60 days
fit_incidence[fit_incidence$I == max(fit_incidence$I), c("time", "I")]
max(fit_incidence$I) * 0.02 # Assuming 2% of fatality rate
require(maptools)
require(rgdal)
require(raster)
require(rangeBuilder)
library(spdep)
library(ncf)
require(geiger)
require(dismo)
library(rworldmap)
require(spatialreg)
require(ape)
franges <- readOGR(dsn = "Data/Franges", layer = "Furnarii_ranges_geo")
head(franges@data)
f_sr_raster <- rasterize(franges, neo_ras, field = "SCINAME",
fun = function(x, ...){length(unique(na.omit(x)))})
neo_ras <- raster() # empty raster
extent(neo_ras) <- extent(franges) # Set the raster "extent"
res(neo_ras) <- 1 # Set the raster "resolution"
neo_ras # print the raster object in the console
values(neo_ras) <- 0 # assign O values to all pixels in the raster
f_sr_raster <- rasterize(franges, neo_ras, field = "SCINAME",
fun = function(x, ...){length(unique(na.omit(x)))})
# this will take a while (~30 secs in Jesús's computer), please be patient.
library(rgdal)
franges <- readOGR(dsn = "Data/Franges", layer = "Furnarii_ranges_geo")
library(speciesgeocodeR)
?RangeRichness
r_ri <- RangeRichness(franges, res = 1, terrestrial = TRUE)
r_ri
plot(r_ri)
library(letsR)
?lets.presab
rrr <- lets.presab(franges)
rrr
plot(rrr)
e <- extent(franges)
e
e[1]
e[2]
e[4]
rrr <- lets.presab(franges, xmn = e[1], xmx = e[2], ymn = e[3], ymx = e[4],
count = TRUE)$Richness_Raster
franges
rrr
plot(rrr)
CRS(franges)
CRS(franges)
crs(franges)
?RangeRichness
opt1 <- RangeRichness(franges, res = 1, terrestrial = TRUE)
plot(opt1)
e <- extent(franges)
opt2 <- lets.presab(franges, xmn = e[1], xmx = e[2], ymn = e[3], ymx = e[4],
resol = 1, CRS("+proj=longlat +datum=WGS84 +no_defs"),
count = TRUE)$Richness_Raster
plot(opt2)
opt2 <- lets.presab(franges, xmn = e[1], xmx = e[2], ymn = e[3], ymx = e[4],
resol = 1, count = TRUE)$Richness_Raster
plot(opt2)
package.names <- c('ape', 'picante', 'pez', 'car', 'vegan', 'MASS', 'ecodist', 'FD', 'adephylo')
for (pkg in package.names) {
if (!require(pkg, character.only = TRUE, quietly = TRUE)) {
install.packages(pkg)
library(pkg, character.only = TRUE)
}
}
trMB <- ape::read.tree("Data/ALLMB.CCESR.tre")
#trMB$tip.label <- gsub(" ", "_", phy$tip.label)
#trMB$tip.label <- gsub("sp.", "sp", trMB$tip.label)
length(trMB$tip.label)
head(trMB$tip.label)
BBSraw <- read.csv("Data/BBSpecies.biomass.2014.csv")[2:5]
bio.dat <- BBSraw
head(bio.dat)
bio.dat$Species <- gsub(" ", "_", bio.dat$Species)
bio.dat$Plot.Year <- paste(bio.dat$Plot, bio.dat$Year, sep = ";", collapse = NULL)   #join plot and year
bio.dat <- bio.dat[, -c(1, 2)]
bio.dat <- bio.dat[, c(3, 1, 2)]
bio.dat$Species <- gsub("Petalostemum_purpureum", "Dalea_purpurea", bio.dat$Species)
bio.dat$Species <- gsub("Petalostemum_candidum", "Dalea_candida", bio.dat$Species)
bio.dat$Species <- gsub("Petalostemum_villosum", "Dalea_pulchra", bio.dat$Species)
bio.dat$Species <- gsub("Taraxicum_officinalis", "Taraxacum_croceum", bio.dat$Species)
bio.dat$Species <- gsub("Leptoloma_cognatum", "Digitaria_ciliaris", bio.dat$Species)
bio.dat$Species <- gsub("Artemisia_.caudata._campestris", "Artemisia_caudata", bio.dat$Species)
bio.dat$Species <- gsub("Achillea_millefolium.lanulosa.", "Achillea_millefolium", bio.dat$Species)
bio.dat$Species <- gsub("Euphorbia_.supina._maculata", "Euphorbia_supina", bio.dat$Species)
bio.dat$Species <- gsub("Tragopogon_dubius_.major.", "Tragopogon_dubius", bio.dat$Species)
bio.dat$Species <- gsub("Ambrosia_artemisiifolia_elatior", "Ambrosia_artemisiifolia", bio.dat$Species)
bio.dat$Species <- gsub("Andropogon_gerardi", "Andropogon_gerardii", bio.dat$Species)
bio.dat$Species <- gsub("Erigeron_canadensis", "Erigeron_canadense", bio.dat$Species)
oldsp <- c("Petalostemum_purpureum", "Petalostemum_candidum", "Petalostemum_villosum",
"Taraxicum_officinalis", "Leptoloma_cognatum", "Artemisia_.caudata._campestris",
"Achillea_millefolium.lanulosa.", "Euphorbia_.supina._maculata",
"Tragopogon_dubius_.major.",
"Ambrosia_artemisiifolia_elatior","Andropogon_gerardii", "Erigeron_canadensis")
newsp <- c("Dalea_purpurea", "Dalea_candida", "Dalea_pulchra",
"Taraxacum_croceum", "Digitaria_ciliaris", "Artemisia_caudata",
"Achillea_millefolium", "Euphorbia_supina", "Tragopogon_dubius",
"Ambrosia_artemisiifolia", "Andropogon_gerardii", "Erigeron_canadense")
for(i in 1:length(oldsp)){
cat("FROM", oldsp[i], "TO", newsp[i], "\n")
bio.dat$Species <- gsub(oldsp[i], newsp[i], bio.dat$Species)
}
#Get list of species in big bio
spnames <- unique(bio.dat$Species)
trMBcom <- drop.tip(trMB, setdiff(trMB$tip.label, spnames))
setdiff(spnames, trMBcom$tip.label)
bio.dat <- data.frame(na.omit(bio.dat))
head(bio.dat)
BBScom <- data.frame(sample2matrix(bio.dat))
BBScom[1:10, 1:10]
ls() # obtain the names of objects stored in the environment
rem <- ls()
rem
rm(list = rem[2:10])
matched <- picante::match.phylo.comm(phy = trMBcom, comm = BBScom)
plot(matched$phy, show.tip.label = FALSE)
sum(matched$phy$edge.length) #  sum of the total branch lengths in the community
BBSpd <- pd(matched$comm, matched$phy, include.root = FALSE) # Faith's PD
head(BBSpd)
cor.test(BBSpd$SR, BBSpd$PD)
plot(BBSpd$SR, BBSpd$PD, xlab = "Species richness", ylab = "PD (millions of years)",
pch = 16)
# MPD
dist.trMB <- cophenetic(matched$phy)
dist.trMB <- dist.trMB[lower.tri(dist.trMB, diag = FALSE)]
mean(dist.trMB)
# MNTD
dist.trMB2 <- cophenetic(matched$phy)
diag(dist.trMB2) <- NA
apply(dist.trMB2, 2, min, na.rm = TRUE)
mean(apply(dist.trMB2, 2, min, na.rm = TRUE))
apply(dist.trMB2, 2, min, na.rm = TRUE)
mean(apply(dist.trMB2, 2, min, na.rm = TRUE))
BBSmpd <- mpd(matched$comm, cophenetic(matched$phy)) # MPD
head(BBSmpd)
BBSmntd <- mntd(matched$comm, cophenetic(matched$phy)) # MPD
head(BBSmntd)
install.packages("neonUtilities")
# load packages
library(neonUtilities)
library(raster)
# Set global option to NOT convert all character variables to factors
options(stringsAsFactors=F)
setwd("Downloads")
packages <- c("picante", "dplyr", "tidyr", "picante", "lubridate",
"Taxonstand", "ape", "neonUtilities", "phytools")
# Install packages not yet installed
installed_packages <- packages %in% rownames(installed.packages())
if (any(installed_packages == FALSE)) {
install.packages(packages[!installed_packages], dependencies = TRUE)
}
if ( ! ("V.PhyloMaker" %in% installed.packages())) {remotes::install_github("jinyizju/V.PhyloMaker")}
lapply(packages, library, character.only = TRUE)
require(V.PhyloMaker)
packages <- c("picante", "dplyr", "tidyr", "picante", "lubridate",
"Taxonstand", "ape", "neonUtilities", "phytools", "vegan", "car")
# Install packages not yet installed
installed_packages <- packages %in% rownames(installed.packages())
if (any(installed_packages == FALSE)) {
install.packages(packages[!installed_packages], dependencies = TRUE)
}
if ( ! ("V.PhyloMaker" %in% installed.packages())) {remotes::install_github("jinyizju/V.PhyloMaker")}
lapply(packages, library, character.only = TRUE)
require(V.PhyloMaker)
?loadByProduct
# Set global option to NOT convert all character variables to factors
options(stringsAsFactors = F)
NEON_data <- loadByProduct(dpID = "DP1.10058.001",
site = c("HARV", "CPER","ABBY"),
package = "expanded", check.size = TRUE)
# type "y" (with no quotes) in your console to start downloading the data from NEON
names(NEON_data)
View(NEON_data$div_10m2Data100m2Data)
View(NEON_data$div_1m2Data)
# save raw data in your hard drive - this is a common practice that allow reproducibility
# and also save you a lot of time.
dir.create("Data")
dir.create("Data/NEON")
save(NEON_data, file = "Data/NEON/RawData_NEON_lab5.RData")
sel <- NEON_data$div_1m2Data %>%
select(namedLocation, domainID, siteID, plotType, plotID, subplotID, endDate,
taxonID, taxonRank, family, scientificName, nativeStatusCode,
percentCover, heightPlantSpecies)
unique(sel$namedLocation)
unique(sel$siteID)
unique(sel$endDate)
dim(sel)
sel <- sel %>%
drop_na(scientificName) %>%
mutate(Date = endDate) %>%
separate(endDate, sep = "-", into = c("Year", "Month", "Day"))
unique(sel$Year)
unique(sel$siteID)
HARV <- sel %>%
filter(siteID == "HARV" & Year == 2018)
unique(HARV$Year)
unique(HARV$siteID)
head(HARV)
View(HARV)
spp <- unique(HARV$scientificName) # vector with scientific names
# Perform taxonomic standardization on plant names (TPL table)
spp_check <- TPL(spp, infra = TRUE, corr = TRUE)
head(spp_check)
View(spp_check)
taxonomy <- spp_check %>%
drop_na(New.Genus, New.Species) %>%
select(Taxon, Family, New.Genus, New.Species, Tax_res)
HARV_data <- full_join(HARV, taxonomy, by = c("scientificName" = "Taxon"))
HARV_data <- HARV_data %>%
mutate(sciName = paste0(HARV_data$New.Genus, "_", HARV_data$New.Species)) %>%
select(siteID, plotID, subplotID, Tax_res, Family, sciName, percentCover) %>%
filter(Tax_res == "Species")
head(HARV_data)
save(HARV, HARV_data, taxonomy, file = "Data/NEON/CleanData_NEON_lab5.RData")
save(HARV, HARV_data, taxonomy, file = "Data/NEON/CleanData_NEON_lab5.RData")
rm(HARV, NEON_data, sel, spp_check, taxonomy, installed_packages, packages, spp)
HARV_mat <- sample2matrix(HARV_data[, c(2, 7, 6)])
nrow(HARV_mat)
ncol(HARV_mat)
?phylo.maker
sppPhylo <- HARV_data[, c(5, 6)]
# Prepare the taxonomy data to extract the phylogeny
sppPhylo <- sppPhylo %>%
mutate(family = Family) %>%
mutate(species = gsub("_" , " ", sciName)) %>%
separate(sciName, sep = "_", into = c("genus", "ephitet")) %>%
select(species, genus, family)
sppPhylo <- unique(sppPhylo[c("species", "genus", "family")])
head(sppPhylo)
result <- phylo.maker(sppPhylo, scenarios = "S3")
phylo <- multi2di(result$scenario.3)
is.binary.phylo(phylo)
is.ultrametric(phylo)
plot(phylo, show.tip.label = FALSE)
matched <- picante::match.phylo.comm(phy = phylo, comm = HARV_mat)
matched$phy
matched$comm
save(phylo, sppPhylo, result, file = "Data/NEON/Phylo_NEON_lab5.RData")
rm(sppPhylo, result)
matched$comm[1:10, 1:10]
plot(matched$phy, show.tip.label = FALSE)
sum(matched$phy$edge.length) #  sum of the total branch lengths in the community
HARVpd <- pd(matched$comm, matched$phy, include.root = FALSE) # Faith's PD
head(HARVpd)
rm(HARVpd)
HARV_PD <- pd(matched$comm, matched$phy, include.root = FALSE) # Faith's PD
head(HARV_PD)
cor.test(HARV_PD$SR, HARV_PD$PD)
plot(HARV_PD$SR, HARV_PD$PD, xlab = "Species richness",
ylab = "PD (millions of years)", pch = 16)
# MPD
dist.trMB <- cophenetic(matched$phy)
dist.trMB <- dist.trMB[lower.tri(dist.trMB, diag = FALSE)]
mean(dist.trMB)
# MNTD
dist.trMB2 <- cophenetic(matched$phy)
diag(dist.trMB2) <- NA
apply(dist.trMB2, 2, min, na.rm = TRUE)
mean(apply(dist.trMB2, 2, min, na.rm = TRUE))
HARV_MPD <- mpd(matched$comm, cophenetic(matched$phy)) # MPD
head(HARV_MPD)
HARV_MNTD <- mntd(matched$comm, cophenetic(matched$phy)) # MNTD
head(HARV_MNTD)
# We can also calculate the standardized effect size of PD in each community
HARV_CDM <- ses.pd(matched$comm, matched$phy, runs = 99)
HARV_CDM <- HARVcdm[, c(1, 2, 6, 7)]
# We can also calculate the standardized effect size of PD in each community
HARV_CDM <- ses.pd(matched$comm, matched$phy, runs = 99)
HARV_CDM <- HARV_CDM[, c(1, 2, 6, 7)]
head(HARV_CDM)
# Simpson's
HARV_CDM$RaoD <- raoD(matched$comm, force.ultrametric(matched$phy))$Dkk
View(HARV_CDM)
# SES-MPD
HARVsesmpd <- ses.mpd(matched$comm, cophenetic(matched$phy),
null.model = "taxa.labels", runs = 99)
HARVsesmpd
View(HARV_CDM)
HARV_CDM$mpd <- HARVsesmpd[, c(2)]
HARV_CDM$mpd.obs.z <- HARVsesmpd[, c(6)]
HARV_CDM$mpd.obs.p <- HARVsesmpd[, c(7)]
# SES-MNTD
HARVsesmntd <- ses.mntd(matched$comm, cophenetic(matched$phy),
null.model = "taxa.labels", runs = 99)
View(HARV_CDM)
HARV_CDM$mntd <- HARVsesmntd[, c(2)]
HARV_CDM$mntd.obs.z <- HARVsesmntd[, c(6)]
HARV_CDM$mntd.obs.p <- HARVsesmntd[, c(7)]
View(HARV_CDM)
# PSV or phylogenetic species variability
HARVpsv <- psv(matched$comm, matched$phy, compute.var = TRUE)
View(HARVpsv)
HARV_CDM$PSV <- HARVpsv[, 1]
View(HARV_CDM)
# PSR or phylogenetic species richness
HARVpsr <- psr(matched$comm, matched$phy, compute.var = TRUE)
HARV_CDM$PSR <- HARVpsr[, 1]
# PSR or phylogenetic species evenness
HARVpse <- pse(matched$comm, matched$phy)
HARV_CDM$PSE <- HARVpse[, 1]
View(HARV_CDM)
# Scheiner 2012 qD(p)
source("https://github.com/jesusNPL/BiodiversityScience/blob/master/Spring2021/R-Functions/qDp.R")
# Scheiner 2012 qD(p)
source("https://raw.githubusercontent.com/jesusNPL/BiodiversityScience/master/Spring2021/R-Functions/qDp.R")
HARVqDp <- qDp(matched$phy, matched$comm, q = 2)
HARV_CDM$qDP <-	HARVqDp
View(HARV_CDM)
head(HARV_CDM, 10)
names(HARV_CDM)
HARV_CDM_sel <- HARV_CDM %>%
select(ntaxa, pd.obs, RaoD, mpd, mntd, PSV, PSE, PSR, qDP)
head(HARV_CDM_sel)
scatterplotMatrix(HARV_CDM_sel)
cor.table(na.omit(HARV_CDM_sel))
plot(HARV_CDM_sel$MPD, HARV_CDM_sel$PSV, xlab = "MPD", ylab = "PSV", pch = 17)
plot(HARV_CDM_sel$mpd, HARV_CDM_sel$PSV, xlab = "MPD", ylab = "PSV", pch = 17)
HARV_mds <- metaMDS(na.omit(HARV_CDM_sel), trace = FALSE)
ordiplot(HARV_mds, type = "t", display = "species")
