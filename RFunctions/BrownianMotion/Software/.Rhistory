library(phytools)
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
X <- lapply(tree$edge.length,function(x) c(0,cumsum(rnorm(n=x,sd=sqrt(sig2)))))
sig2 <- 0.01
t <- 100 # total time
n <- 30 # total taxa
b <- (log(n)-log(2))/t
tree <- pbtree(b=b,n=n,t=t,type="discrete")
X <- lapply(tree$edge.length,function(x) c(0,cumsum(rnorm(n=x,sd=sqrt(sig2)))))
class(X)
runApp()
X
runApp()
runApp()
X <- lapply(tree$edge.length,function(x) c(0,cumsum(rnorm(n=x,sd=sqrt(sig2)))))
cw<-reorder(tree)
H<-nodeHeights(tree)
plot(H[1,1],X[[1]][1],ylim=range(X),xlim=range(H),xlab="time",ylab="phenotype")
for(i in 1:length(X)) lines(H[i,1]:H[i,2],X[[i]])
yy <- sapply(1:length(tree$tip.label),function(x,y) which(x==y),y=tree$edge[,2])
yy <- sapply(yy,function(x,y) y[[x]][length(y[[x]])],y=X)
text(x=max(H),y=yy,tree$tip.label)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
runApp()
shinyUI(fluidPage(
# Application title
titlePanel("Brownian Motion"),
# Sidebar for user input
sidebarLayout(
sidebarPanel(
# select how many generations to run
sliderInput("gens",
"Generations:",
min = 1,
max = 100,
value = 100),
# select the number of replicates
sliderInput("reps",
"Replicates:",
#library(phytools),
t <- 100, # total time
n <- 30, # total taxa
b <- (log(n)-log(2))/t,
tree <- pbtree(b=b,n=n,t=t,type="discrete"),
min = 1,
max = lapply(tree$edge.length,function(x) c(0,cumsum(rnorm(n=x,sd=sqrt(sig2))))),
value = max(lapply(tree$edge.length,function(x) c(0,cumsum(rnorm(n=x,sd=sqrt(sig2)))))))+10,
# select the rate of evolution
sliderInput("rate",
"Rate of evolution:",
min = 0,
max = 10,
value = 1),
# select the part to plot a histogram of
sliderInput("mon",
"Generation to plot:",
min = 10,
max = 500,
value = 100),
# refresh via a seed change
actionButton("seed.val", 'Refresh')
),
# Show a plot of the simulation result and make it a bit larger with height argument
mainPanel(
plotOutput("distPlot", height="700px")
)
)
))
runApp()
runApp()
library(shiny)
library(viridis)
library(phytools)
shinyServer(function(input, output) {
# this is the actual brownian motion simulation
x <- reactive({
# insure reproducability
set.seed <- input$seed.val
#library(phytools)
t <- 100 # total time
n <- 30 # total taxa
b <- (log(n)-log(2))/t
tree <- pbtree(b=b,n=n,t=t,type="discrete")
replicate(input$reps, cumsum(rnorm(n=input$gens, sd=input$rate)))
})
# Now we will build the output plot
output$distPlot <- renderPlot({
# we will have two plots
par(mfcol=c(2,1))
# need a bit more room
par(mar=c(3,2,1,1))
# this just keeps our color variation from being hidden when itterations++
t <- 100 # total time
n <- 30 # total taxa
b <- (log(n)-log(2))/t
tree <- pbtree(b=b,n=n,t=t,type="discrete")
cols <- sample(viridis(input$reps))
# the primary plot
matplot(x(),type="l",lty=1, lwd=1.5, col=cols, main="Brownian Motion", ylab="Trait Value", xlab="Generations")
# this line will indicate what is being plotted in the histogram below
abline(v=input$mon, lwd=3, col="red")
# now we plot the distribution switched from a histrogram this looks prettier IMHO
plot(density(x()[input$mon,]),
xlim=c(min(x()),max(x())),
col = 'black',
xlab="Trait value",
ylab="",
lwd=3,
main=paste("Trait distribution at generation", input$mon))
})
})
runApp()
tree <- pbtree(b=b,n=n,t=t,type="discrete")
t <- 100 # total time
n <- 30 # total taxa
b <- (log(n)-log(2))/t
tree <- pbtree(b=b,n=n,t=t,type="discrete")
runApp()
runApp()
shinyUI(fluidPage(
# Application title
titlePanel("Brownian Motion"),
# Sidebar for user input
sidebarLayout(
sidebarPanel(
# select how many generations to run
sliderInput("gens",
"Generations:",
min = 1,
max = 100,
value = 100),
# select the number of replicates
sliderInput("reps",
"Replicates:",
#library(phytools),
t<-0:100, # time
sig2<-0.01,
t <- 100, # total time
n <- 30, # total taxa
b <- (log(n)-log(2))/t,
tree <- pbtree(b=b,n=n,t=t,type="discrete"),
min = 1,
max = lapply(tree$edge.length,function(x) c(0,cumsum(rnorm(n=x,sd=sqrt(sig2))))),
value = max(lapply(tree$edge.length,function(x) c(0,cumsum(rnorm(n=x,sd=sqrt(sig2)))))))+10,
# select the rate of evolution
sliderInput("rate",
"Rate of evolution:",
min = 0,
max = 10,
value = 1),
# select the part to plot a histogram of
sliderInput("mon",
"Generation to plot:",
min = 10,
max = 500,
value = 100),
# refresh via a seed change
actionButton("seed.val", 'Refresh')
),
# Show a plot of the simulation result and make it a bit larger with height argument
mainPanel(
plotOutput("distPlot", height="700px")
)
)
))
t<-0:100 # time
sig2<-0.01
t <- 100 # total time
n <- 30 # total taxa
b <- (log(n)-log(2))/t
tree <- pbtree(b=b,n=n,t=t,type="discrete")
cols <- sample(viridis(input$reps))
runApp()
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
tree.func <- function(t, n, b, tree){
library(phytools)
t <- 100
n <- 30
b <- (log(n)-log(2))/t
tree <- pbtree(b = b, n=n, t=t, type = "discrete")
return(tree)
}
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
