dev.off()
dev.off()
dev.off()
points(que_vir$Longitude, que_vir$Latitude, pch = 15)
plot(wrld_simpl, add = TRUE)
window()
windows()
Windows()
x11()
points(que_vir$Longitude, que_vir$Latitude, pch = 15)
plot(wrld_simpl, add = TRUE)
points(que_vir$Longitude, que_vir$Latitude, pch = 15)
plot(wrld_simpl, add = TRUE)
dev.off()
dev.off()
dev.off()
points(que_vir$Longitude, que_vir$Latitude, pch = 15)
plot(wrld_simpl, add = TRUE)
points(que_vir$Longitude, que_vir$Latitude, pch = 15)
points(que_vir$Longitude, que_vir$Latitude, pch = 15)
points(que_vir$Longitude, que_vir$Latitude, pch = 15)
{points(que_vir$Longitude, que_vir$Latitude, pch = 15)
plot(wrld_simpl, add = TRUE)}
{points(que_vir$Longitude, que_vir$Latitude, pch = 15)
plot(wrld_simpl, add = TRUE)}
{points(que_vir$Longitude, que_vir$Latitude, pch = 15)
plot(wrld_simpl, add = TRUE)}
oaks_dups <- duplicated(oaks[, c(2:3)])
### NOTE: the function "duplicated" returns the results of a logical test (e.g. TRUE or FALSE)
# How many are duplicates?
length(which(oaks_dups == TRUE))
# How many are NOT duplicates?
length(which(oaks_dups == FALSE))
# Keep only those lines that are not duplicates
oaks_dups_row <- which(oaks_dups == TRUE)
# What's the size? That is, how many points are duplicates
length(oaks_dups_row)
# Create another object withoyt the duplicate records
oaks_nodups <- oaks[-oaks_dups_row,]
# What are the dimensions of the new object?
dim(oaks_nodups)
# Take a look at the first rows of data
head(oaks_nodups)
plot(oaks$Longitude, oaks$Latitude, pch = 19, col = "red", cex = 2)
points(oaks_nodups$Longitude, oaks_nodups$Latitude, pch = 16, col = "black")
{plot(oaks$Longitude, oaks$Latitude, pch = 19, col = "red", cex = 2)
points(oaks_nodups$Longitude, oaks_nodups$Latitude, pch = 16, col = "black")}
# create a polygon around the species' records
oaks_hull <- convHull(oaks_nodups[, c(2:3)])
require(dismo)
# create a polygon around the species' records
oaks_hull <- convHull(oaks_nodups[, c(2:3)])
# Plot the created polygon
{plot(oaks_hull)
points(oaks_nodups$Longitude, oaks_nodups$Latitude, pch = 16, col = "black")}
que_vir <- subset(oaks_nodups, oaks_nodups$Species == "Quercus_virginiana")
{plot(que_vir_hull)
points(que_vir$Longitude, que_vir$Latitude, pch = 16, col = "black")}
que_vir_hull <- convHull(que_vir[, c(2:3)])
{plot(que_vir_hull)
points(que_vir$Longitude, que_vir$Latitude, pch = 16, col = "black")}
{plot(oaks_hull)
points(oaks_nodups$Longitude, oaks_nodups$Latitude, pch = 16, col = "black")
plot(que_vir_hull, add = TRUE)
points(que_vir$Longitude, que_vir$Latitude, pch = 16, col = "red")
plot(wrld_simpl, add = TRUE)}
{plot(oaks[c(2:3)], col = "blue", pch = 19)
plot(wrld_simpl, add = TRUE)}
{points(que_vir$Longitude, que_vir$Latitude, pch = 15)
plot(wrld_simpl, add = TRUE)}
{plot(que_vir$Longitude, que_vir$Latitude, pch = 15)
plot(wrld_simpl, add = TRUE)}
que_vir_alphahull <- getDynamicAlphaHull(que_vir, fraction = 0.95,
coordHeaders = c("Longitude", "Latitude"),
clipToCoast = 'no')[[1]]
{plot(que_vir_alphahull, lwd = 2)
plot(que_vir_hull, add = TRUE, lwd = 2, lty = 2, col = "red")
points(que_vir$Longitude, que_vir$Latitude, pch = 16, col = "green")
plot(wrld_simpl, add = TRUE, lwd = 2)}
{plot(que_vir_alphahull, lwd = 2, col "red")
{plot(que_vir_alphahull, lwd = 2, col = "red")
plot(que_vir_hull, add = TRUE, lwd = 2, lty = 2)
points(que_vir$Longitude, que_vir$Latitude, pch = 16, col = "green")
plot(wrld_simpl, add = TRUE, lwd = 2)}
franges <- readShapePoly("Data/Franges/Furnarii_ranges_geo.shp")
str(franges)
neo_ras <- raster()
# Set the raster "extent"
extent(neo_ras) <- extent(franges)
res(neo_ras) <- 1
neo_ras
values(neo_ras) <- 0
{plot(f_sr_raster)
plot(wrld_simpl, add = T)}
f_sr_raster <- rasterize(franges, neo_ras, field = "SCINAME", fun = function(x,...){length(unique(na.omit(x)))})
{plot(f_sr_raster)
plot(wrld_simpl, add = T)}
#change the color scale
colfuncYellows <- colorRampPalette(c("#d7191c", "#fdae61", "#ffffbf", "#abd9e9",
"#2c7bb6"))
{plot(f_sr_raster, col = rev(colfuncYellows(100)), axes = FALSE, box = FALSE,
zlim = c(minValue(f_sr_raster), maxValue(f_sr_raster)),
xlab = "Furnariides richness", legend.width = 2)
plot(wrld_simpl, add = T)}
head(franges@data)
f_MRD_raster <- rasterize(franges, neo_ras, field = "RD", fun = mean)
{plot(f_MRD_raster)
plot(wrld_simpl, add = T)}
{plot(f_MRD_raster, col = rev(colfuncYellows(100)), axes = FALSE, box = FALSE,
zlim = c(minValue(f_MRD_raster), maxValue(f_MRD_raster)),
xlab = "Furnariides mean root distance", legend.width = 2)
plot(wrld_simpl, add = T)}
{par(mfrow = c(1, 2))
plot(f_sr_raster, col = rev(colfuncYellows(100)), axes = FALSE, box = FALSE,
zlim = c(minValue(f_sr_raster), maxValue(f_sr_raster)),
xlab = "Furnariides richness", legend.width = 2)
plot(f_MRD_raster, col = rev(colfuncYellows(100)), axes = FALSE, box = FALSE,
zlim = c(minValue(f_MRD_raster), maxValue(f_MRD_raster)),
xlab = "Furnariides mean root distance", legend.width = 2)}
# 2ยบ degrees
neo_ras_2dg <- raster()
# Set the raster "extent"
extent(neo_ras_2dg) <- extent(franges)
res(neo_ras_2dg) <- 2
neo_ras_2dg
values(neo_ras_2dg) <- 0
# 4ยบ degrees
neo_ras_4dg <- raster()
# Set the raster "extent"
extent(neo_ras_4dg) <- extent(franges)
res(neo_ras_4dg) <- 4
neo_ras_4dg
values(neo_ras_4dg) <- 0
f_sr_2dg_raster <- rasterize(franges, neo_ras_2dg, field = "SCINAME", fun = function(x,...){length(unique(na.omit(x)))})
f_sr_2dg_raster <- rasterize(franges, neo_ras_2dg, field = "SCINAME", fun = function(x,...){length(unique(na.omit(x)))})
f_sr_4dg_raster <- rasterize(franges, neo_ras_4dg, field = "SCINAME", fun = function(x,...){length(unique(na.omit(x)))})
{par(mfrow = c (1, 3))
plot(f_sr_raster, main = "Furnariides richness 1dg")
plot(wrld_simpl, add = T)
plot(f_sr_2dg_raster, main = "Furnariides richness 2dg")
plot(wrld_simpl, add = T)
plot(f_sr_4dg_raster, main = "Furnariides richness 4dg")
plot(wrld_simpl, add = T)}
bio1 <- raster("Data/Envi/bio1.bil")
bio1
bio12 <- raster("Data/Envi/bio12.bil")
bio12
{par(mfrow = c(2, 1))
plot(bio1)
plot(bio12)}
bio1_neo <- crop(bio1, extent(franges))
bio12_neo <- crop(bio12, extent(franges))
{par(mfrow = c(1, 2))
plot(bio1_neo, main = "Annual Mean Temperature")
plot(bio12_neo, main = "Annual Precipitation")}
f_ras_coords <- xyFromCell(f_sr_raster, 1:length(values(f_sr_raster)))
f_ras_bio1 <- extract(bio1_neo, f_ras_coords)
f_ras_bio12 <- extract(bio12_neo, f_ras_coords)
f_ras_rich <- values(f_sr_raster)
fdata <- na.omit(data.frame(f_ras_coords, f_ras_rich, f_ras_bio1, f_ras_bio12))
cor.test(fdata$f_ras_rich, fdata$f_ras_bio1)
cor.test(fdata$f_ras_rich, fdata$f_ras_bio12)
{par(mfrow = c(1, 2))
plot(fdata$f_ras_bio1, fdata$f_ras_rich, xlab = "Bio 1", ylab = "Richness")
plot(fdata$f_ras_bio12, fdata$f_ras_rich, xlab = "Bio 12", ylab = "Richness")}
fols <- lm(f_ras_rich ~ f_ras_bio1 + f_ras_bio12, data = fdata)
summary(fols)
autocor_SR <- ncf::correlog(fdata$x, fdata$y, z = fdata$f_ras_rich, na.rm = T,
increment = 1, resamp = 1)
plot(autocor_SR$correlation[1:50], type = "b", pch = 1, cex = 1.2, lwd = 1.5,
ylim = c(-1, 1), xlab = "Distance class", ylab = "Moran's I", cex.lab = 1.2,
cex.axis = 1.2)
{plot(autocor_SR$correlation[1:50], type = "b", pch = 1, cex = 1.2, lwd = 1.5,
ylim = c(-1, 1), xlab = "Distance class", ylab = "Moran's I", cex.lab = 1.2,
cex.axis = 1.2)
abline(h = 0)}
coords <- fdata[1:2]
coords <- as.matrix(coords)
nb1.5 <- dnearneigh(coords, 0, 1.5)
nb1.5.w <- nb2listw(nb1.5, glist = NULL, style = "W", zero.policy = TRUE)
residuals_ols <- residuals(fols)
plot(residuals_ols)
autocor_ols_res <- correlog(fdata$x, fdata$y, z = residuals(fols),
increment = 1, resamp = 1)
{plot(autocor_ols_res$correlation[1:50], type = "b", pch = 1, cex = 1.2, lwd = 1.5,
ylim = c(-0.5, 1), xlab = "distance", ylab = "Moran's I", cex.lab = 1.5,
cex.axis = 1.2)
abline(h = 0)
title(main = "OLS residuals", cex = 1.5)}
{par(mfrow = c(2, 1))
plot(autocor_SR$correlation[1:50], type = "b", pch = 1, cex = 1.2, lwd = 1.5,
ylim = c(-1, 1), xlab = "Distance class", ylab = "Moran's I", cex.lab = 1.2,
cex.axis = 1.2)
title(main = "OLS model", cex = 1.5)
plot(autocor_ols_res$correlation[1:50], type = "b", pch = 1, cex = 1.2, lwd = 1.5,
ylim = c(-0.5, 1), xlab = "Distance class", ylab = "Moran's I", cex.lab = 1.5,
cex.axis = 1.2)
abline(h = 0)
title(main = "OLS residuals", cex = 1.5)}
sar_nb1.5.w <- errorsarlm(fols, listw = nb1.5.w, data = fdata, quiet = FALSE,
zero.policy = TRUE)
summary(sar_nb1.5.w)
residuals_sar_nb1.5.w <- residuals(sar_nb1.5.w)
{plot(autocor_sar_nb1.5.w$correlation[1:50], type = "b", pch = 4, cex = 1.2, lwd = 1.5,
ylim = c(-0.5, 1), xlab = "distance", ylab = "Moran's I", cex.lab = 1.5,
cex.axis = 1.2)
abline(h = 0)
title(main = "Correlogram SARerr", cex = 1.5)}
autocor_sar_nb1.5.w <- correlog(fdata$x, fdata$y, z = residuals(sar_nb1.5.w),
na.rm = T, increment = 1, resamp = 1)
{plot(autocor_sar_nb1.5.w$correlation[1:50], type = "b", pch = 4, cex = 1.2, lwd = 1.5,
ylim = c(-0.5, 1), xlab = "distance", ylab = "Moran's I", cex.lab = 1.5,
cex.axis = 1.2)
abline(h = 0)
title(main = "Correlogram SARerr", cex = 1.5)}
{par(mfrow = c(2, 1))
plot(autocor_ols_res$correlation[1:50], type = "b", pch = 1, cex = 1.2, lwd = 1.5,
ylim = c(-0.5, 1), xlab = "distance", ylab = "Moran's I", cex.lab = 1.5,
cex.axis = 1.2)
abline(h = 0)
title(main = "OLS residuals", cex = 1.5)
plot(autocor_sar_nb1.5.w$correlation[1:50], type = "b", pch = 4, cex = 1.2, lwd = 1.5,
ylim = c(-0.5, 1), xlab = "distance", ylab = "Moran's I", cex.lab = 1.5,
cex.axis = 1.2)
abline(h = 0)
title(main = "Correlogram SARerr", cex = 1.5)}
summary(sar_nb1.5.w)
summary(sar_nb1.5.w)
summary(fols)
source("https://raw.githubusercontent.com/jesusNPL/BetaDivNA/master/SARr2.R")
SARr2(Lfull = sar_nb1.5.w$LL, Lnull = sar_nb1.5.w$logLik_lm.model, N = nrow(fdata))
df <- read.csv("Data/BEF_Lesson_Data.csv",header=T)
View(df)
df <- read.csv("Data/BEF_Lesson_Data.csv",header=T)
names(df)
dim(df)
library(ggplot2)
library(plyr)
###
#let's simulate a diversity experiment with monocultures and polycultures
###
set.seed(2202)
mono <- 8
n <- 8
adf <- data.frame(sp = sort(rep(c(LETTERS()[1:mono], "Poly"), n)),
div = c(rep(1,mono*n), rep(mono,n)))
adf <- data.frame(sp = sort(rep(c(letters()[1:mono], "Poly"), n)),
div = c(rep(1,mono*n), rep(mono,n)))
adf <- data.frame(sp = sort(rep(c(LETTERS()[1:mono], "Poly"), n)),
div = c(rep(1,mono*n), rep(mono,n)))
library(plyr)
library(ggplot2)
###
#let's simulate a diversity experiment with monocultures and polycultures
###
set.seed(2202)
mono <- 8
n <- 8
adf <- data.frame(sp = sort(rep(c(LETTERS()[1:mono], "Poly"), n)),
div = c(rep(1,mono*n), rep(mono,n)))
rep(c(LETTERS()[1:mono], "Poly"), n)
LETTERS()
adf <- data.frame(sp = sort(rep(c(base::LETTERS()[1:mono], "Poly"), n)), div = c(rep(1,mono*n), rep(mono,n)))
?LETTERS
LETTERS()
LETTERS(1:mono)
###
#let's simulate a diversity experiment with monocultures and polycultures
###
set.seed(2202)
mono <- 8
n <- 8
adf <- data.frame(sp = sort(rep(c(LETTERS()[1:mono], "Poly"), n)), div = c(rep(1,mono*n), rep(mono,n)))
1:mono
adf <- data.frame(sp = sort(rep(c(LETTERS[1:mono], "Poly"), n)), div = c(rep(1,mono*n), rep(mono,n)))
adf
#### we sample some compositional effect from a random distribution for ALL treatments
#### there is no biology here - just that each composition has some random variation
adf$compEffect <- 3.5*as.vector(replicate(mono+1, rep(rnorm(1), n)))
#now we calculate the yield where there is a linear
adf$y <- adf$compEffect + rnorm(nrow(adf), adf$div)
qplot(div, y, data=adf) + theme_bw()+stat_smooth(method="lm")
library(ggplot2)
library(plyr)
qplot(div, y, data=adf) + theme_bw()+stat_smooth(method="lm")
summary(lm(y~div, data=adf))
#look at the mono/poly difference visually
adfSummarized <- ddply(adf, c("sp", "div"), summarise, ymean = mean(y), ymin=quantile(y, 0.025), ymax=quantile(y,0.975))
ggplot(adfSummarized, aes(x=sp, y=ymean, ymin=ymin, ymax=ymax)) + geom_pointrange() + theme_bw()
intPolyLevels <- choose(mono,mono-1)
intPoly <- rep(combn(LETTERS[1:mono], mono-1, FUN=function(x) paste(x, collapse="")), n)
polyCompEffect <- rep(rnorm(intPolyLevels)*3.5, n)
polyY <- polyCompEffect + rnorm(length(intPoly), mono-1)
#now, let's see what would have happened with intermediate treatments
#let's look at the new experiment
adf <- rbind(adf, data.frame(sp=intPoly, div=mono-1, compEffect=polyCompEffect, y=polyY))
qplot(div, y, data=adf) + theme_bw()+stat_smooth(method="lm")
summary(lm(y~div, data=adf))
##
#now let's look at everything by treatment
##
adfSummarized <- ddply(adf, c("sp", "div"), summarise, ymean = mean(y), ymin=quantile(y, 0.025), ymax=quantile(y,0.975))
ggplot(adfSummarized, aes(x=sp, y=ymean, ymin=ymin, ymax=ymax)) + geom_pointrange() + theme_bw()
###
#let's simulate a diversity experiment with monocultures and polycultures
###
set.seed(2202)
mono <- 8
n <- 8
SIMdf <- data.frame(sp = sort(rep(c(LETTERS[1:mono], "Poly"), n)),
div = c(rep(1, mono*n), rep(mono, n)))
#### we sample some compositional effect from a random distribution for ALL treatments
#### there is no biology here - just that each composition has some random variation
SIMdf$compEffect <- 3.5*as.vector(replicate(mono+1, rep(rnorm(1), n)))
#now we calculate the yield where there is a linear
SIMdf$y <- SIMdf$compEffect + rnorm(nrow(SIMdf), SIMdf$div)
qplot(div, y, data = SIMdf) + theme_bw()+stat_smooth(method = "lm")
summary(lm(y ~ div, data = SIMdf))
#look at the mono/poly difference visually
SIMdfSummarized <- ddply(SIMdf, c("sp", "div"), summarise, ymean = mean(y),
ymin = quantile(y, 0.025), ymax = quantile(y, 0.975))
ggplot(SIMdfSummarized, aes(x = sp, y = ymean, ymin = ymin, ymax = ymax)) +
geom_pointrange() + theme_bw()
intPolyLevels <- choose(mono, mono-1)
intPoly <- rep(combn(LETTERS[1:mono], mono-1, FUN = function(x) paste(x, collapse = "")), n)
polyCompEffect <- rep(rnorm(intPolyLevels)*3.5, n)
polyY <- polyCompEffect + rnorm(length(intPoly), mono-1)
#now, let's see what would have happened with intermediate treatments
#let's look at the new experiment
SIMdf <- rbind(SIMdf, data.frame(sp = intPoly, div = mono-1,
compEffect = polyCompEffect, y = polyY))
qplot(div, y, data = SIMdf) + theme_bw()+stat_smooth(method = "lm")
summary(lm(y ~ div, data = SIMdf))
##
#now let's look at everything by treatment
##
SIMdfSummarized <- ddply(SIMdf, c("sp", "div"), summarise,
ymean = mean(y), ymin = quantile(y, 0.025), ymax = quantile(y,0.975))
ggplot(SIMdfSummarized, aes(x = sp, y = ymean, ymin = ymin, ymax = ymax)) +
geom_pointrange() + theme_bw()
comp.cols <- c(rep("red", 12), rep("orange", 28), rep("yellow", 10), rep("green", 1))
with(df, plot(Comp, d_Y, col = comp.cols))
library(agricolae)
comp.cols <- c(rep("red", 12), rep("orange", 28), rep("yellow", 10), rep("green", 1))
with(df, plot(Comp, d_Y, col = comp.cols))
comp.cols <- c(rep("red", 12), rep("orange", 28), rep("yellow", 10), rep("green", 1))
with(df, plot(Comp, d_Y, col = comp.cols))
df <- read.csv("Data/BEF_Lesson_Data.csv",header=T)
names(df)
dim(df)
comp.cols <- c(rep("red", 12), rep("orange", 28), rep("yellow", 10), rep("green", 1))
with(df, plot(Comp, d_Y, col = comp.cols))
m1 <- lm(d_Y ~ Comp, data = df)
summary(m1)
anova(m1) # Use an ANOVA for categorical data
m1.df <- HSD.test(m1, "Comp", group = TRUE, console = TRUE)
with(df,plot(SR,d_Y)) #It's a little hard to assess the pattern graphically
m2 <- lm(d_Y ~ SR, data = df)
summary(m2) #A linear model indicates "no"
anova(m2) #ANOVA confirms this.
anova(m2) #ANOVA confirms this.
with(df, plot(Comp, NBE, col = comp.cols))
m3 <- lm(NBE ~ Comp, data = df)
summary(m3)
anova(m3)
m3.df<- HSD.test(m3, "Comp", group = TRUE, console = TRUE)
with(df, plot(SR, NBE)) #Note: it doesn't make sense to plot NBE of monocultures
m4 <- lm(NBE ~ SR, data = df)
summary(m4)
anova(m4)
m4.df <- HSD.test(m4, "SR", group = TRUE, console = TRUE)
with(df, plot(SR, CE))
m5 <- lm(CE ~ SR, data = df)
summary(m5)
anova(m5)
m5.df <- HSD.test(m5, "SR", group = TRUE, console = TRUE)
with(df, plot(SR, SE))
m6 <- lm(SE ~ SR, data = df)
summary(m6)
anova(m6)
m6.df <- HSD.test(m6, "SR", group = TRUE, console = TRUE)
with(df, plot(SR, CE, col = "blue"))
with(df, points(SR, SE, col = "red"))
abline(h = 0) #Just to make it easier to tell positive from negative
with(df, plot(SR, d_Y, ylim = c(-0.05, 0.25)))
#and add a horizontal line:
abline(h = 0)
m4 <- lm(NBE ~ SR, data = df)
summary(m4) #This is our old friend from question 2.
m7 <- lm(NBE ~ PSV, data = df)
summary(m7) # What about phylogenetic diversity?
m8 <- lm(NBE ~ FDis, data = df)
summary(m8) # Or functional diversity?
library(ggplot2)
library(plyr)
###
#let's simulate a diversity experiment with monocultures and polycultures
###
set.seed(2202)
mono <- 8
n <- 8
SIMdf <- data.frame(sp = sort(rep(c(LETTERS[1:mono], "Poly"), n)),
div = c(rep(1, mono*n), rep(mono, n)))
head(SIMdf)
SIMdf
3.5*as.vector(replicate(mono+1, rep(rnorm(1), n)))
#### we sample some compositional effect from a random distribution for ALL treatments
#### there is no biology here - just that each composition has some random variation
SIMdf$compEffect <- 3.5*as.vector(replicate(mono+1, rep(rnorm(1), n)))
SIMdf$compEffect + rnorm(nrow(SIMdf), SIMdf$div)
#now we calculate the yield where there is a linear
SIMdf$y <- SIMdf$compEffect + rnorm(nrow(SIMdf), SIMdf$div)
head(SIMdf)
qplot(div, y, data = SIMdf) + theme_bw()+stat_smooth(method = "lm")
summary(lm(y ~ div, data = SIMdf))
ddply(SIMdf, c("sp", "div"), summarise, ymean = mean(y),
ymin = quantile(y, 0.025), ymax = quantile(y, 0.975))
#look at the mono/poly difference visually
SIMdfSummarized <- ddply(SIMdf, c("sp", "div"), summarise, ymean = mean(y),
ymin = quantile(y, 0.025), ymax = quantile(y, 0.975))
ggplot(SIMdfSummarized, aes(x = sp, y = ymean, ymin = ymin, ymax = ymax)) +
geom_pointrange() + theme_bw()
intPolyLevels <- choose(mono, mono-1)
choose(mono, mono-1)
intPolyLevels
mono-1
LETTERS[1:mono]
rep(combn(LETTERS[1:mono], mono-1, FUN = function(x) paste(x, collapse = "")), n)
intPoly <- rep(combn(LETTERS[1:mono], mono-1, FUN = function(x) paste(x, collapse = "")), n)
rep(rnorm(intPolyLevels)*3.5, n)
polyCompEffect <- rep(rnorm(intPolyLevels)*3.5, n)
polyY <- polyCompEffect + rnorm(length(intPoly), mono-1)
polyY
polyY <- polyCompEffect + rnorm(length(intPoly), mono-1)
#now, let's see what would have happened with intermediate treatments
#let's look at the new experiment
SIMdf <- rbind(SIMdf, data.frame(sp = intPoly, div = mono-1,
compEffect = polyCompEffect, y = polyY))
SIMdf
qplot(div, y, data = SIMdf) + theme_bw()+stat_smooth(method = "lm")
summary(lm(y ~ div, data = SIMdf))
##
#now let's look at everything by treatment
##
SIMdfSummarized <- ddply(SIMdf, c("sp", "div"), summarise,
ymean = mean(y), ymin = quantile(y, 0.025), ymax = quantile(y,0.975))
ggplot(SIMdfSummarized, aes(x = sp, y = ymean, ymin = ymin, ymax = ymax)) +
geom_pointrange() + theme_bw()
datoG0 <- read.table("Data/Environment/bio_var_CCSM_0k_global.txt", h = T)
head(datoG0)
datoG0[1:5, 1:5]
dim(datoG0)
str(datoG0)
summary(datoG0)
class(datoG0)
names(datoG0)
gridded(datoG0) <- ~long+lat
library(vegan)
library(vegan)
library(raster)
library(psych)
library(maps)
library(maptools)
library(kernlab)
gridded(datoG0) <- ~long+lat
class(datoG0)
clima0k <- stack(datoG0)
plot(clima0k$bio.1)
map(add = T)
plot(clima0k$bio.1)
map(add = T)
library(vegan)
library(raster)
library(sp)
library(psych)
library(maps)
library(maptools)
library(kernlab)
datoG0 <- read.table("Data/Environment/bio_var_CCSM_0k_global.txt", h = T)
head(datoG0)
datoG0[1:5, 1:5]
dim(datoG0)
str(datoG0)
summary(datoG0)
class(datoG0)
names(datoG0)
gridded(datoG0) <- ~long+lat
class(datoG0)
clima0k <- stack(datoG0)
plot(clima0k$bio.1)
map(add = T)
# Set a geographical extension (Sur America long = -90, -30, lat = -60, 15)
e <- extent(c(-90, -30, -60, 15))
clima0k.SA <- crop(clima0k, e)
plot(clima0k.sa$bio.9)
clima0k.SA <- crop(clima0k, e)
plot(clima0k.sa$bio.9)
plot(clima0k.SA$bio.9)
map(add = T)
ncell(clima0k.sa)
ncell(clima0k.SA)
SA0k <- values(clima0k.sa)
SA0k <- values(clima0k.SA)
class(SA0k)
coord.SA <- xyFromCell(clima0k.SA, 1:ncell(clima0k.SA))
SA0k <- cbind(coord.SA, SA0k)
# observar valores de lineas y columnas especificas
SA0k[1:5,]
SA0k[1:5, 1:5]
# Variable selection (exceute a factorial analysis [FA])
fa.parallel(SA0k[, -c(1:3)])
SA0k.fa <- fa(SA0k[, -c(1:3)], nfactors = 5, rotate = "varimax")
