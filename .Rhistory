plot(f_sr_raster, main = "Furnariides richness 1dg")
plot(wrld_simpl, add = T)
par(mfrow = c (1, 3))
par(mfrow = c (1, 3))
plot(f_sr_raster, main = "Furnariides richness 1dg")
plot(wrld_simpl, add = T)
plot(f_sr_2dg_raster, main = "Furnariides richness 2dg")
plot(wrld_simpl, add = T)
plot(f_sr_4dg_raster, main = "Furnariides richness 4dg")
plot(wrld_simpl, add = T)
cor.test(values(f_sr_raster), values(f_sr_2dg_raster))
bio1 <- raster("Data/Envi/bio1.bil")
bio12 <- raster("Data/Envi/bio12.bil")
plot(bio1)
bio1
bio12
?crop
bio1_neo <- crop(bio1, extent(franges))
bio12_neo <- crop(bio12, extent(franges))
plot(bio1_neo)
par(mfrow = c(1, 2))
plot(bio1_neo)
plot(bio12_neo)
plot(bio1_neo, main = "Annual Mean Temperature")
plot(bio12_neo, main = "Annual Precipitation")
f_ras_coords <- xyFromCell(f_sr_raster, 1:length(values(f_sr_raste)))
f_ras_coords <- xyFromCell(f_sr_raster, 1:length(values(f_sr_raster)))
f_ras_bio12 <- extract(bio12_neo, f_ras_coords)
f_ras_rich <- values(f_sr_raster)
f_ras_bio1 <- extract(bio1_neo, f_ras_coords)
fdata <- data.frame(f_ras_rich, f_ras_bio1, f_ras_bio12)
View(fdata)
fdata <- data.frame(f_ras_coords, f_ras_rich, f_ras_bio1, f_ras_bio12)
View(fdata)
f_ras_rich_noNA <- ifelse(is.na(f_ras_rich), 0, f_ras_rich)
f_ras_bio1_noNA <- ifelse(is.na(f_ras_bio1), 0, f_ras_bio1)
f_ras_bio12_noNA <- ifelse(is.na(f_ras_bio12), 0, f_ras_bio12)
fdata_noNA <- data.frame(f_ras_coords, f_ras_rich_noNA, f_ras_bio1_noNA,
f_ras_bio12_noNA)
View(fdata_noNA)
cor.test(fdata$f_ras_rich, fdata$f_ras_bio1)
cor.test(fdata$f_ras_rich, fdata$f_ras_bio12)
plot(fdata$f_ras_rich, fdata$f_ras_bio1)
plot(fdata$f_ras_bio1, fdata$f_ras_rich)
plot(fdata$f_ras_bio12, fdata$f_ras_rich)
plot(fdata$f_ras_bio1, fdata$f_ras_rich, xlab = "Bio 1", ylab = "Richness")
plot(fdata$f_ras_bio12, fdata$f_ras_rich, xlab = "Bio 12", ylab = "Richness")
par(mfrow = c(1, 2))
plot(fdata$f_ras_bio1, fdata$f_ras_rich, xlab = "Bio 1", ylab = "Richness")
plot(fdata$f_ras_bio12, fdata$f_ras_rich, xlab = "Bio 12", ylab = "Richness")
head(fdata)
fols <- lm(f_ras_rich ~ f_ras_bio1 + f_ras_bio12, data = na.omit(fdata))
summary(fols)
cor.SR <- correlog(fdata[,c(1:2)], z = fdata[, 3], method = "Moran", data = na.omit(fdata))
library(spdep)             #http://cran.r-project.org/src/contrib/PACKAGES.html
library(ncf)
cor.SR <- correlog(fdata[,c(1:2)], z = fdata[, 3], method = "Moran", data = na.omit(fdata))
cor.SR <- correlog(fdata[,c(1:2)], z = fdata[, 3], method = "Moran")
?correlog
cor.SR <- correlog(fdata[,c(1:2)], z = fdata[, 3])
cor.SR <- correlog(fdata[,c(1:2)], z = fdata[, 3], na.rm = TRUE)
plot(cor.SR)
autocor_SR <- ncf::correlog(fdata$x, fdata$y, z = fdata$f_ras_rich, na.rm = T,
increment = 1, resamp = 1)
plot(autocor_SR$correlation[1:50], type = "b", pch = 1, cex = 1.2, lwd = 1.5,
ylim = c(-1, 1), xlab = "Distance class", ylab = "Moran's I", cex.lab = 1.2,
cex.axis = 1.2)
abline(h = 0)
plot(autocor_SR$correlation[1:50], type = "b", pch = 1, cex = 1.2, lwd = 1.5,
ylim = c(-1, 1), xlab = "Distance class", ylab = "Moran's I", cex.lab = 1.2,
cex.axis = 1.2)
abline(h = 0)
coords <- fdata[1:2]
coords <- as.matrix(coords)
nb1.5 <- dnearneigh(coords, 0, 1.5)
nb1.5.w <- nb2listw(nb1.5, glist = NULL, style = "W", zero.policy = TRUE)
residuals_ols <- residuals(fols)
plot(residuals_ols)
cor.ols.res <- correlog(fdata$x, fdata$y, z = residuals(fols), na.rm = T,
increment = 1, resamp = 1)
plot(cor.ols.res$correlation[1:50], type = "b", pch = 1, cex = 1.2, lwd = 1.5,
ylim = c(-0.5, 1), xlab = "distance", ylab = "Moran's I", cex.lab = 1.5,
cex.axis = 1.2)
abline(h = 0)
title(main = "OLS residuals", cex = 1.5)
plot(cor.ols.res$correlation[1:50], type = "b", pch = 1, cex = 1.2, lwd = 1.5,
ylim = c(-0.5, 1), xlab = "distance", ylab = "Moran's I", cex.lab = 1.5,
cex.axis = 1.2)
cor.ols.res
autocor_ols_res <- correlog(fdata$x, fdata$y, z = residuals(fols), na.rm = T,
increment = 1, resamp = 1)
autocor_ols_res <- correlog(fdata$x, fdata$y, z = residuals(fols),
increment = 1, resamp = 1)
fdata <- na.omit(data.frame(f_ras_coords, f_ras_rich, f_ras_bio1, f_ras_bio12))
cor.test(fdata$f_ras_rich, fdata$f_ras_bio1)
cor.test(fdata$f_ras_rich, fdata$f_ras_bio12)
fols <- lm(f_ras_rich ~ f_ras_bio1 + f_ras_bio12, data = fdata)
summary(fols)
autocor_SR <- ncf::correlog(fdata$x, fdata$y, z = fdata$f_ras_rich, na.rm = T,
increment = 1, resamp = 1)
plot(autocor_SR$correlation[1:50], type = "b", pch = 1, cex = 1.2, lwd = 1.5,
ylim = c(-1, 1), xlab = "Distance class", ylab = "Moran's I", cex.lab = 1.2,
cex.axis = 1.2)
abline(h = 0)
coords <- fdata[1:2]
coords <- as.matrix(coords)
nb1.5 <- dnearneigh(coords, 0, 1.5)
nb1.5.w <- nb2listw(nb1.5, glist = NULL, style = "W", zero.policy = TRUE)
residuals_ols <- residuals(fols)
plot(residuals_ols)
autocor_ols_res <- correlog(fdata$x, fdata$y, z = residuals(fols),
increment = 1, resamp = 1)
plot(autocor_ols_res$correlation[1:50], type = "b", pch = 1, cex = 1.2, lwd = 1.5,
ylim = c(-0.5, 1), xlab = "distance", ylab = "Moran's I", cex.lab = 1.5,
cex.axis = 1.2)
abline(h = 0)
title(main = "OLS residuals", cex = 1.5)
sar_nb1.5.w <- errorsarlm(fols, listw = nb1.5.w, data = fdata, quiet = FALSE)
?errorsarlm
sar_nb1.5.w <- errorsarlm(fols, listw = nb1.5.w, data = fdata, quiet = FALSE,
na.action = TRUE)
sar_nb1.5.w <- errorsarlm(fols, listw = nb1.5.w, data = fdata, quiet = FALSE,
na.action = TRUE)
sar_nb1.5.w <- errorsarlm(fols, listw = nb1.5.w, data = fdata, quiet = FALSE,
na.omit = TRUE)
sar_nb1.5.w <- errorsarlm(fols, listw = nb1.5.w, data = fdata, quiet = FALSE)
sar_nb1.5.w <- errorsarlm(fols, listw = nb1.5.w, data = fdata, quiet = FALSE,
zero.policy = TRUE)
summary(sar_nb1.5.w)
residuals_sar_nb1.5.w <- residuals(sar_nb1.5.w)
autocor_sar_nb1.5.w <- correlog(fdata$x, fdata$y, z = residuals(sar_nb1.5.w),
na.rm = T, increment = 1, resamp = 1)
plot(autocor_sar_nb1.5.w$correlation[1:50], type = "b", pch = 4, cex = 1.2, lwd = 1.5,
ylim = c(-0.5, 1), xlab = "distance", ylab = "Moran's I", cex.lab = 1.5,
cex.axis = 1.2)
abline(h = 0)
title(main = "Correlogram SARerr", cex = 1.5)
par(mfrow = c(2, 1))
plot(autocor_ols_res$correlation[1:50], type = "b", pch = 1, cex = 1.2, lwd = 1.5,
ylim = c(-0.5, 1), xlab = "distance", ylab = "Moran's I", cex.lab = 1.5,
cex.axis = 1.2)
dev.off()
par(mar = c(1,1,1,1))
par(mfrow = c(2, 1))
plot(autocor_ols_res$correlation[1:50], type = "b", pch = 1, cex = 1.2, lwd = 1.5,
ylim = c(-0.5, 1), xlab = "distance", ylab = "Moran's I", cex.lab = 1.5,
cex.axis = 1.2)
abline(h = 0)
title(main = "OLS residuals", cex = 1.5)
plot(autocor_sar_nb1.5.w$correlation[1:50], type = "b", pch = 4, cex = 1.2, lwd = 1.5,
ylim = c(-0.5, 1), xlab = "distance", ylab = "Moran's I", cex.lab = 1.5,
cex.axis = 1.2)
abline(h = 0)
summary(sar_nb1.5.w)
source("https://github.com/jesusNPL/BetaDivNA/blob/master/SARr2.R")
source("https://raw.githubusercontent.com/jesusNPL/BetaDivNA/master/SARr2.R")
SARr2
sar_nb1.5.w$logLik_lm.model
sar_nb1.5.w$LL
nrow(fdata)
SARr2(Lfull = sar_nb1.5.w$LL, Lnull = sar_nb1.5.w$logLik_lm.model, N = nrow(fdata))
AIC(sar_nb1.5.w)
AIC(fols)
require(geiger)
aicw(c(AIC(fols), AIC(sar_nb1.5.w)))
require(maptools)
require(rgdal)
require(raster)
require(sp)
require(rangeBuilder)
library(spdep)
library(ncf)
require(geiger)
oaks <- read.table("Data/live.oaks.txt", header = TRUE)
head(oaks)
tail(oaks)
View(oaks)
plot(oaks[c(2:3)], col = "blue", pch = 19)
data(wrld_simpl)
plot(wrld_simpl, add = TRUE)
points(que_vir$Longitude, que_vir$Latitude, pch = 15)
unique(oaks$Species)
que_vir <- subset(oaks, oaks$Species == "Quercus_virginiana")
points(que_vir$Longitude, que_vir$Latitude, pch = 15)
points(que_vir$Longitude, que_vir$Latitude, pch = 15)
dev.off()
points(que_vir$Longitude, que_vir$Latitude, pch = 15)
points(que_vir$Longitude, que_vir$Latitude, pch = 15)
points(que_vir$Longitude, que_vir$Latitude, pch = 15)
quartz()
points(que_vir$Longitude, que_vir$Latitude, pch = 15)
plot(wrld_simpl, add = TRUE)
require(maptools)
require(maptools)
require(rgdal)
require(maptools)
require(rgdal)
require(raster)
require(maptools)
require(rgdal)
require(raster)
require(sp)
require(rangeBuilder)
library(spdep)
library(ncf)
require(geiger)
oaks <- read.table("Data/live.oaks.txt", header = TRUE)
head(oaks)
unique(oaks$Species)
que_vir <- subset(oaks, oaks$Species == "Quercus_virginiana")
{points(que_vir$Longitude, que_vir$Latitude, pch = 15)
plot(wrld_simpl, add = TRUE)}
points(que_vir$Longitude, que_vir$Latitude, pch = 15)
dev.off()
dev.off()
dev.off()
points(que_vir$Longitude, que_vir$Latitude, pch = 15)
{plot(oaks[c(2:3)], col = "blue", pch = 19)
plot(wrld_simpl, add = TRUE)}
plot(oaks[c(2:3)], col = "blue", pch = 19)
data(wrld_simpl)
plot(wrld_simpl, add = TRUE)
points(que_vir$Longitude, que_vir$Latitude, pch = 15)
plot(wrld_simpl, add = TRUE)
{points(que_vir$Longitude, que_vir$Latitude, pch = 15)
plot(wrld_simpl, add = TRUE)}
{plot(oaks[c(2:3)], col = "blue", pch = 19)
plot(wrld_simpl, add = TRUE)}
{points(que_vir$Longitude, que_vir$Latitude, pch = 15)
plot(wrld_simpl, add = TRUE)}
{points(que_vir$Longitude, que_vir$Latitude, pch = 15)+
plot(wrld_simpl, add = TRUE)}
points(que_vir$Longitude, que_vir$Latitude, pch = 15)+
plot(wrld_simpl, add = TRUE)
unique(oaks$Species)
que_vir <- subset(oaks, oaks$Species == "Quercus_virginiana")
points(que_vir$Longitude, que_vir$Latitude, pch = 15)+
plot(wrld_simpl, add = TRUE)
unique(oaks$Species)
que_vir <- subset(oaks, oaks$Species == "Quercus_virginiana")
{points(que_vir$Longitude, que_vir$Latitude, pch = 15)
plot(wrld_simpl, add = TRUE)}
```{r, eval = FALSE, fig.kee = 'all'}
```{r, eval = FALSE, fig.keep = 'all'}
```{r, eval = FALSE, fig.keep='all'}
points(que_vir$Longitude, que_vir$Latitude, pch = 15)
unique(oaks$Species)
que_vir <- subset(oaks, oaks$Species == "Quercus_virginiana")
points(que_vir$Longitude, que_vir$Latitude, pch = 15)
plot.new()
points(que_vir$Longitude, que_vir$Latitude, pch = 15)
plot(wrld_simpl, add = TRUE)
plot.new()
plot.new()
frame()
points(que_vir$Longitude, que_vir$Latitude, pch = 15)
frame()
{points(que_vir$Longitude, que_vir$Latitude, pch = 15)
plot(wrld_simpl, add = TRUE)}
dev.off()
points(que_vir$Longitude, que_vir$Latitude, pch = 15)
plot(wrld_simpl, add = TRUE)
dev.off()
dev.off()
data(wrld_simpl)
{plot(oaks[c(2:3)], col = "blue", pch = 19)
plot(wrld_simpl, add = TRUE)}
unique(oaks$Species)
que_vir <- subset(oaks, oaks$Species == "Quercus_virginiana")
points(que_vir$Longitude, que_vir$Latitude, pch = 15)
plot(wrld_simpl, add = TRUE)
points(que_vir$Longitude, que_vir$Latitude, pch = 15)
plot(wrld_simpl, add = TRUE)
points(que_vir$Longitude, que_vir$Latitude, pch = 15)
plot(wrld_simpl, add = TRUE)
dev.off()
points(que_vir$Longitude, que_vir$Latitude, pch = 15)
plot(wrld_simpl, add = TRUE)
dev.off()
points(que_vir$Longitude, que_vir$Latitude, pch = 15)
plot(wrld_simpl, add = TRUE)
dev.off()
dev.off()
dev.off()
points(que_vir$Longitude, que_vir$Latitude, pch = 15)
plot(wrld_simpl, add = TRUE)
window()
windows()
Windows()
x11()
points(que_vir$Longitude, que_vir$Latitude, pch = 15)
plot(wrld_simpl, add = TRUE)
points(que_vir$Longitude, que_vir$Latitude, pch = 15)
plot(wrld_simpl, add = TRUE)
dev.off()
dev.off()
dev.off()
points(que_vir$Longitude, que_vir$Latitude, pch = 15)
plot(wrld_simpl, add = TRUE)
points(que_vir$Longitude, que_vir$Latitude, pch = 15)
points(que_vir$Longitude, que_vir$Latitude, pch = 15)
points(que_vir$Longitude, que_vir$Latitude, pch = 15)
{points(que_vir$Longitude, que_vir$Latitude, pch = 15)
plot(wrld_simpl, add = TRUE)}
{points(que_vir$Longitude, que_vir$Latitude, pch = 15)
plot(wrld_simpl, add = TRUE)}
{points(que_vir$Longitude, que_vir$Latitude, pch = 15)
plot(wrld_simpl, add = TRUE)}
oaks_dups <- duplicated(oaks[, c(2:3)])
### NOTE: the function "duplicated" returns the results of a logical test (e.g. TRUE or FALSE)
# How many are duplicates?
length(which(oaks_dups == TRUE))
# How many are NOT duplicates?
length(which(oaks_dups == FALSE))
# Keep only those lines that are not duplicates
oaks_dups_row <- which(oaks_dups == TRUE)
# What's the size? That is, how many points are duplicates
length(oaks_dups_row)
# Create another object withoyt the duplicate records
oaks_nodups <- oaks[-oaks_dups_row,]
# What are the dimensions of the new object?
dim(oaks_nodups)
# Take a look at the first rows of data
head(oaks_nodups)
plot(oaks$Longitude, oaks$Latitude, pch = 19, col = "red", cex = 2)
points(oaks_nodups$Longitude, oaks_nodups$Latitude, pch = 16, col = "black")
{plot(oaks$Longitude, oaks$Latitude, pch = 19, col = "red", cex = 2)
points(oaks_nodups$Longitude, oaks_nodups$Latitude, pch = 16, col = "black")}
# create a polygon around the species' records
oaks_hull <- convHull(oaks_nodups[, c(2:3)])
require(dismo)
# create a polygon around the species' records
oaks_hull <- convHull(oaks_nodups[, c(2:3)])
# Plot the created polygon
{plot(oaks_hull)
points(oaks_nodups$Longitude, oaks_nodups$Latitude, pch = 16, col = "black")}
que_vir <- subset(oaks_nodups, oaks_nodups$Species == "Quercus_virginiana")
{plot(que_vir_hull)
points(que_vir$Longitude, que_vir$Latitude, pch = 16, col = "black")}
que_vir_hull <- convHull(que_vir[, c(2:3)])
{plot(que_vir_hull)
points(que_vir$Longitude, que_vir$Latitude, pch = 16, col = "black")}
{plot(oaks_hull)
points(oaks_nodups$Longitude, oaks_nodups$Latitude, pch = 16, col = "black")
plot(que_vir_hull, add = TRUE)
points(que_vir$Longitude, que_vir$Latitude, pch = 16, col = "red")
plot(wrld_simpl, add = TRUE)}
{plot(oaks[c(2:3)], col = "blue", pch = 19)
plot(wrld_simpl, add = TRUE)}
{points(que_vir$Longitude, que_vir$Latitude, pch = 15)
plot(wrld_simpl, add = TRUE)}
{plot(que_vir$Longitude, que_vir$Latitude, pch = 15)
plot(wrld_simpl, add = TRUE)}
que_vir_alphahull <- getDynamicAlphaHull(que_vir, fraction = 0.95,
coordHeaders = c("Longitude", "Latitude"),
clipToCoast = 'no')[[1]]
{plot(que_vir_alphahull, lwd = 2)
plot(que_vir_hull, add = TRUE, lwd = 2, lty = 2, col = "red")
points(que_vir$Longitude, que_vir$Latitude, pch = 16, col = "green")
plot(wrld_simpl, add = TRUE, lwd = 2)}
{plot(que_vir_alphahull, lwd = 2, col "red")
{plot(que_vir_alphahull, lwd = 2, col = "red")
plot(que_vir_hull, add = TRUE, lwd = 2, lty = 2)
points(que_vir$Longitude, que_vir$Latitude, pch = 16, col = "green")
plot(wrld_simpl, add = TRUE, lwd = 2)}
franges <- readShapePoly("Data/Franges/Furnarii_ranges_geo.shp")
str(franges)
neo_ras <- raster()
# Set the raster "extent"
extent(neo_ras) <- extent(franges)
res(neo_ras) <- 1
neo_ras
values(neo_ras) <- 0
{plot(f_sr_raster)
plot(wrld_simpl, add = T)}
f_sr_raster <- rasterize(franges, neo_ras, field = "SCINAME", fun = function(x,...){length(unique(na.omit(x)))})
{plot(f_sr_raster)
plot(wrld_simpl, add = T)}
#change the color scale
colfuncYellows <- colorRampPalette(c("#d7191c", "#fdae61", "#ffffbf", "#abd9e9",
"#2c7bb6"))
{plot(f_sr_raster, col = rev(colfuncYellows(100)), axes = FALSE, box = FALSE,
zlim = c(minValue(f_sr_raster), maxValue(f_sr_raster)),
xlab = "Furnariides richness", legend.width = 2)
plot(wrld_simpl, add = T)}
head(franges@data)
f_MRD_raster <- rasterize(franges, neo_ras, field = "RD", fun = mean)
{plot(f_MRD_raster)
plot(wrld_simpl, add = T)}
{plot(f_MRD_raster, col = rev(colfuncYellows(100)), axes = FALSE, box = FALSE,
zlim = c(minValue(f_MRD_raster), maxValue(f_MRD_raster)),
xlab = "Furnariides mean root distance", legend.width = 2)
plot(wrld_simpl, add = T)}
{par(mfrow = c(1, 2))
plot(f_sr_raster, col = rev(colfuncYellows(100)), axes = FALSE, box = FALSE,
zlim = c(minValue(f_sr_raster), maxValue(f_sr_raster)),
xlab = "Furnariides richness", legend.width = 2)
plot(f_MRD_raster, col = rev(colfuncYellows(100)), axes = FALSE, box = FALSE,
zlim = c(minValue(f_MRD_raster), maxValue(f_MRD_raster)),
xlab = "Furnariides mean root distance", legend.width = 2)}
# 2º degrees
neo_ras_2dg <- raster()
# Set the raster "extent"
extent(neo_ras_2dg) <- extent(franges)
res(neo_ras_2dg) <- 2
neo_ras_2dg
values(neo_ras_2dg) <- 0
# 4º degrees
neo_ras_4dg <- raster()
# Set the raster "extent"
extent(neo_ras_4dg) <- extent(franges)
res(neo_ras_4dg) <- 4
neo_ras_4dg
values(neo_ras_4dg) <- 0
f_sr_2dg_raster <- rasterize(franges, neo_ras_2dg, field = "SCINAME", fun = function(x,...){length(unique(na.omit(x)))})
f_sr_2dg_raster <- rasterize(franges, neo_ras_2dg, field = "SCINAME", fun = function(x,...){length(unique(na.omit(x)))})
f_sr_4dg_raster <- rasterize(franges, neo_ras_4dg, field = "SCINAME", fun = function(x,...){length(unique(na.omit(x)))})
{par(mfrow = c (1, 3))
plot(f_sr_raster, main = "Furnariides richness 1dg")
plot(wrld_simpl, add = T)
plot(f_sr_2dg_raster, main = "Furnariides richness 2dg")
plot(wrld_simpl, add = T)
plot(f_sr_4dg_raster, main = "Furnariides richness 4dg")
plot(wrld_simpl, add = T)}
bio1 <- raster("Data/Envi/bio1.bil")
bio1
bio12 <- raster("Data/Envi/bio12.bil")
bio12
{par(mfrow = c(2, 1))
plot(bio1)
plot(bio12)}
bio1_neo <- crop(bio1, extent(franges))
bio12_neo <- crop(bio12, extent(franges))
{par(mfrow = c(1, 2))
plot(bio1_neo, main = "Annual Mean Temperature")
plot(bio12_neo, main = "Annual Precipitation")}
f_ras_coords <- xyFromCell(f_sr_raster, 1:length(values(f_sr_raster)))
f_ras_bio1 <- extract(bio1_neo, f_ras_coords)
f_ras_bio12 <- extract(bio12_neo, f_ras_coords)
f_ras_rich <- values(f_sr_raster)
fdata <- na.omit(data.frame(f_ras_coords, f_ras_rich, f_ras_bio1, f_ras_bio12))
cor.test(fdata$f_ras_rich, fdata$f_ras_bio1)
cor.test(fdata$f_ras_rich, fdata$f_ras_bio12)
{par(mfrow = c(1, 2))
plot(fdata$f_ras_bio1, fdata$f_ras_rich, xlab = "Bio 1", ylab = "Richness")
plot(fdata$f_ras_bio12, fdata$f_ras_rich, xlab = "Bio 12", ylab = "Richness")}
fols <- lm(f_ras_rich ~ f_ras_bio1 + f_ras_bio12, data = fdata)
summary(fols)
autocor_SR <- ncf::correlog(fdata$x, fdata$y, z = fdata$f_ras_rich, na.rm = T,
increment = 1, resamp = 1)
plot(autocor_SR$correlation[1:50], type = "b", pch = 1, cex = 1.2, lwd = 1.5,
ylim = c(-1, 1), xlab = "Distance class", ylab = "Moran's I", cex.lab = 1.2,
cex.axis = 1.2)
{plot(autocor_SR$correlation[1:50], type = "b", pch = 1, cex = 1.2, lwd = 1.5,
ylim = c(-1, 1), xlab = "Distance class", ylab = "Moran's I", cex.lab = 1.2,
cex.axis = 1.2)
abline(h = 0)}
coords <- fdata[1:2]
coords <- as.matrix(coords)
nb1.5 <- dnearneigh(coords, 0, 1.5)
nb1.5.w <- nb2listw(nb1.5, glist = NULL, style = "W", zero.policy = TRUE)
residuals_ols <- residuals(fols)
plot(residuals_ols)
autocor_ols_res <- correlog(fdata$x, fdata$y, z = residuals(fols),
increment = 1, resamp = 1)
{plot(autocor_ols_res$correlation[1:50], type = "b", pch = 1, cex = 1.2, lwd = 1.5,
ylim = c(-0.5, 1), xlab = "distance", ylab = "Moran's I", cex.lab = 1.5,
cex.axis = 1.2)
abline(h = 0)
title(main = "OLS residuals", cex = 1.5)}
{par(mfrow = c(2, 1))
plot(autocor_SR$correlation[1:50], type = "b", pch = 1, cex = 1.2, lwd = 1.5,
ylim = c(-1, 1), xlab = "Distance class", ylab = "Moran's I", cex.lab = 1.2,
cex.axis = 1.2)
title(main = "OLS model", cex = 1.5)
plot(autocor_ols_res$correlation[1:50], type = "b", pch = 1, cex = 1.2, lwd = 1.5,
ylim = c(-0.5, 1), xlab = "Distance class", ylab = "Moran's I", cex.lab = 1.5,
cex.axis = 1.2)
abline(h = 0)
title(main = "OLS residuals", cex = 1.5)}
sar_nb1.5.w <- errorsarlm(fols, listw = nb1.5.w, data = fdata, quiet = FALSE,
zero.policy = TRUE)
summary(sar_nb1.5.w)
residuals_sar_nb1.5.w <- residuals(sar_nb1.5.w)
{plot(autocor_sar_nb1.5.w$correlation[1:50], type = "b", pch = 4, cex = 1.2, lwd = 1.5,
ylim = c(-0.5, 1), xlab = "distance", ylab = "Moran's I", cex.lab = 1.5,
cex.axis = 1.2)
abline(h = 0)
title(main = "Correlogram SARerr", cex = 1.5)}
autocor_sar_nb1.5.w <- correlog(fdata$x, fdata$y, z = residuals(sar_nb1.5.w),
na.rm = T, increment = 1, resamp = 1)
{plot(autocor_sar_nb1.5.w$correlation[1:50], type = "b", pch = 4, cex = 1.2, lwd = 1.5,
ylim = c(-0.5, 1), xlab = "distance", ylab = "Moran's I", cex.lab = 1.5,
cex.axis = 1.2)
abline(h = 0)
title(main = "Correlogram SARerr", cex = 1.5)}
{par(mfrow = c(2, 1))
plot(autocor_ols_res$correlation[1:50], type = "b", pch = 1, cex = 1.2, lwd = 1.5,
ylim = c(-0.5, 1), xlab = "distance", ylab = "Moran's I", cex.lab = 1.5,
cex.axis = 1.2)
abline(h = 0)
title(main = "OLS residuals", cex = 1.5)
plot(autocor_sar_nb1.5.w$correlation[1:50], type = "b", pch = 4, cex = 1.2, lwd = 1.5,
ylim = c(-0.5, 1), xlab = "distance", ylab = "Moran's I", cex.lab = 1.5,
cex.axis = 1.2)
abline(h = 0)
title(main = "Correlogram SARerr", cex = 1.5)}
summary(sar_nb1.5.w)
summary(sar_nb1.5.w)
summary(fols)
source("https://raw.githubusercontent.com/jesusNPL/BetaDivNA/master/SARr2.R")
SARr2(Lfull = sar_nb1.5.w$LL, Lnull = sar_nb1.5.w$logLik_lm.model, N = nrow(fdata))
