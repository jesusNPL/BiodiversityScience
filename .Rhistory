View(training)
View(training)
Bioclim.model <- bioclim(x = training[training[, "pb"] == 1, -c(1:3)])
Bioclim.modelo
Bioclim.model
plot(Bioclim.modelo)
plot(Bioclim.model)
response(Bioclim.modelo)
response(Bioclim.model)
?response
?domain
?bioclim
Gower.model <- domain(x = training[training[, "pb"] == 1, -c(1:3)])
Gower.model
response(Gower.model)
?ksvm
svm.model <- ksvm(pb ~ bio.1 + bio.2 + bio.4 + bio.12 + bio.15, data = training)
response(svm.model)
glm()
?glm
glm.model <- glm(pb ~ bio.1 + bio.2 + bio.4 + bio.12 + bio.15,
data = training, family = binomial(link = "logit"))
Bioclim0k <- predict(object = Bioclim.modelo, x = climSA0k)
Bioclim0k <- predict(object = Bioclim.model, x = climSA0k)
plot(Bioclim0k)
plot(Bioclim0k)
points(training[training[, "pb"]==1,"x"], training[training[, "pb"]==1,"y"])
Gower0k <- predict(clima0k, Gower.modelo)
Gower0k <- predict(climSA0k, Gower.model)
plot(Gower0k)
svm0k <- predict(climSA0k, svm.model)
plot(svm0k)
GLM0k <- predict(climSA0k, glm.model)
plot(GLM0k)
par(mfrow = c(2, 2))
plot(Bioclim0k, main = "bioclim")
plot(Gower0k, main = "Gower")
plot(svm0k, main = "svm")
plot(GLM0k, main = "glm")
Bioclim.eval <- evaluate(p = test[test[, "pb"] == 1, 1:2],
a = test[test[, "pb"] == 0, 1:2],
model = Bioclim.model,
x = clima0k)
Bioclim.eval <- evaluate(p = test[test[, "pb"] == 1, 1:2],
a = test[test[, "pb"] == 0, 1:2],
model = Bioclim.model,
x = climSA0k)
Bioclim.eval
str(Bioclim.eval)
Bioclim.eval@confusion
?evaluate
Gower.eval <- evaluate(p = test[test[, "pb"]==1, 1:2],
a = test[test[, "pb"]==0, 1:2],
model = Gower.model,
x = climSA0k)
svm.eval <- evaluate(p = test[test[, "pb"]==1, 1:2],
a = test[test[, "pb"]==0, 1:2],
model = svm.model,
x = climSA0k)
glm.eval <- evaluate(p = test[test[, "pb"]==1, 1:2],
a = test[test[, "pb"]==0, 1:2],
model = glm.model,
x = climSA0k)
# validate results
par(mfrow = c(2, 2))
plot(Bioclim.eval, "ROC")
plot(Gower.eval, "ROC")
plot(svm.eval, "ROC")
plot(glm.eval, "ROC")
Bioclim.thr <- threshold(Bioclim.eval)
Bioclim.thr
?threshold
bio <- Bioclim.thr$spec_sens
Gower.thr <- threshold(Gower.eval)
svm.thr <- threshold(svm.eval)
glm.thr <- threshold(glm.eval)
gow <- Gower.thr$spec_sens
s <- svm.thr$spec_sens
g <- glm.thr$spec_sens
glm.thr$spec_sens
par(mfrow = c(2, 2))
plot(Bioclim0k > bio, main = "Bioclim")
plot(GLM0k > g, main = "GLM")
plot(Gower0k > gow, main = "Gower")
plot(svm0k > s, main = "SVM")
thrs <- c(bio, gow, s, g)
tmp <- stack(Bioclim0k, Gower0k, GLM0k, svm0k)
mapa.suma <- sum(tmp) # sum
map.sum <- sum(tmp) # sum
par(mfrow = c(2, 2))
plot(map.sum)
plot(map.sum > thrs)
plot(map.sum > 2)
plot(map.sum > 3)
# Combine all thresholds
thrs <- (bio, gow, s, g)
# Combine all thresholds
thrs <- (bio + gow + s + g)
par(mfrow = c(2, 2))
plot(map.sum)
plot(map.sum > thrs)
plot(map.sum > 2)
plot(map.sum > 3)
map.mean <- mean(tmp) # mean
plot(mapa.media)
plot(map.mean)
plot(map.mean)
plot(mapa.media > thrs)
plot(map.mean)
plot(map.mean > thrs)
plot(map.mean > 0.2)
plot(map.mean > 0.3)
par(mfrow = c(2, 2))
plot(map.mean)
plot(map.mean > thrs)
plot(map.mean > 0.2)
plot(map.mean > 0.3)
auc <- sapply(list(Bioclim.eval, Gower.eval, svm.eval, glm.eval, esv), function(x) x@auc)
auc <- sapply(list(Bioclim.eval, Gower.eval, svm.eval, glm.eval), function(x) x@auc)
w <- (auc-0.5)^2
tmp
weighted.mean(tmp[[c("layer.1", "layer.2", "layer.3", "layer.4")]], w)
map.mean.weight <- weighted.mean(tmp[[c("layer.1", "layer.2", "layer.3", "layer.4")]], w)
plot(map.mean.weight)
map.sd <- sd(tmp) # sd
map.sd <- calc(tmp, sd) # sd
par(mfrow = c(2, 2))
plot(map.sum, main = "Sum of all models")
plot(map.mean, main = "Mean of all models")
plot(map.mean.weight = "Weighted mean of all models")
par(mfrow = c(2, 2))
plot(map.sum, main = "Sum of all models")
plot(map.mean, main = "Mean of all models")
plot(map.mean.weight = "Weighted mean of all models")
par(mfrow = c(2, 2))
plot(map.sum, main = "Sum of all models")
plot(map.mean, main = "Mean of all models")
plot(map.mean.weight, main = "Weighted mean of all models")
plot(map.sd = "Standard deviation of all models")
par(mfrow = c(2, 2))
plot(map.sum, main = "Sum of all models")
plot(map.mean, main = "Mean of all models")
plot(map.mean.weight, main = "Weighted mean of all models")
plot(map.sd, main = "Standard deviation of all models")
library(spectrolab)
dir_path = system.file("extdata/spec_matrix_meta.csv", package = "spectrolab")
# Read data from the CSV file. If you don't use `check.names` = FALSE when reading
# the csv, R will usually add a letter to the column names (e.g. 'X650') which will
# cause problems when converting the matrix to spectra.
spec_csv = read.csv(dir_path, check.names = FALSE)
dir_path <- system.file("extdata/spec_matrix_meta.csv", package = "spectrolab")
# Read data from the CSV file. If you don't use `check.names` = FALSE when reading
# the csv, R will usually add a letter to the column names (e.g. 'X650') which will
# cause problems when converting the matrix to spectra.
spec_csv <- read.csv(dir_path, check.names = FALSE)
head(spec_csv)
# The sample names are in column 3. Columns 1 and 2 are metadata
achillea_spec = as.spectra(spec_csv, name_idx = 3, meta_idxs = c(1, 2))
# And now you have a spectra object with sample names and metadata...
achillea_spec
# `dir_path` is the directory where our example datasets live
dir_path <- system.file("extdata", "Acer_example", package = "spectrolab")
# Read .sig files
acer_spectra <- read_spectra(path = dir_path, format = "sig")
# Simply print the object
acer_spectra
# Simply print the object
acer_spectra
# Get the dataset's dimensions
dim(acer_spectra)
# Vector of all sample names. Note: Duplicated sample names are permitted
n <- names(achillea_spec)
# Vector of wavelengths
w <- wavelengths(achillea_spec)
# Reflectance matrix
r <- reflectance(achillea_spec)
# Metadata. Use simplify = TRUE to get a vector instead of a data.frame
m <- meta(achillea_spec, "ssp", simplify = TRUE)
# Subset wavelength regions.
spec_sub_vis <- achillea_spec[ , 400:700 ]
# Subset spectra to all entries where sample_name matches "ACHMI_7" or get the first three samples
spec_sub_byname <- achillea_spec["ACHMI_7", ]
spec_sub_byidx <- achillea_spec[ 1:3, ]
acer_spectra_trim <-  acer_spectra[ , wavelengths(acer_spectra, 400, 2400) ]
# Subsetting samples by indexes works and so does subsetting wavelengths by numerics or characters.
spec_sub_byidx[1, "405"] == spec_sub_byidx[1, 405]
# Simple spectra plot
plot(achillea_spec, lwd = 0.75, lty = 1, col = "grey25", main = "All Spectra")
# Stand along quantile plot
plot_quantile(achillea_spec, total_prob = 0.8, col = rgb(1, 0, 0, 0.5), lwd = 0.5, border = TRUE)
title("80% spectral quantile")
plot_regions(achillea_spec, regions = default_spec_regions(), add = TRUE)
# Combined individual spectra, quantiles and shade spectral regions
plot(achillea_spec, lwd = 0.25, lty = 1, col = "grey50", main="Spectra, quantile and regions")
plot_quantile(achillea_spec, total_prob = 0.8, col = rgb(1, 0, 0, 0.25), border = FALSE, add = TRUE)
plot_regions(achillea_spec, regions = default_spec_regions(), add = TRUE)
source("https://github.com/jesusNPL/BiodiversityScience/blob/master/RFunctions/mixR.R")
source("https://raw.githubusercontent.com/jesusNPL/BiodiversityScience/master/RFunctions/mixR.R")
# Make a matrix from a `spectra` object
spec_as_mat = as.matrix(achillea_spec, fix_names = "none")
spec_as_mat[1:4, 1:3]
# Make a matrix from a `spectra` object
spec_as_df = as.data.frame(achillea_spec, fix_names = "none", metadata = TRUE)
spec_as_df[1:4, 1:5]
VIS <- c(400:700)
NIR <- c(800:1300)
SWIR1 <- c(1550:1800)
SWIR2 <- c(2000:2400)
achillea_spec_VIS <- achillea_spec[, VIS]
achillea_spec_VIS
achillea_spec_VIS_df <- as.data.frame(achillea_spec_VIS, fix_names = "none", metadata = TRUE)
achillea_spec_VIS_df[1:5, 1:7]
spec_as_df[1:5, 1:5]
View(spec_as_df)
spec_as_df_clean <- spec_as_df[, 4:2004]
spec_as_df_clean[1:5, 1:5]
achillea_spec_VIS_df_clean <- achillea_spec_VIS_df[, 4:304]
achillea_spec_VIS_df_clean[1:5, 1:5]
achillea_spec_VIS_df_clean <- achillea_spec_VIS_df[, 4:304]
achillea_spec_VIS_df_clean[1:10, 1:5]
spec_as_df_clean <- spec_as_df[, 4:2004]
spec_as_df_clean[1:10, 1:5]
achillea_spec_VIS_df <- as.data.frame(achillea_spec_VIS, fix_names = "none", metadata = TRUE)
achillea_spec_VIS_df[1:10, 1:5]
spec_as_df_clean[, 1]
spec_as_df_clean[1 ,]
spec_as_df_clean[2 ,]
spec_as_df_clean[ , 2]
spec_as_df_clean[ , 3]
spec_as_df_clean_ind1 <- spec_as_df_clean[1, ]
spec_as_df_clean_ind1
spec_as_df_clean_ind1 <- spec_as_df_clean[10, ]
spec_as_df_clean_ind1
as.numeric(spec_as_df_clean_ind1)
Descriptives(as.numeric(spec_as_df_clean_ind1))
hist(as.numeric(spec_as_df_clean_ind1), col = "black")
abline(v = mean(as.numeric(spec_as_df_clean_ind1)), col = "red", lwd = 3)
spec_as_df_clean_ind1 <- spec_as_df_clean[1, ]
spec_as_df_clean_ind1
achillea_spec_VIS_df_clean_ind1 <- achillea_spec_VIS_df_clean[1, ]
achillea_spec_VIS_df_clean_ind1
hist(as.numeric(achillea_spec_VIS_df_clean_ind1), col = "black")
abline(v = mean(as.numeric(achillea_spec_VIS_df_clean_ind1)), col = "red", lwd = 3)
Descriptives(as.numeric(achillea_spec_VIS_df_clean_ind1))
apply(spec_as_df_clean, MARGIN = 1, FUN = Descriptives)
descript_all_individuals <- apply(spec_as_df_clean, MARGIN = 1, FUN = Descriptives)
descript_all_individuals <- apply(spec_as_df_clean, MARGIN = 1, FUN = Descriptives)
descript_all_individuals[[10]]
diversities(spec_as_df_clean)
diversities(achillea_spec_VIS_df_clean)
install.packages("spectrolab", dependencies = TRUE)
library(spectrolab)
dir_path <- system.file("extdata/spec_matrix_meta.csv", package = "spectrolab")
# Read data from the CSV file. If you don't use `check.names` = FALSE when reading
# the csv, R will usually add a letter to the column names (e.g. 'X650') which will
# cause problems when converting the matrix to spectra.
spec_csv <- read.csv(dir_path, check.names = FALSE)
head(spec_csv)
# The sample names are in column 3. Columns 1 and 2 are metadata
achillea_spec = as.spectra(spec_csv, name_idx = 3, meta_idxs = c(1, 2))
# And now you have a spectra object with sample names and metadata...
achillea_spec
# `dir_path` is the directory where our example datasets live
dir_path <- system.file("extdata", "Acer_example", package = "spectrolab")
# Read .sig files
acer_spectra <- read_spectra(path = dir_path, format = "sig")
# Simply print the object
acer_spectra
# Get the dataset's dimensions
dim(acer_spectra)
# Vector of all sample names. Note: Duplicated sample names are permitted
n <- names(achillea_spec)
# Vector of wavelengths
w <- wavelengths(achillea_spec)
# Reflectance matrix
r <- reflectance(achillea_spec)
# Metadata. Use simplify = TRUE to get a vector instead of a data.frame
m <- meta(achillea_spec, "ssp", simplify = TRUE)
# Subset wavelength regions.
spec_sub_vis <- achillea_spec[ , 400:700 ]
# Subset spectra to all entries where sample_name matches "ACHMI_7" or get the first three samples
spec_sub_byname <- achillea_spec["ACHMI_7", ]
spec_sub_byidx <- achillea_spec[ 1:3, ]
acer_spectra_trim <-  acer_spectra[ , wavelengths(acer_spectra, 400, 2400) ]
# Subsetting samples by indexes works and so does subsetting wavelengths by numerics or characters.
spec_sub_byidx[1, "405"] == spec_sub_byidx[1, 405]
# Simple spectra plot
plot(achillea_spec, lwd = 0.75, lty = 1, col = "grey25", main = "All Spectra")
# Stand along quantile plot
plot_quantile(achillea_spec, total_prob = 0.8, col = rgb(1, 0, 0, 0.5), lwd = 0.5, border = TRUE)
title("80% spectral quantile")
# Combined individual spectra, quantiles and shade spectral regions
plot(achillea_spec, lwd = 0.25, lty = 1, col = "grey50", main = "Spectra, quantile and regions")
plot_quantile(achillea_spec, total_prob = 0.8, col = rgb(1, 0, 0, 0.25), border = FALSE, add = TRUE)
plot_regions(achillea_spec, regions = default_spec_regions(), add = TRUE)
# Make a matrix from a `spectra` object
spec_as_mat = as.matrix(achillea_spec, fix_names = "none")
spec_as_mat[1:4, 1:3]
# Make a matrix from a `spectra` object
spec_as_df = as.data.frame(achillea_spec, fix_names = "none", metadata = TRUE)
spec_as_df[1:4, 1:5]
VIS <- c(400:700)
NIR <- c(800:1300)
SWIR1 <- c(1550:1800)
SWIR2 <- c(2000:2400)
library(spectrolab)
dir_path <- system.file("extdata/spec_matrix_meta.csv", package = "spectrolab")
# Read data from the CSV file. If you don't use `check.names` = FALSE when reading
# the csv, R will usually add a letter to the column names (e.g. 'X650') which will
# cause problems when converting the matrix to spectra.
spec_csv <- read.csv(dir_path, check.names = FALSE)
head(spec_csv)
# The sample names are in column 3. Columns 1 and 2 are metadata
achillea_spec = as.spectra(spec_csv, name_idx = 3, meta_idxs = c(1, 2))
# And now you have a spectra object with sample names and metadata...
achillea_spec
# `dir_path` is the directory where our example datasets live
dir_path <- system.file("extdata", "Acer_example", package = "spectrolab")
# Read .sig files
acer_spectra <- read_spectra(path = dir_path, format = "sig")
# Simply print the object
acer_spectra
# Get the dataset's dimensions
dim(acer_spectra)
# Vector of all sample names. Note: Duplicated sample names are permitted
n <- names(achillea_spec)
# Vector of wavelengths
w <- wavelengths(achillea_spec)
# Reflectance matrix
r <- reflectance(achillea_spec)
# Metadata. Use simplify = TRUE to get a vector instead of a data.frame
m <- meta(achillea_spec, "ssp", simplify = TRUE)
# Subset wavelength regions.
spec_sub_vis <- achillea_spec[ , 400:700 ]
# Subset spectra to all entries where sample_name matches "ACHMI_7" or get the first three samples
spec_sub_byname <- achillea_spec["ACHMI_7", ]
spec_sub_byidx <- achillea_spec[ 1:3, ]
acer_spectra_trim <-  acer_spectra[ , wavelengths(acer_spectra, 400, 2400) ]
# Subsetting samples by indexes works and so does subsetting wavelengths by numerics or characters.
spec_sub_byidx[1, "405"] == spec_sub_byidx[1, 405]
# Subsetting samples by indexes works and so does subsetting wavelengths by numerics or characters.
spec_sub_byidx[1, "405"] == spec_sub_byidx[1, 405]
# Simple spectra plot
plot(achillea_spec, lwd = 0.75, lty = 1, col = "grey25", main = "All Spectra")
# Stand along quantile plot
plot_quantile(achillea_spec, total_prob = 0.8, col = rgb(1, 0, 0, 0.5), lwd = 0.5, border = TRUE)
title("80% spectral quantile")
# Combined individual spectra, quantiles and shade spectral regions
plot(achillea_spec, lwd = 0.25, lty = 1, col = "grey50", main = "Spectra, quantile and regions")
plot_quantile(achillea_spec, total_prob = 0.8, col = rgb(1, 0, 0, 0.25), border = FALSE, add = TRUE)
plot_regions(achillea_spec, regions = default_spec_regions(), add = TRUE)
# Make a matrix from a `spectra` object
spec_as_mat = as.matrix(achillea_spec, fix_names = "none")
spec_as_mat[1:4, 1:3]
# Make a matrix from a `spectra` object
spec_as_df = as.data.frame(achillea_spec, fix_names = "none", metadata = TRUE)
spec_as_df[1:4, 1:5]
VIS <- c(400:700)
NIR <- c(800:1300)
SWIR1 <- c(1550:1800)
SWIR2 <- c(2000:2400)
achillea_spec_VIS <- achillea_spec[, VIS]
achillea_spec_VIS
achillea_spec_VIS_df <- as.data.frame(achillea_spec_VIS, fix_names = "none", metadata = TRUE)
achillea_spec_VIS_df[1:10, 1:5]
plot(achillea_spec_VIS, lwd = 0.75, lty = 1, col = "grey25", main = "Visible")
spec_as_df_clean <- spec_as_df[, 4:2004]
spec_as_df_clean[1:10, 1:5]
achillea_spec_VIS_df_clean <- achillea_spec_VIS_df[, 4:304]
achillea_spec_VIS_df_clean[1:10, 1:5]
spec_as_df_clean_ind1 <- spec_as_df_clean[1, ]
spec_as_df_clean_ind1
spec_as_df_clean_ind1 <- spec_as_df_clean[1, ]
dim(spec_as_df_clean_ind1)
spec_as_df_clean_ind1
source("https://raw.githubusercontent.com/jesusNPL/BiodiversityScience/master/RFunctions/mixR.R")
Descriptives(as.numeric(spec_as_df_clean_ind1))
achillea_spec_VIS_df_clean_ind1 <- achillea_spec_VIS_df_clean[1, ]
achillea_spec_VIS_df_clean_ind1
descript_all_individuals <- apply(spec_as_df_clean, MARGIN = 1, FUN = Descriptives)
descript_all_individuals[[10]]
diversities(spec_as_df_clean)
diversities(achillea_spec_VIS_df_clean)
# Subset wavelength regions.
spec_sub_vis <- achillea_spec[ , 400:700 ]
# Subset spectra to all entries where sample_name matches "ACHMI_7" or get the first three samples
spec_sub_byname <- achillea_spec["ACHMI_7", ]
spec_sub_byidx <- achillea_spec[ 1:3, ]
# Subset wavelength regions.
spec_sub_vis <- achillea_spec[ , 400:700 ]
# Subset spectra to all entries where sample_name matches "ACHMI_7" or get the first three samples
spec_sub_byname <- achillea_spec["ACHMI_7", ]
spec_sub_byidx <- achillea_spec[ 1:3, ]
spec_sub_byidx
spec_sub_byname
spec_sub_vis
names(achillea_spec)
colnames(achillea_spec)
head(achillea_spec_df)
head(spec_as_df_clean)
SRind1 =
spec_as_df_clean[, "845"]
spec_as_df_clean[, "665"]
head(spec_as_df_clean)
SRind1 = spec_as_df_clean[, "845"]/spec_as_df_clean[, "665"]
#head(spec_as_df_clean)
SRind1 = spec_as_df_clean[, "845"]/spec_as_df_clean[, "665"]
#head(spec_as_df_clean)
SRind1 = spec_as_df_clean[, "845"]/spec_as_df_clean[, "665"]
SRind1
#head(spec_as_df_clean)
SRachillea = spec_as_df_clean[, "845"]/spec_as_df_clean[, "665"]
SRachillea
#head(spec_as_df_clean)
SR_achillea = spec_as_df_clean[, "845"]/spec_as_df_clean[, "665"]
SR_achillea
spec_as_df_clean
spec_as_clean
spec_as_df
#head(spec_as_df_clean)
SR_achillea = spec_as_df[, "845"]/spec_as_df[, "665"]
SR_achillea
SR_achillea
package.names <- c('ape', 'picante', 'pez', 'car', 'vegan', 'MASS', 'ecodist', 'FD', 'adephylo')
for (pkg in package.names) {
if (!require(pkg, character.only = TRUE, quietly = TRUE)) {
install.packages(pkg)
library(pkg, character.only = TRUE)
}
}
trMB <- ape::read.tree("Data/ALLMB.CCESR.tre")
#trMB$tip.label <- gsub(" ", "_", phy$tip.label)
#trMB$tip.label <- gsub("sp.", "sp", trMB$tip.label)
BBSraw <- read.csv("Data/BBSpecies.biomass.2014.csv")[2:5]
bio.dat <- BBSraw
head(bio.dat)
bio.dat$Species <- gsub(" ", "_", bio.dat$Species)
bio.dat$Plot.Year <- paste(bio.dat$Plot, bio.dat$Year, sep = ";", collapse = NULL)   #join plot and year
bio.dat <- bio.dat[, -c(1, 2)]
bio.dat <- bio.dat[, c(3, 1, 2)]
bio.dat$Species <- gsub("Petalostemum_purpureum", "Dalea_purpurea", bio.dat$Species)
bio.dat$Species <- gsub("Petalostemum_candidum", "Dalea_candida", bio.dat$Species)
bio.dat$Species <- gsub("Petalostemum_villosum", "Dalea_pulchra", bio.dat$Species)
bio.dat$Species <- gsub("Taraxicum_officinalis", "Taraxacum_croceum", bio.dat$Species)
bio.dat$Species <- gsub("Leptoloma_cognatum", "Digitaria_ciliaris", bio.dat$Species)
bio.dat$Species <- gsub("Artemisia_.caudata._campestris", "Artemisia_caudata", bio.dat$Species)
bio.dat$Species <- gsub("Achillea_millefolium.lanulosa.", "Achillea_millefolium", bio.dat$Species)
bio.dat$Species <- gsub("Euphorbia_.supina._maculata", "Euphorbia_supina", bio.dat$Species)
bio.dat$Species <- gsub("Tragopogon_dubius_.major.", "Tragopogon_dubius", bio.dat$Species)
bio.dat$Species <- gsub("Ambrosia_artemisiifolia_elatior", "Ambrosia_artemisiifolia", bio.dat$Species)
bio.dat$Species <- gsub("Andropogon_gerardi", "Andropogon_gerardii", bio.dat$Species)
bio.dat$Species <- gsub("Erigeron_canadensis", "Erigeron_canadense", bio.dat$Species)
oldsp <- c("Petalostemum_purpureum", "Petalostemum_candidum", "Petalostemum_villosum",
"Taraxicum_officinalis", "Leptoloma_cognatum", "Artemisia_.caudata._campestris",
"Achillea_millefolium.lanulosa.", "Euphorbia_.supina._maculata",
"Tragopogon_dubius_.major.",
"Ambrosia_artemisiifolia_elatior","Andropogon_gerardii", "Erigeron_canadensis")
newsp <- c("Dalea_purpurea", "Dalea_candida", "Dalea_pulchra",
"Taraxacum_croceum", "Digitaria_ciliaris", "Artemisia_caudata",
"Achillea_millefolium", "Euphorbia_supina", "Tragopogon_dubius",
"Ambrosia_artemisiifolia", "Andropogon_gerardii", "Erigeron_canadense")
for(i in 1:length(oldsp)){
cat("FROM", oldsp[i], "TO", newsp[i], "\n")
bio.dat$Species <- gsub(oldsp[i], newsp[i], bio.dat$Species)
}
#Get list of species in big bio
spnames <- unique(bio.dat$Species)
trMBcom <- drop.tip(trMB, setdiff(trMB$tip.label, spnames))
setdiff(spnames, trMBcom$tip.label)
bio.dat <- data.frame(na.omit(bio.dat))
head(bio.dat)
BBScom <- data.frame(sample2matrix(bio.dat))
BBScom[1:10, 1:10]
matched <- picante::match.phylo.comm(phy = trMBcom, comm = BBScom)
# We can also calculate the standardized effect size of PD in each community
BBScdm <- ses.pd(matched$comm, matched$phy, runs = 99)
BBScdm <- BBScdm[, c(1, 2, 6, 7)]
head(BBScdm)
require(phytools)
# Simpsons
BBSraoD <- raoD(matched$comm, force.ultrametric(matched$phy))
BBScdm$RaoD <- BBSraoD$Dkk
# SESMPD
BBSsesmpd <- ses.mpd(matched$comm, cophenetic(matched$phy), runs = 99)
BBScdm$MPD <- BBSsesmpd[, c(2)]
BBScdm$sesMPD <- BBSsesmpd[, c(6)]
BBScdm$MPDpval <- BBSsesmpd[, c(7)]
# SESMNTD
BBSsesmntd <- ses.mntd(matched$comm, cophenetic(matched$phy), runs = 99)
BBScdm$MNTD <- BBSsesmntd[, c(2)]
BBScdm$sesMNTD <- BBSsesmntd[, c(6)]
BBScdm$MNTDpval <- BBSsesmntd[, c(7)]
# PSV or phylogenetic species variability
BBSpsv <- psv(matched$comm, matched$phy, compute.var = TRUE)
BBScdm$PSV <- BBSpsv[, 1]
# PSR or phylogenetic species richness
BBSpsr <- psr(matched$comm, matched$phy, compute.var = TRUE)
BBScdm$PSR <- BBSpsr[, 1]
# PSR or phylogenetic species evenness
BBSpse <- pse(matched$comm, matched$phy)
BBScdm$PSE <- BBSpse[, 1]
# Scheiner 2012 qD(p)
source("RFunctions/qDp.R")
BBSqDp <- qDp(matched$phy, matched$comm, q = 2)
BBScdm$qDP <-	BBSqDp
BBScdm2 <- BBScdm[, c(1, 2, 5, 6, 9, 12, 13, 14, 15)]
names(BBScdm2) <- c("SR", "PD", "RaoD", "MPD", "MNTD", "PSV", "PSR", "PSE", "qDP")
head(BBScdm2)
scatterplotMatrix(BBScdm)
BBSmds <- metaMDS(BBScdm2, trace = FALSE)
BBSmds <- metaMDS(na.omit(BBScdm2), trace = FALSE)
ordiplot(BBSmds, type = "t", display = "species")
