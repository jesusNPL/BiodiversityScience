} else {
infile=paste(base, "infile", sep=".")
write.tree(phy, infile)
}
smooth.file=paste(base, "dated.tre", sep=".")
outfile=paste(base, "treePL.orig.out", sep=".")
if(file.exists(outfile)) unlink(outfile)
if(!system("which treePL", ignore.stdout=TRUE)==0) stop("Install 'treePL' before proceeding.")
system(paste("treePL ", infile, " >", outfile, sep=" "))
#system(paste("grep \"tree\" ", outfile, ">", parsed.outfile, sep=" "))
smoothed=read.tree(smooth.file)
if(rm & base=="") {
unlink(smooth.file)
unlink(outfile)
unlink(infile)
}
return(smoothed)
}
treePL.phylo(phy = phy, calibrations = calibrations)
treePL.phylo(phy = phy, calibrations = calibrations)
sal$phy
treePL.phylo(phy = sal$phy, calibrations = res$calibrations)
treePL.phylo=function(phy, calibrations=NULL, base="xx", rm=TRUE){
phy$node.label=NULL
if(!is.null(calibrations)){
infile=write.treePL(phy=phy, calibrations=calibrations, base=base)
} else {
infile=paste(base, "infile", sep=".")
write.tree(phy, infile)
}
smooth.file=paste(base, "dated.tre", sep=".")
outfile=paste(base, "treePL.orig.out", sep=".")
if(file.exists(outfile)) unlink(outfile)
if(!system("which treePL", ignore.stdout=TRUE)==0) stop("Install 'treePL' before proceeding.")
system(paste("treePL ", infile, " >", outfile, sep=" "))
#system(paste("grep \"tree\" ", outfile, ">", parsed.outfile, sep=" "))
smoothed=read.tree(smooth.file)
if(rm & base=="") {
unlink(smooth.file)
unlink(outfile)
unlink(infile)
}
return(smoothed)
}
treePL.phylo=function(phy, calibrations=NULL, base="", rm=TRUE){
phy$node.label=NULL
if(!is.null(calibrations)){
infile=write.treePL(phy=phy, calibrations=calibrations, base=base)
} else {
infile=paste(base, "infile", sep=".")
write.tree(phy, infile)
}
smooth.file=paste(base, "dated.tre", sep=".")
outfile=paste(base, "treePL.orig.out", sep=".")
if(file.exists(outfile)) unlink(outfile)
if(!system("which treePL", ignore.stdout=TRUE)==0) stop("Install 'treePL' before proceeding.")
system(paste("treePL ", infile, " >", outfile, sep=" "))
#system(paste("grep \"tree\" ", outfile, ">", parsed.outfile, sep=" "))
smoothed=read.tree(smooth.file)
if(rm & base=="") {
unlink(smooth.file)
unlink(outfile)
unlink(infile)
}
return(smoothed)
}
treePL.phylo(phy = sal$phy, calibrations = res$calibrations, base = "xx")
sal$fam
sal$phy
sal$tax
treePL.phylo(phy = sal$phy, calibrations = res$calibrations, base = "phynew")
treePL.phylo(phy = phy, calibrations = calibrations, base = "phynew")
treePL.phylo(phy = sal$phy, calibrations = res$calibrations, base = "phyn")
print(res$calibrations)
.libPaths()
library(geiger)
## Not run:
phy <- read.tree(text=paste0("(Marchantia:0.033817,",
"(Lycopodium:0.040281,((Equisetum:0.048533",
"Osmunda:0.033640,Asplenium:0.036526):0.000425):",
"0.011806,((((Cycas:0.009460,Zamia:0.018847):",
"0.005021,Ginkgo:0.014702):1.687e-86,((Pinus:",
"0.021500,(Podocarpac:0.015649,Taxus:0.021081):",
"0.006473):0.002448,(Ephedra:0.029965,(Welwitsch",
":0.011298,Gnetum:0.014165):0.006883):0.016663)",
":0.006309):0.010855,((Nymphaea:0.016835,(((((Saururus:",
"0.019902,Chloranth:0.020151):1.687e-86,",
"((Araceae:0.020003,(Palmae:0.006005,Oryza:0.031555):",
"0.002933):0.007654,Acorus:0.038488):0.007844)",
":1.777e-83,(Calycanth:0.013524,Lauraceae:0.035902):",
"0.004656):1.687e-86,((Magnolia:0.015119,Drimys:",
"0.010172):0.005117,(Ranunculus:0.029027,((Nelumbo:",
"0.006180,Platanus:0.002347):0.003958,(Buxaceae:",
"0.013294,((Pisum:0.035675,(Fagus:0.009848,Carya:",
"0.008236):0.001459):0.001994,(Ericaceae:0.019136,",
"Solanaceae:0.041396):0.002619):1.687e-86):0.004803)",
":1.687e-86):0.006457):0.002918):0.007348,",
"Austrobail:0.019265):1.687e-86):1.687e-86,Amborella:",
"0.019263):0.003527):0.021625):0.012469),
0.019372);"))
0.019372);")
## Not run:
phy <- read.tree(text=paste0("(Marchantia:0.033817,",
"(Lycopodium:0.040281,((Equisetum:0.048533",
"Osmunda:0.033640,Asplenium:0.036526):0.000425):",
"0.011806,((((Cycas:0.009460,Zamia:0.018847):",
"0.005021,Ginkgo:0.014702):1.687e-86,((Pinus:",
"0.021500,(Podocarpac:0.015649,Taxus:0.021081):",
"0.006473):0.002448,(Ephedra:0.029965,(Welwitsch",
":0.011298,Gnetum:0.014165):0.006883):0.016663)",
":0.006309):0.010855,((Nymphaea:0.016835,(((((Saururus:",
"0.019902,Chloranth:0.020151):1.687e-86,",
"((Araceae:0.020003,(Palmae:0.006005,Oryza:0.031555):",
"0.002933):0.007654,Acorus:0.038488):0.007844)",
":1.777e-83,(Calycanth:0.013524,Lauraceae:0.035902):",
"0.004656):1.687e-86,((Magnolia:0.015119,Drimys:",
"0.010172):0.005117,(Ranunculus:0.029027,((Nelumbo:",
"0.006180,Platanus:0.002347):0.003958,(Buxaceae:",
"0.013294,((Pisum:0.035675,(Fagus:0.009848,Carya:",
"0.008236):0.001459):0.001994,(Ericaceae:0.019136,",
"Solanaceae:0.041396):0.002619):1.687e-86):0.004803)",
":1.687e-86):0.006457):0.002918):0.007348,",
"Austrobail:0.019265):1.687e-86):1.687e-86,Amborella:",
"0.019263):0.003527):0.021625):0.012469),
0.019372);")))
## Not run:
phy <- read.tree(text=paste0("(Marchantia:0.033817,",
"(Lycopodium:0.040281,((Equisetum:0.048533",
"Osmunda:0.033640,Asplenium:0.036526):0.000425):",
"0.011806,((((Cycas:0.009460,Zamia:0.018847):",
"0.005021,Ginkgo:0.014702):1.687e-86,((Pinus:",
"0.021500,(Podocarpac:0.015649,Taxus:0.021081):",
"0.006473):0.002448,(Ephedra:0.029965,(Welwitsch",
":0.011298,Gnetum:0.014165):0.006883):0.016663)",
":0.006309):0.010855,((Nymphaea:0.016835,(((((Saururus:",
"0.019902,Chloranth:0.020151):1.687e-86,",
"((Araceae:0.020003,(Palmae:0.006005,Oryza:0.031555):",
"0.002933):0.007654,Acorus:0.038488):0.007844)",
":1.777e-83,(Calycanth:0.013524,Lauraceae:0.035902):",
"0.004656):1.687e-86,((Magnolia:0.015119,Drimys:",
"0.010172):0.005117,(Ranunculus:0.029027,((Nelumbo:",
"0.006180,Platanus:0.002347):0.003958,(Buxaceae:",
"0.013294,((Pisum:0.035675,(Fagus:0.009848,Carya:",
"0.008236):0.001459):0.001994,(Ericaceae:0.019136,",
"Solanaceae:0.041396):0.002619):1.687e-86):0.004803)",
":1.687e-86):0.006457):0.002918):0.007348,",
"Austrobail:0.019265):1.687e-86):1.687e-86,Amborella:",
"0.019263):0.003527):0.021625):0.012469),
0.019372));"))
## Not run:
phy <- read.tree(text=paste0("(Marchantia:0.033817,",
"(Lycopodium:0.040281,((Equisetum:0.048533",
"Osmunda:0.033640,Asplenium:0.036526):0.000425):",
"0.011806,((((Cycas:0.009460,Zamia:0.018847):",
"0.005021,Ginkgo:0.014702):1.687e-86,((Pinus:",
"0.021500,(Podocarpac:0.015649,Taxus:0.021081):",
"0.006473):0.002448,(Ephedra:0.029965,(Welwitsch",
":0.011298,Gnetum:0.014165):0.006883):0.016663)",
":0.006309):0.010855,((Nymphaea:0.016835,(((((Saururus:",
"0.019902,Chloranth:0.020151):1.687e-86,",
"((Araceae:0.020003,(Palmae:0.006005,Oryza:0.031555):",
"0.002933):0.007654,Acorus:0.038488):0.007844)",
":1.777e-83,(Calycanth:0.013524,Lauraceae:0.035902):",
"0.004656):1.687e-86,((Magnolia:0.015119,Drimys:",
"0.010172):0.005117,(Ranunculus:0.029027,((Nelumbo:",
"0.006180,Platanus:0.002347):0.003958,(Buxaceae:",
"0.013294,((Pisum:0.035675,(Fagus:0.009848,Carya:",
"0.008236):0.001459):0.001994,(Ericaceae:0.019136,",
"Solanaceae:0.041396):0.002619):1.687e-86):0.004803)",
":1.687e-86):0.006457):0.002918):0.007348,",
"Austrobail:0.019265):1.687e-86):1.687e-86,Amborella:",
"0.019263):0.003527):0.021625):0.012469),
0.019372);"))
## Not run:
phy <- read.tree(text=paste0("((Marchantia:0.033817,",
"(Lycopodium:0.040281,((Equisetum:0.048533",
"Osmunda:0.033640,Asplenium:0.036526):0.000425):",
"0.011806,((((Cycas:0.009460,Zamia:0.018847):",
"0.005021,Ginkgo:0.014702):1.687e-86,((Pinus:",
"0.021500,(Podocarpac:0.015649,Taxus:0.021081):",
"0.006473):0.002448,(Ephedra:0.029965,(Welwitsch",
":0.011298,Gnetum:0.014165):0.006883):0.016663)",
":0.006309):0.010855,((Nymphaea:0.016835,(((((Saururus:",
"0.019902,Chloranth:0.020151):1.687e-86,",
"((Araceae:0.020003,(Palmae:0.006005,Oryza:0.031555):",
"0.002933):0.007654,Acorus:0.038488):0.007844)",
":1.777e-83,(Calycanth:0.013524,Lauraceae:0.035902):",
"0.004656):1.687e-86,((Magnolia:0.015119,Drimys:",
"0.010172):0.005117,(Ranunculus:0.029027,((Nelumbo:",
"0.006180,Platanus:0.002347):0.003958,(Buxaceae:",
"0.013294,((Pisum:0.035675,(Fagus:0.009848,Carya:",
"0.008236):0.001459):0.001994,(Ericaceae:0.019136,",
"Solanaceae:0.041396):0.002619):1.687e-86):0.004803)",
":1.687e-86):0.006457):0.002918):0.007348,",
"Austrobail:0.019265):1.687e-86):1.687e-86,Amborella:",
"0.019263):0.003527):0.021625):0.012469),
0.019372);"))
phy
plot(phy)
getwd()
remotes::install_github("eliotmiller/metricTester")
remotes::install_github("gdauby/spacodiR@main")
remotes::install_github("eliotmiller/metricTester")
install.packages("mobr")
data(inv_comm)
library(mobr)
data(inv_comm)
data(inv_plot_attr)
View(inv_comm)
View(inv_plot_attr)
View(inv_plot_attr)
inv_mob_in = make_mob_in(inv_comm, inv_plot_attr, coord_names = c('x', 'y'))
inv_mob_in
inv_stats = get_mob_stats(inv_mob_in, 'group', ref_level = 'uninvaded')
plot(inv_stats)
inv_stats
calc_PIE(inv_comm)
calc_PIE(inv_comm, ENS=TRUE)
1/calc_PIE(inv_comm)
1-calc_PIE(inv_comm)
cor.test(calc_PIE(inv_comm), calc_PIE(inv_comm, ENS = TRUE))
?vegan::diversity
library(vegan)
cor.test(calc_PIE(inv_comm), diversity(inv_comm), "simpson"))
cor.test(calc_PIE(inv_comm), diversity(inv_comm, "simpson"))
cor.test(calc_PIE(inv_comm), diversity(inv_comm, "inv"))
specnumber(inv_comm, MARGIN = 1)
cor.test(calc_PIE(inv_comm), calc_PIE(inv_comm, ENS = TRUE))
cor.test(calc_PIE(inv_comm), specnumber(inv_comm, MARGIN = 1))
cor.test(calc_PIE(inv_comm ENS = TRUE), specnumber(inv_comm, MARGIN = 1))
cor.test(calc_PIE(inv_comm), calc_PIE(inv_comm, ENS = TRUE))
cor.test(calc_PIE(inv_comm), specnumber(inv_comm, MARGIN = 1))
cor.test(calc_PIE(inv_comm, ENS = TRUE), specnumber(inv_comm, MARGIN = 1))
cor.test(calc_PIE(inv_comm), diversity(inv_comm, "simpson"))
cor.test(calc_PIE(inv_comm), diversity(inv_comm, "inv"))
library(vegan)
calc_PIE
?calc_PIE
cor.test(calc_PIE(inv_comm), diversity(inv_comm, "simpson"))
cor.test(calc_PIE(inv_comm), diversity(inv_comm, "inv"))
cor.test(calc_PIE(inv_comm, ENS = TRUE), diversity(inv_comm, "simpson"))
cor.test(calc_PIE(inv_comm, ENS = TRUE), diversity(inv_comm, "inv"))
cor.test(calc_PIE(inv_comm), diversity(inv_comm, "simpson"))
plot(calc_PIE(inv_comm), diversity(inv_comm, "simpson"))
plot(calc_PIE(inv_comm), diversity(inv_comm, "inv"))
plot(calc_PIE(inv_comm, ENS = TRUE), diversity(inv_comm, "simpson"))
plot(calc_PIE(inv_comm, ENS = TRUE), diversity(inv_comm, "inv"))
setwd("Documents/GitHub/BiodiversityScience/Spring2024/")
#| eval: false
packages <- c("coronavirus", "deSolve", "lubridate", "scales", "PrettyCols")
# Package vector names
#| eval: false
# Install packages not yet installed
installed_packages <- packages %in% rownames(installed.packages())
if (any(installed_packages == FALSE)) {
install.packages(packages[!installed_packages], dependencies = TRUE)
}
#| eval: false
library(tidyverse)
library(lubridate)
library(coronavirus)
library(PrettyCols)
library(scales)
library(deSolve)
#| eval: false
data("coronavirus")
glimpse(coronavirus)
#| eval: false
corona <- refresh_coronavirus_jhu()
corona %>%
head(10)
#| eval: false
githubURL <- "https://github.com/jesusNPL/BiodiversityScience/raw/master/Spring2023/Lab_3/Data/corona.RData"
load(url(githubURL))
glimpse(corona)
#| eval: false
# Get top confirmed cases by country
corona %>%
filter(data_type == "cases_new") %>%
group_by(location) %>%
summarise(total = sum(value)) %>%
arrange(-total) %>%
head(20) %>%
ggplot(aes(y = as.factor(location), x = total)) +
geom_bar(stat = "identity")
#| eval: false
# Aux function for visualization
theme_nice <- function() {
theme_bw() + #base_family = "Noto Sans") +
theme(panel.grid.minor = element_blank(),
plot.background = element_rect(fill = "white", color = NA),
#plot.title = element_text(face = "bold"),
#strip.text = element_text(face = "bold"),
strip.background = element_rect(fill = "grey80", color = NA),
legend.title = element_text(face = "bold", size = 15),
legend.text = element_text(size = 12))
}
# Get top confirmed cases by country
corona %>%
filter(data_type == "cases_new") %>%
group_by(location) %>%
summarise(total = sum(value)) %>%
arrange(-total) %>%
head(20) %>%
ggplot(aes(y = as.factor(location), x = total)) +
geom_bar(stat = "identity", alpha = 0.7) +
scale_x_continuous(labels = scales::label_number(suffix = " M", scale = 1e-6)) +
labs(x = "Number of cases", y = "Countries with more reported cases") +
theme_nice()
#| eval: false
corona_us <- corona %>%
filter(location == "US") %>%
arrange(desc(date)) # sort the data according dates
#| eval: false
infected_us <- corona %>%
filter(location == "US") %>%
arrange(desc(date)) %>%
filter(data_type == "cases_new")
deaths_us <- corona %>%
filter(location == "US") %>%
arrange(desc(date)) %>%
filter(data_type == "deaths_new")
recovered_us <- corona %>%
filter(location == "US") %>%
arrange(desc(date)) %>%
filter(data_type == "recovered_new")
head(infected_us)
#| eval: false
corona_us %>%
filter(data_type == "cases_new") %>%
ggplot(aes(x = as.POSIXct(date), y = value)) +
geom_point(color = "gray") +
labs(x = NULL, y = "COVID-19 new cases") +
geom_line(mapping = aes(x = as.POSIXct(date)), linewidth = 2,
colour = alpha(PrettyCols::prettycols("Purples")[4], 0.3)) +
geom_smooth(colour = PrettyCols::prettycols("Purples")[1], linewidth = 2) +
scale_y_continuous(labels = scales::label_number(suffix = " M", scale = 1e-6)) +
scale_x_datetime(date_breaks = "2 month", labels = scales::label_date_short()) +
theme_nice()
#| eval: false
# https://covid.cdc.gov/covid-data-tracker/#trends_weeklycases_select_27
# Get data from the CDC
url_data <- "https://data.cdc.gov/api/views/9mfq-cb36/rows.csv?accessType=DOWNLOAD"
covid_us <- read.csv(url_data)
#| eval: false
githubURL <- "https://github.com/jesusNPL/BiodiversityScience/raw/master/Spring2023/Lab_3/Data/covidUS.RData"
load(url(githubURL))
glimpse(covid_us)
#| eval: false
covid_us %>%
arrange(state) %>%
drop_na(tot_cases) %>%
ggplot(aes(y = state, x = tot_cases)) +
geom_bar(stat = "identity") +
labs(x = "Number of cases", y = "Reported cases by State") +
scale_x_continuous(labels = scales::label_number(suffix = " M", scale = 1e-6)) +
theme_nice()
#| eval: false
covid_us <- covid_us %>%
mutate(Date = submission_date) %>%
mutate(Date = mdy(Date)) %>%
select(Date, everything()) %>%
separate(submission_date, sep = "/", into = c("month", "day", "year"))
# Sort the data in an increasing order
covid_us <- covid_us[order(covid_us$Date), ]
head(covid_us)
#| eval: false
covid_mn <- covid_us %>%
filter(state == "MN")
head(covid_mn)
#| eval: false
covid_mn %>%
ggplot(aes(x = as.POSIXct(Date), y = new_case)) +
geom_point(color = "gray") +
labs(x = NULL, y = "COVID-19 new cases") +
geom_line(mapping = aes(x = as.POSIXct(Date)), linewidth = 2,
colour = alpha(PrettyCols::prettycols("Purples")[4], 0.3)) +
geom_smooth(colour = PrettyCols::prettycols("Purples")[1], linewidth = 2) +
scale_y_continuous(labels = scales::label_number(suffix = " M", scale = 1e-6)) +
scale_x_datetime(date_breaks = "2 month", labels = label_date_short()) +
theme_nice()
#| eval: false
covid_mn %>%
ggplot(aes(x = as.POSIXct(Date), y = tot_cases)) +
geom_point(color = "gray") +
labs(x = NULL, y = "Total COVID-19 cases") +
geom_line(mapping = aes(x = as.POSIXct(Date)), linewidth = 2,
colour = alpha(PrettyCols::prettycols("Purples")[4], 0.3)) +
geom_smooth(colour = PrettyCols::prettycols("Purples")[1], linewidth = 1) +
scale_y_continuous(labels = scales::label_number(suffix = " M", scale = 1e-6)) +
scale_x_datetime(date_breaks = "2 month", labels = label_date_short()) +
theme_nice()
#| eval: false
covid_mn %>%
ggplot(aes(x = as.POSIXct(Date), y = abs(new_death))) +
geom_point(color = "gray") +
labs(x = NULL, y = "Number of Deaths") +
geom_line(mapping = aes(x = as.POSIXct(Date)), linewidth = 2,
colour = alpha(PrettyCols::prettycols("Purples")[4], 0.3)) +
geom_smooth(colour = PrettyCols::prettycols("Purples")[1], linewidth = 1) +
scale_y_continuous(labels = scales::label_number(suffix = " K", scale = 1e-6)) +
scale_x_datetime(date_breaks = "2 month", labels = label_date_short()) +
theme_nice()
#| eval: false
SIR <- function(time, state, parameters) {
par <- as.list(c(state, parameters))
with(par, {
dS <- -Beta * I * S / N # Equation one
dI <- Beta * I * S / N - Gamma * I # Equation two
dR <- Gamma * I # Equation three
list(c(dS, dI, dR))
})
}
#| eval: false
RSS <- function(parameters) {
names(parameters) <- c("Beta", "Gamma")
out <- ode(y = init, times = Days, func = SIR, parms = parameters)
# the out object includes the SIR function we wrote above
fit <- out[, 3]
sum((Infected - fit)^2)
}
#| eval: false
covid_mn %>%
filter(Date == "2020-03-06")
#| eval: false
N <- 5686649 # Total population for the State of Minnesota for the 2020
start_date <- "2020-03-06"
end_date <- "2020-05-10"
# isolating the infected subjects in the state of Minnesota since the start date
Infections <- covid_mn %>%
filter(Date >= ymd(start_date) & Date <= ymd(end_date))
#Infected2 <- subset(covid_mn, Date >= ymd(start_date) & Date <= ymd(end_date))$new_case
#| eval: false
Infections %>%
ggplot(aes(x = as.POSIXct(Date), y = log(new_case))) +
geom_point(color = "gray") +
#geom_line(mapping = aes(x = as.POSIXct(Date)), linewidth = 2,
#         colour = alpha(PrettyCols::prettycols("Purples")[4], 0.3)) +
geom_smooth(colour = PrettyCols::prettycols("Purples")[1], linewidth = 1) +
labs(x = NULL, y = "log - COVID-19 cases") +
theme_nice()
#| eval: false
# ODE does not like tidy format, so we are going to isolate the number of cases in R base.
Infected <- Infections$new_case
Days <- 1:length(Infected) # Number of days since the first case
# Initial values for our SIR model
init <- c(
S = N - Infected[1], # Susceptible group
I = Infected[1], # Infected group
R = 0 # Recovered group.
)
#| eval: false
Opt <- optim(c(0.5, 0.5),
RSS,
method = "L-BFGS-B",
lower = c(0, 0),
upper = c(1, 1)
)
#| eval: false
# optimize with some sensible conditions
Opt$message
# [1] "CONVERGENCE: REL_REDUCTION_OF_F <= FACTR*EPSMCH"
#| eval: false
Opt_par <- setNames(Opt$par, c("Beta", "Gamma"))
Opt_par
#| eval: false
# get the fitted values from our SIR model
fit_incidence <- data.frame(ode(
y = init, times = Days,
func = SIR, parms = Opt_par
))
head(fit_incidence)
tail(fit_incidence)
#| eval: false
matplot(fit_incidence$time, fit_incidence$I,
type = "l", log = "y",
xlab = "Days", ylab = "Number of infected subjects",
lwd = 2, lty = 1)
points(Days, Infected)
#| eval: false
R0 <- setNames(Opt_par["Beta"] / Opt_par["Gamma"], "R0")
round(R0, 3)
#| eval: false
times <- 1:350 # time in days
fit_350 <- data.frame(ode(
y = init, times = times,
func = SIR, parms = Opt_par))
head(fit_350)
tail(fit_350)
#| eval: false
cols <- 1:3 # colors: black = susceptible, red = infected and green = recovered
#| eval: false
matplot(fit_350$time, fit_350[, 2:4], type = "l",
xlab = "Days", ylab = "Number of subjects",
lwd = 2, lty = 1, col = cols)
legend("left", c("Susceptible", "Infected", "Recovered"),
lty = 1, lwd = 2, col = cols, inset = 0.05)
#| eval: false
matplot(fit_350$time, fit_350[ , 2:4], type = "l",
xlab = "Days", ylab = "Number of subjects",
lwd = 2, lty = 1, col = cols, log = "y")
## Warning in xy.coords(x, y, xlabel, ylabel, log = log): 1 y value <= 0
## omitted from logarithmic plot
points(Days, Infected)
legend("bottomright", c("Susceptible", "Infected", "Recovered"),
lty = 1, lwd = 2, col = cols, inset = 0.05)
title("SIR model 2019-nCoV United States", outer = TRUE, line = -2)
#| eval: false
# Peak of the pandemic for the first 60 days
fit_incidence[fit_incidence$I == max(fit_incidence$I), c("time", "I")]
#| eval: false
max(fit_incidence$I) * 0.02 # Assuming 2% of fatality rate
