#| eval: false
if ( ! ("rhdf5" %in% installed.packages())) {BiocManager::install("rhdf5")}
#| eval: false
sapply(packages, require, character.only = TRUE)
library(rhdf5)
library(tidyverse)
#| eval: false
dir.create("data")
dir.create("data/NEON")
#| eval: false
NEON_plots <- st_read("data/All_NEON_TOS_Plots_V10/All_NEON_TOS_Plot_Centroids_V10.shp")
#| eval: false
NEON_plots <- st_read("data/All_NEON_TOS_Plots_V10/All_NEON_TOS_Plot_Centroids_V10.shp")
#| eval: false
HARV_plots <- NEON_plots %>%
filter(siteID == "HARV" & plotType == "distributed" & subtype == "basePlot") %>%
arrange(plotID)
#| eval: false
east <- HARV_plots$easting
names(east) <- HARV_plots$plotID
north <- HARV_plots$northing
names(north) <- HARV_plots$plotID
coords_HARV_001 <- c(east[1], north[1])
coords_HARV_001
byTileAOP(dpID = "DP3.30006.001", # NEON-AOP product
site = "HARV", # Site code
year = "2019", # Year
check.size = TRUE,
easting = coords_HARV_001[1],
northing = coords_HARV_001[2], # Coordinates UTM
savepath = "data/NEON", # Path
token = NA)
#| eval: false
f <- "data/NEON/DP3.30006.001/neon-aop-products/2019/FullSite/D01/2019_HARV_6/L3/Spectrometer/Reflectance/NEON_D01_HARV_DP3_725000_4700000_reflectance.h5"
#| eval: false
View(h5ls(f, all = TRUE))
#| eval: false
# Get information about the wavelengths of HARV plot 001
wlInfo <- h5readAttributes(f, "/HARV/Reflectance/Metadata/Spectral_Data/Wavelength")
wlInfo
#| eval: false
WL <- h5read(f, "/HARV/Reflectance/Metadata/Spectral_Data/Wavelength")
head(WL)
tail(WL)
#| eval: false
reflInfo <- h5readAttributes(f, "/HARV/Reflectance/Reflectance_Data")
reflInfo
#| eval: false
WL[34]
#| eval: false
nRows <- reflInfo$Dimensions[1]
nCols <- reflInfo$Dimensions[2]
nBands <- reflInfo$Dimensions[3]
nRows
nCols
nBands
#| eval: false
b34 <- h5read(f, "/HARV/Reflectance/Reflectance_Data",
index = list(34, 1:nCols, 1:nRows)) # get band 34
# what type of object is b34?
class(b34)
## [1] "array"
#| eval: false
# convert from array to matrix by selecting only the first band
b34 <- b34[1,, ]
# check it
class(b34)
#| eval: false
image(b34)
#| eval: false
image(log(b34))
# there is NO data value in our raster - let's define it
myNoDataValue <- as.numeric(reflInfo$Data_Ignore_Value)
myNoDataValue
# set all values equal to -9999 to NA
b34[b34 == myNoDataValue] <- NA
# plot the image now
image(b34)
#| eval: false
# there is NO data value in our raster - let's define it
myNoDataValue <- as.numeric(reflInfo$Data_Ignore_Value)
myNoDataValue
# set all values equal to -9999 to NA
b34[b34 == myNoDataValue] <- NA
# plot the image now
image(b34)
#| eval: false
# Extract the EPSG from the h5 dataset
myEPSG <- h5read(f, "/HARV/Reflectance/Metadata/Coordinate_System/EPSG Code")
myEPSG
# convert the EPSG code to a CRS string
myCRS <- crs(paste0("+init=epsg:", myEPSG))
myCRS
#| eval: false
b34ras <- rast(b34, crs = myCRS)
# view the raster attributes
b34ras
#| eval: false
image(log(b34ras),
xlab = "UTM Easting",
ylab = "UTM Northing",
main = "Properly Oriented Raster")
#| eval: false
# Grab the UTM coordinates of the spatial extent
xMin <- reflInfo$Spatial_Extent_meters[1]
xMax <- reflInfo$Spatial_Extent_meters[2]
yMin <- reflInfo$Spatial_Extent_meters[3]
yMax <- reflInfo$Spatial_Extent_meters[4]
#| eval: false
# define the extent (left, right, top, bottom)
rasExt <- ext(xMin, xMax, yMin, yMax)
# view the extent to make sure that it looks right
rasExt
#| eval: false
ext(b34ras) <- rasExt
# look at raster attributes
b34ras
#| eval: false
col <- terrain.colors(25)
image(b34ras,
xlab = "UTM Easting",
ylab = "UTM Northing",
main = "Raster with Custom Colors",
col = col,
zlim = c(0, 1000))
#| eval: false
# Create a new folder to store the results
dir.create("output")
# write out the raster as a geotiff
writeRaster(b34ras,
file = "output/DP3.30006.001/HARV_plot_001_band_34.tif",
overwrite = TRUE)
#| eval: false
# Create a new folder to store the results
dir.create("output")
# write out the raster as a geotiff
writeRaster(b34ras,
file = "output/HARV_plot_001_band_34.tif",
overwrite = TRUE)
#| eval: false
# file: the hdf file
# band: the band you want to process
# noDataValue: values to be omitted
# extent: raster extent
# CRS: coordinates system
# returns: a matrix containing the reflectance data for the specific band
band2Raster <- function(file, band, noDataValue, extent, CRS){
# first, read in the raster
out <- h5read(file, "/HARV/Reflectance/Reflectance_Data",
index = list(band, NULL, NULL)) # path to the HDF5 file
# Convert from array to matrix
out <- (out[1,, ]) # output
# transpose data to fix flipped row and column order
# depending upon how your data are formatted you might not have to perform this
# step.
out <- t(out)
# assign data ignore values to NA
# note, you might chose to assign values of 15000 to NA
out[out == myNoDataValue] <- NA
# turn the out object into a raster
outr <- rast(out, crs = CRS)
# assign the extents to the raster
ext(outr) <- extent
# return the raster object
return(outr)
}
#| eval: false
# create a list of the bands we want in our stack
rgb <- list(58, 34, 19)
# lapply tells R to apply the function to each element in the list
rgb_harv <- lapply(rgb, # band numbers
FUN = band2Raster, # function
file = f, # file from where data is extracted
noDataValue = myNoDataValue, # No data
extent = rasExt, # extent
CRS = myCRS) # Coordinate system
# check out the properties or rgb_rast
# note that it displays properties of 3 rasters.
rgb_harv
#| eval: false
# Create a raster stack from our list of rasters
rgb_harv_stack <- rast(rgb_harv)
rgb_harv_stack
#| eval: false
# Create a list of band names
bandNames <- paste("Band_", unlist(rgb), sep = "")
# set the rasterStack's names equal to the list of bandNames created above
names(rgb_harv_stack) <- bandNames
# check properties of the raster list - note the band names
rgb_harv_stack
# scale the data as specified in the reflInfo$Scale Factor
rgb_harv_stack <- rgb_harv_stack/as.integer(reflInfo$Scale_Factor)
# plot one raster in the stack to make sure things look OK.
plot(rgb_harv_stack$Band_58, main = "Band 58")
#| eval: false
# create a 3 band RGB image
plotRGB(rgb_harv_stack, # rasterstack
r = 1, # red band
g = 2, # green band
b = 3, # blue band
stretch = "lin")
#| eval: false
# write out final raster
writeRaster(rgb_harv_stack,
file = "output/HARV_plot_001_RGB.tif",
overwrite = TRUE)
#| eval: false
# select bands to use in calculation (red, NIR)
ndvi_bands <- c(58, 90) #bands c(58, 90) in full NEON hyperspectral dataset
# create raster list and then a stack using those two bands
ndvi_harv <- lapply(ndvi_bands,
FUN = band2Raster,
file = f,
noDataValue = myNoDataValue,
extent = rasExt,
CRS = myCRS)
ndvi_harv <- rast(ndvi_harv)
# make the names pretty
bandNDVINames <- paste("Band_", unlist(ndvi_bands), sep = "")
names(ndvi_harv) <- bandNDVINames
# view the properties of the new raster stack
ndvi_harv
#| eval: false
#calculate NDVI
NDVI_func <- function(ras) {
(ras[, 2] - ras[, 1])/(ras[, 2] + ras[, 1])
}
#| eval: false
ndvi_calc <- app(ndvi_harv,
fun = NDVI_func)
plot(ndvi_calc,
main = "NDVI for the NEON HARV Field Site")
#| eval: false
myCol <- rev(terrain.colors(4)) # use the 'rev()' function to put green as the highest NDVI value
# add breaks to the colormap, including lowest and highest values (4 breaks = 3 segments)
brk <- c(0, .25, .5, .75, 1)
# plot the image using breaks
plot(ndvi_calc,
main = "NDVI for the NEON HARV Field Site",
col = myCol,
breaks = brk)
#| eval: false
writeRaster(ndvi_calc,
file = "output/HARV_plot_001_NDVI.tif",
overwrite = TRUE)
#| eval: false
# extract all bands from a single pixel
aPixel <- h5read(f, "/HARV/Reflectance/Reflectance_Data",
index = list(NULL, 100, 35))
class(aPixel)
# The line above generates a vector of reflectance values.
# Next, we reshape the data and turn them into a dataframe
b <- adply(aPixel, c(1))
class(b)
# create clean data frame
aPixeldf <- b[2]
# add wavelength data to matrix
aPixeldf$Wavelength <- WL
head(aPixeldf)
reflInfo$Scale_Factor
#| eval: false
scaleFact <- reflInfo$Scale_Factor
# add scaled data column to the data frame
aPixeldf$scaled <- (aPixeldf$V1/as.vector(scaleFact))
# make nice column names
names(aPixeldf) <- c('Reflectance', 'Wavelength', 'ScaledReflectance')
head(aPixeldf)
tail(aPixeldf)
#| eval: false
aPixeldf %>%
ggplot(aes(x = Wavelength, y = ScaledReflectance)) +
geom_line() +
xlab("Wavelength (nm)") +
ylab("Reflectance") +
theme_bw()
#| eval: false
# install the package {geoNEON}
#remotes::install_github('NEONScience/NEON-geolocation/geoNEON', dependencies = TRUE)
if ( ! ("rhdf5" %in% installed.packages()))
{remotes::install_github('NEONScience/NEON-geolocation/geoNEON',
dependencies = TRUE)}
library(geoNEON)
#| eval: false
# Download Woody plant vegetation structure from NEON #####
zipsByProduct(
dpID = "DP1.10098.001",
site = "HARV",
savepath = "data/NEON",
check.size = FALSE
)
## Combine the files
stackByTable("data/NEON/filesToStack10098", folder = TRUE)
#| eval: false
# Calculate the more precise location for each NEON plot in the HARV site
vegmap <- "data/NEON/filesToStack10098/stackedFiles/vst_mappingandtagging.csv" %>%
read_csv() %>%
mutate(year = substr(date, 1, 4)) %>%
filter(year == '2019') %>%
getLocTOS("vst_mappingandtagging") # Calculate more precise geolocations for specific NEON data products
# Load individual tree coordinates
vegind <- read_csv("data/NEON/filesToStack10098/stackedFiles/vst_apparentindividual.csv")
# Combine the coordinates with three identification
vegetation <- right_join(vegind, vegmap,
by = c("individualID", "namedLocation", "domainID", "siteID", "plotID")) %>%
filter(!is.na(adjEasting), !is.na(adjNorthing),
plantStatus == "Live")
#| eval: false
harv_01_trees <- vegetation %>%
select(adjNorthing, adjEasting, scientificName, plotID,
adjDecimalLatitude, adjDecimalLongitude) %>%
filter(plotID == "HARV_001")
# SF format
harv_01_trees_sf <- st_as_sf(harv_01_trees,
coords = c("adjEasting", "adjNorthing"),
crs = crs(ndvi_calc))
# SPT format
harv_01_trees_spt <- harv_01_trees
coordinates(harv_01_trees_spt) <- ~ adjEasting + adjNorthing
crs(harv_01_trees_spt) <- crs(ndvi_calc)
library(sp)
crs(harv_01_trees_spt) <- crs(ndvi_calc)
#| eval: false
unique(harv_01_trees$scientificName)
length(harv_01_trees$scientificName)
#| eval: false
plot(ndvi_harv[[1]])
plot(harv_01_trees_sf, add = TRUE)
#| eval: false
#remotes::install_github('earthlab/neonhs')
if ( ! ("rhdf5" %in% installed.packages()))
{remotes::install_github('earthlab/neonhs')}
library(neonhs)
#| eval: false
# Path to access the hyperspectral data
hs_path_2019 <- list.files(
path = "data/NEON/DP3.30006.001/neon-aop-products/2019/",
pattern = "reflectance.h5",
recursive = TRUE, full.names = TRUE
)
# extract the spectra data
resHARV_001 <- neonhs::hs_extract_pts(filename = hs_path_2019, # path to the h5 file
pts = harv_01_trees_spt, # spatial points
bands = 1:426) # which bands
resHARV_001
#| eval: false
# Path to access the hyperspectral data
hs_path_2019 <- list.files(
path = "data/NEON/DP3.30006.001/neon-aop-products/2019/",
pattern = "reflectance.h5",
recursive = TRUE, full.names = TRUE
)
# extract the spectra data
resHARV_001 <- neonhs::hs_extract_pts(filename = hs_path_2019, # path to the h5 file
pts = harv_01_trees_sf, # spatial points
bands = 1:426) # which bands
# SPT format
harv_01_trees_spt <- harv_01_trees
coordinates(harv_01_trees_spt) <- ~ adjEasting + adjNorthing
crs(ndvi_calc)
crs(harv_01_trees_spt)
crs(harv_01_trees_spt) <- crs(ndvi_calc)
#| eval: false
harv_01_trees <- vegetation %>%
select(adjNorthing, adjEasting, scientificName, plotID,
adjDecimalLatitude, adjDecimalLongitude) %>%
filter(plotID == "HARV_001")
# SF format
harv_01_trees_sf <- st_as_sf(harv_01_trees,
coords = c("adjEasting", "adjNorthing"),
crs = crs(ndvi_calc))
# SPT format
harv_01_trees_spt <- harv_01_trees
coordinates(harv_01_trees_spt) <- ~ adjEasting + adjNorthing
crs(harv_01_trees_spt) <- crs(ndvi_calc)
#| eval: false
plot(ndvi_harv[[1]])
plot(harv_01_trees_sf, add = TRUE)
harv_01_trees_spt
#| eval: false
# Path to access the hyperspectral data
hs_path_2019 <- list.files(
path = "data/NEON/DP3.30006.001/neon-aop-products/2019/",
pattern = "reflectance.h5",
recursive = TRUE, full.names = TRUE
)
# extract the spectra data
resHARV_001 <- neonhs::hs_extract_pts(filename = hs_path_2019, # path to the h5 file
pts = harv_01_trees_spt, # spatial points
bands = 1:426) # which bands
resHARV_001
#| eval: false
resHARV_001_df <- as.data.frame(resHARV_001) %>%
bind_rows() %>%
as_tibble() %>%
dplyr::select(!c("band418_2472nm", "band419_2477nm", "band420_2482nm", "band421_2487nm",
"band422_2492nm", "band423_2497nm", "band424_2502nm", "band425_2507nm",
"band426_2512nm", "adjEasting.1", "adjNorthing.1")) %>%
dplyr::select(plotID, scientificName, adjNorthing, adjEasting, adjDecimalLongitude, adjDecimalLatitude, everything())
resHARV_001_df
?as_tibble
as.data.frame(resHARV_001) %>%
bind_rows() %>%
tibble()
#| eval: false
resHARV_001_df <- as.data.frame(resHARV_001) %>%
bind_rows() %>%
tibble() %>%
dplyr::select(!c("band418_2472nm", "band419_2477nm", "band420_2482nm", "band421_2487nm",
"band422_2492nm", "band423_2497nm", "band424_2502nm", "band425_2507nm",
"band426_2512nm", "adjEasting.1", "adjNorthing.1")) %>%
dplyr::select(plotID, scientificName, adjNorthing, adjEasting, adjDecimalLongitude, adjDecimalLatitude, everything())
resHARV_001_df
#| eval: false
resHARV_001_df_long <- resHARV_001_df %>%
dplyr::select(!c(plotID, adjNorthing, adjEasting, adjDecimalLongitude, adjDecimalLatitude)) %>%
reshape2::melt(id.vars = "scientificName",
variable.name = "Wavelength",
value.name = "Reflectance")
resHARV_001_df_long <- resHARV_001_df_long %>%
mutate(Wavelength2 = Wavelength) %>%
separate(Wavelength2, into = c("bands", "wl"), sep = "_") %>%
mutate(WL = as.numeric(gsub("[nm]", "", wl))) %>%
mutate(scientificName = as.factor(scientificName))
#| eval: false
# Aux function for visualization
theme_lab6 <- function() {
theme_bw() +
theme(panel.grid.minor = element_blank(),
plot.background = element_rect(fill = "white", color = NA),
strip.background = element_rect(fill = "grey80", color = NA),
legend.title = element_text(face = "bold", size = 15),
legend.text = element_text(size = 12))
}
# plot the spectra by species
resHARV_001_df_long %>%
drop_na() %>%
ggplot() +
geom_line(aes(x = WL, y = Reflectance, color = scientificName)) +
scale_color_viridis_d(option = "A",
labels = c("Acer rubrum",
"Betula lenta",
"Pinus strobus",
"Quercus rubra")) +
xlab("Wavelength (nm)") +
ylab("Reflectance") +
theme_lab6()
#| eval: false
# grab Reflectance metadata (which contains absorption band limits)
reflMetadata <- h5readAttributes(f, "/HARV/Reflectance" )
ab1 <- reflMetadata$Band_Window_1_Nanometers
ab2 <- reflMetadata$Band_Window_2_Nanometers
ab1
ab2
#| eval: false
resHARV_001_df_long %>%
drop_na() %>%
ggplot() +
geom_line(aes(x = WL, y = Reflectance, color = scientificName)) +
scale_color_viridis_d(option = "A",
labels = c("Acer rubrum",
"Betula lenta",
"Pinus strobus",
"Quercus rubra")) +
geom_rect(mapping = aes(ymin = min(Reflectance),
ymax = max(Reflectance),
xmin = ab1[1], xmax = ab1[2]),
color = "darkgray", fill = "gray", alpha = 0.7) +
geom_rect(mapping = aes(ymin = min(Reflectance),
ymax = max(Reflectance),
xmin = ab2[1], xmax = ab2[2]),
color = "darkgray", fill = "gray", alpha = 0.7) +
xlab("Wavelength (nm)") +
ylab("Reflectance") +
theme_lab6()
#| eval: false
# Duplicate the spectral signatures into a new data.frame
resHARV_001_df_long_mask <- resHARV_001_df_long
# Mask out all values within each of the two atmospheric absorbtion bands
resHARV_001_df_long_mask[resHARV_001_df_long_mask$WL >
ab1[1] & resHARV_001_df_long_mask$WL < ab1[2], ]$Reflectance <- NA
resHARV_001_df_long_mask[resHARV_001_df_long_mask$WL >
ab2[1] & resHARV_001_df_long_mask$WL < ab2[2], ]$Reflectance <- NA
head(resHARV_001_df_long_mask)
#| eval: false
resHARV_001_df_long_mask %>%
ggplot() +
geom_line(aes(x = WL, y = Reflectance, color = scientificName)) +
scale_color_viridis_d(option = "A",
labels = c("Acer rubrum",
"Betula lenta",
"Pinus strobus",
"Quercus rubra")) +
xlab("Wavelength (nm)") +
ylab("Reflectance") +
theme_lab6()
#| eval: false
# close the H5 file
H5close()
#| eval: false
rm(list = ls())
#| eval: true
packages <- c("neonUtilities", "BiocManager", "plyr", "reshape2",
"terra", "sf", "sp")
# Package vector names
#| eval: true
# Package vector names
packages <- c("neonUtilities", "BiocManager", "plyr", "reshape2",
"terra", "sf", "sp")
#| eval: true
# Package vector names
packages <- c("neonUtilities", "BiocManager", "plyr", "reshape2",
"terra", "sf", "sp", "dismo")
