panel.grid = element_blank(),
line = element_blank(),
rect = element_blank()
)
#| eval: false
# Observations to convex hull
oaks_CH <- st_convex_hull(oaks_occ_sf)
# plot hulls
ggplot() +
geom_sf(data = neighbours, color = "white") +
geom_sf(data = NApoly) +
geom_sf(data = oaks_CH, aes(fill = Species), alpha = 0.7) +
scale_fill_scico_d(palette = "davos", direction = -1, end = 0.9, guide = FALSE) +
coord_sf(
xlim = c(-125, -65),
ylim = c(10, 50)
) +
theme(
plot.background = element_rect(fill = "#f1f2f3"),
panel.background = element_rect(fill = "lightblue"),
panel.grid = element_blank(),
line = element_blank(),
rect = element_blank()
)
#| eval: false
# Smoothed convex hulls
oaks_SCH <- st_convex_hull(oaks_occ_sf) %>%
smoothr::smooth()
# plot smoothed hulls
ggplot() +
geom_sf(data = neighbours, color = "white") +
geom_sf(data = NApoly) +
geom_sf(data = oaks_SCH, aes(fill = Species), alpha = 0.7) +
scale_fill_scico_d(palette = "davos", direction = -1, end = 0.9, guide = FALSE) +
coord_sf(
xlim = c(-125, -65),
ylim = c(10, 50)
) +
theme(
plot.background = element_rect(fill = "#f1f2f3"),
panel.background = element_rect(fill = "lightblue"),
panel.grid = element_blank(),
line = element_blank(),
rect = element_blank()
)
#| eval: false
franges <- st_read("Data/Ranges/Furnarii_ranges_geo.shp")
#| eval: false
class(franges)
#| eval: false
glimpse(franges)
#| eval: false
selSPP <- franges %>%
filter(SCINAME == "Furnarius rufus" | SCINAME == "Anabazenops dorsalis")
# country subset
SApoly <- worldMap %>%
filter(continent == "South America")
#| eval: false
# plot the selected ranges
ggplot() +
geom_sf(data = SApoly) +
geom_sf(data = selSPP, aes(color = SCINAME), alpha = 0.7, size = 2) +
scale_fill_scico_d(palette = "davos", direction = -1,
end = 0.9, guide = FALSE) +
coord_sf(
xlim = c(-80, -35),
ylim = c(10, -60)
) +
theme(
plot.background = element_rect(fill = "#f1f2f3"),
panel.background = element_rect(fill = "lightblue"),
panel.grid = element_blank(),
line = element_blank(),
rect = element_blank()
)
#| eval: false
# Create raster ro store richness values
neo_ras <- rast() # empty raster
ext(neo_ras) <- ext(franges) # Set the raster "extent"
res(neo_ras) <- 1 # Set the raster "resolution"
neo_ras # print the raster object in the console
values(neo_ras) <- 0 # assign O values to all pixels in the raster
#| eval: false
plot(neo_ras)
#| eval: false
f_sr_raster <- terra::rasterizeGeom(x = vect(franges), # species geographical ranges
y = neo_ras, # empty raster
fun = "count" # count number of species per grid cell
)
# this process can take a while depending on your computer (~45 secs in Jesús's computer), please be patient.
#| eval: false
plot(f_sr_raster)
#| eval: false
# country subset
Apoly <- worldMap %>%
filter(continent == "South America" | continent == "North America")
# transform the sf object to a sp object
Apoly_sp <- as(Apoly, "Spatial")
# Plot the information
plot(mask(f_sr_raster, Apoly), # raster of species richness
col = viridis::turbo(10), # colors
zlim = c(min(values(f_sr_raster),
max(values(f_sr_raster)))),
main = "Furnariides species richness")
plot(SApoly_sp, add = TRUE) ## overlay SA countries to the SR map
#| eval: false
# transform the sf object to a sp object
SApoly_sp <- as(SApoly, "Spatial")
# Plot empty raster
plot(neo_ras)
plot(SApoly_sp, add = TRUE) ## overlay SA countries to the SR map
#| eval: false
# country subset
Apoly <- worldMap %>%
filter(continent == "South America" | continent == "North America")
# transform the sf object to a sp object
Apoly_sp <- as(Apoly, "Spatial")
# Plot the information
plot(mask(f_sr_raster, Apoly), # raster of species richness
col = viridis::turbo(10), # colors
zlim = c(min(values(f_sr_raster),
max(values(f_sr_raster)))),
main = "Furnariides species richness")
plot(Apoly_sp, add = TRUE) ## overlay SA countries to the SR map
#| eval: false
library(rasterVis)
library(RColorBrewer)
# First set a theme
mapTheme <- rasterTheme(region = rev(brewer.pal(11, "Spectral")),
layout.widths = list(right.padding = 10),
axis.line = list(col = "transparent"),
tick = list(col = 'transparent'))
## Now we can plot the raster
p_furna_SR <- levelplot(mask(f_sr_raster, Apoly),
maxpixels = 1e10,
margin = FALSE,
main = list('Furnariides \n species richness', col = 'darkgray'),
par.settings = mapTheme,
scales = list(x = list(draw = TRUE),
y = list(draw = TRUE)),
zlim = c(0, 180))
p_furna_SR
#| eval: false
# 2º degrees
neo_ras_2dg <- rast()
# Set the raster "extent"
ext(neo_ras_2dg) <- ext(franges)
res(neo_ras_2dg) <- 2
neo_ras_2dg
values(neo_ras_2dg) <- 0
# 4º degrees
neo_ras_4dg <- rast()
# Set the raster "extent"
ext(neo_ras_4dg) <- ext(franges)
res(neo_ras_4dg) <- 4
neo_ras_4dg
values(neo_ras_4dg) <- 0
# 8º degrees
neo_ras_8dg <- rast()
# Set the raster "extent"
ext(neo_ras_8dg) <- ext(franges)
res(neo_ras_8dg) <- 8
neo_ras_8dg
values(neo_ras_8dg) <- 0
#| eval: false
# Furnariides at 2º of long-lat
f_sr_2dg_raster <- terra::rasterizeGeom(x = vect(franges), # species geographical ranges
y = neo_ras_2dg, # empty raster
fun = "count" # count number of species per grid cell
)
# Furnariides at 4º of long-lat
f_sr_4dg_raster <- terra::rasterizeGeom(x = vect(franges), # species geographical ranges
y = neo_ras_4dg, # empty raster
fun = "count" # count number of species per grid cell
)
# Furnariides at 8º of long-lat
f_sr_8dg_raster <- terra::rasterizeGeom(x = vect(franges), # species geographical ranges
y = neo_ras_8dg, # empty raster
fun = "count" # count number of species per grid cell
)
#| eval: false
par(mfrow = c (2, 2))
## Map at 1 degree grid cell
plot(mask(f_sr_raster, Apoly), # raster of species richness
col = viridis::turbo(10), # colors
zlim = c(min(values(f_sr_raster),
max(values(f_sr_raster)))),
main = "Furnariides species richness 1 degree")
plot(SApoly_sp, add = TRUE)
## Map at 2 degrees grid cell
plot(mask(f_sr_2dg_raster, Apoly), # raster of species richness
col = viridis::turbo(10), # colors
zlim = c(min(values(f_sr_raster),
max(values(f_sr_raster)))),
main = "Furnariides species richness 2 degrees")
plot(SApoly_sp, add = TRUE)
## Map at 4 degrees grid cell
plot(mask(f_sr_4dg_raster, Apoly), # raster of species richness
col = viridis::turbo(10), # colors
zlim = c(min(values(f_sr_raster),
max(values(f_sr_raster)))),
main = "Furnariides species richness 4 degrees")
plot(SApoly_sp, add = TRUE)
## Map at 8 degrees grid cell
plot(mask(f_sr_8dg_raster, Apoly), # raster of species richness
col = viridis::turbo(10), # colors
zlim = c(min(values(f_sr_raster),
max(values(f_sr_raster)))),
main = "Furnariides species richness 8 degrees")
plot(SApoly_sp, add = TRUE)
#dev.off()
#| eval: false
par(mfrow = c (2, 2))
## Map at 1 degree grid cell
plot(mask(f_sr_raster, Apoly), # raster of species richness
col = viridis::turbo(10), # colors
zlim = c(min(values(f_sr_raster),
max(values(f_sr_raster)))),
main = "Furnariides species richness 1 degree")
plot(Apoly_sp, add = TRUE)
## Map at 2 degrees grid cell
plot(mask(f_sr_2dg_raster, Apoly), # raster of species richness
col = viridis::turbo(10), # colors
zlim = c(min(values(f_sr_raster),
max(values(f_sr_raster)))),
main = "Furnariides species richness 2 degrees")
plot(Apoly_sp, add = TRUE)
## Map at 4 degrees grid cell
plot(mask(f_sr_4dg_raster, Apoly), # raster of species richness
col = viridis::turbo(10), # colors
zlim = c(min(values(f_sr_raster),
max(values(f_sr_raster)))),
main = "Furnariides species richness 4 degrees")
plot(Apoly_sp, add = TRUE)
## Map at 8 degrees grid cell
plot(mask(f_sr_8dg_raster, Apoly), # raster of species richness
col = viridis::turbo(10), # colors
zlim = c(min(values(f_sr_raster),
max(values(f_sr_raster)))),
main = "Furnariides species richness 8 degrees")
plot(Apoly_sp, add = TRUE)
#dev.off()
#| eval: false
franges
#| eval: false
f_MRD_raster <- terra::rasterize(vect(franges), # polygons
neo_ras, # empty raster
field = "RD", # Root distance
fun = mean # function mean
)
#| eval: false
plot(f_MRD_raster,
main = 'Furnariides mean root distance')
plot(Apoly_sp, add = TRUE)
#| eval: false
## Now we can plot the raster
p_furna_MRD <- levelplot(f_MRD_raster,
maxpixels = 1e10,
margin = FALSE,
main = list('Furnariides \n mean root distance', col = 'darkgray'),
par.settings = mapTheme,
scales = list(x = list(draw = TRUE),
y = list(draw = TRUE)),
zlim = c(0, 25))
p_furna_MRD
#| eval: false
par(mfrow = c(1, 2))
plot(mask(f_sr_raster, Apoly),
col = viridis::plasma(10),
main = "Furnariides species richness")
plot(mask(f_MRD_raster, Apoly),
col = viridis::plasma(10),
main = "Furnariides mean root distance")
#dev.off()
#| eval: false
cor.test(values(f_sr_raster), values(f_MRD_raster))
#| eval: false
obj <- lm(values(f_sr_raster) ~ values(f_MRD_raster))
summary(obj)
#| eval: false
# get pixel values from raster richness
data_sr <- as.data.frame(f_sr_raster, xy = TRUE)
# get pixel values from raster MRD
data_mrd <- as.data.frame(f_MRD_raster, xy = TRUE)
# Combine both datasets
data_sr_mrd <- left_join(data_sr, data_mrd, by = c("x", "y")) %>%
rename(SR = area, MRD = RD) %>%
drop_na(MRD)
# Plot the association
data_sr_mrd %>%
ggplot(aes(x = MRD, y = SR)) +
geom_point(color = "darkgray", size = 3, alpha = 0.5) +
geom_smooth(method = "lm")
#| eval: false
# Annual Mean Temperature
bio1 <- rast("Data/BioClim/bio1.bil")
bio1 <- bio1/10
# Annual Precipitation
bio12 <- rast("Data/BioClim/bio12.bil")
bio12
#| eval: false
plot(bio1)
plot(bio12)
#| eval: false
bio1_neo <- crop(bio1, ext(franges))
bio12_neo <- crop(bio12, ext(franges))
#| eval: false
par(mfrow = c(1, 2))
plot(bio1_neo, main = "Annual Mean Temperature",
col = rev(viridis::inferno(10)))
plot(bio12_neo, main = "Annual Precipitation",
col = rev(viridis::inferno(10)))
#| eval: false
# Get environmental data using coordinates from our maps
f_ras_bios <- extract(x = c(bio1_neo, bio12_neo), # environmental variables
y = data_sr_mrd[, c("x", "y")]) %>% # coordinates
rename(MAT = bio1, MAP = bio12)
# Combine the information
fdata <- bind_cols(data_sr_mrd, f_ras_bios)
head(fdata)
#| eval: false
cor.test(fdata$SR, fdata$MAT)
#| eval: false
cor.test(fdata$SR, fdata$MAP)
#| eval: false
lmbio1 <- lm(SR ~ MAT, data = fdata)
summary(lmbio1)
lmbio12 <- lm(SR ~ MAP, data = fdata)
summary(lmbio12)
#| eval: false
fdata %>%
ggplot(aes(x = MAT, y = SR)) +
geom_point(color = "darkgray") +
geom_smooth(method = "lm")
fdata %>%
ggplot(aes(x = MAP, y = SR)) +
geom_point(color = "darkgray") +
geom_smooth(method = "lm")
#| eval: false
fols <- lm(SR ~ MAT + MAP, data = fdata)
summary(fols)
#| eval: false
fols2 <- lm(SR ~ MAT + MAP + MRD, data = fdata)
summary(fols2)
#| eval: false
autocor_SR <- ncf::correlog(fdata$x, # longitude
fdata$y, # latitude
z = fdata$SR, # species richness
na.rm = TRUE,
increment = 1,
resamp = 1)
#| eval: false
plot(autocor_SR$correlation[1:50],
type = "b", pch = 1, cex = 1.2, lwd = 1.5, ylim = c(-1, 1),
xlab = "Distance class",
ylab = "Moran's I",
cex.lab = 1.2,
cex.axis = 1.2)
abline(h = 0)
#| eval: false
coords <- fdata[1:2]
coords <- as.matrix(coords)
head(coords)
#| eval: false
# neighborhood contiguity by distance
nb1.5 <- spdep::dnearneigh(coords, 0, 1.5)
#| eval: false
nb1.5.w <- spdep::nb2listw(neighbours = nb1.5,
glist = NULL,
style = "W",
zero.policy = TRUE)
#| eval: false
residuals_ols <- residuals(fols2)
plot(residuals_ols)
#| eval: false
autocor_ols_res <- ncf::correlog(x = fdata$x,
y = fdata$y,
z = residuals(fols),
increment = 1,
resamp = 1)
#| eval: false
plot(autocor_ols_res$correlation[1:50],
type = "b", pch = 1, cex = 1.2, lwd = 1.5, ylim = c(-0.5, 1),
xlab = "distance",
ylab = "Moran's I",
cex.lab = 1.5,
cex.axis = 1.2)
abline(h = 0)
title(main = "OLS residuals", cex = 1.5)
#| eval: false
par(mfrow = c(2, 1))
# Plot SR
plot(autocor_SR$correlation[1:50],
type = "b", pch = 1, cex = 1.2,
lwd = 1.5, ylim = c(-1, 1),
xlab = "Distance class",
ylab = "Moran's I",
cex.lab = 1.2,
cex.axis = 1.2)
abline(h = 0)
title(main = "OLS model", cex = 1.5)
# Plot residuals SR
plot(autocor_ols_res$correlation[1:50],
type = "b", pch = 1, cex = 1.2,
lwd = 1.5, ylim = c(-0.5, 1),
xlab = "Distance class",
ylab = "Moran's I",
cex.lab = 1.5,
cex.axis = 1.2)
abline(h = 0)
title(main = "OLS residuals", cex = 1.5)
#| eval: false
sar_nb1.5.w <- spatialreg::errorsarlm(fols2,
listw = nb1.5.w,
data = fdata,
quiet = FALSE,
zero.policy = TRUE,
na.action = na.exclude)
# this will take a while, ~10 seconds in Jesús's computer
#| eval: false
summary(sar_nb1.5.w)
#| eval: false
residuals_sar_nb1.5.w <- residuals(sar_nb1.5.w)
#| eval: false
autocor_sar_nb1.5.w <- ncf::correlog(x = fdata$x,
y = fdata$y,
z = residuals(sar_nb1.5.w),
na.rm = TRUE,
increment = 1,
resamp = 1)
#| eval: false
plot(autocor_sar_nb1.5.w$correlation[1:50],
type = "b", pch = 4, cex = 1.2,
lwd = 1.5, ylim = c(-0.5, 1),
xlab = "distance",
ylab = "Moran's I",
cex.lab = 1.5,
cex.axis = 1.2)
abline(h = 0)
title(main = "SARerr residuals", cex = 1.5)
#| eval: false
par(mfrow = c(2, 1))
plot(autocor_ols_res$correlation[1:50],
type = "b", pch = 1, cex = 1.2,
lwd = 1.5, ylim = c(-0.5, 1),
xlab = "distance",
ylab = "Moran's I", cex.lab = 1.5,
cex.axis = 1.2)
abline(h = 0)
title(main = "OLS residuals", cex = 1.5)
plot(autocor_sar_nb1.5.w$correlation[1:50],
type = "b", pch = 4, cex = 1.2,
lwd = 1.5, ylim = c(-0.5, 1),
xlab = "distance",
ylab = "Moran's I",
cex.lab = 1.5,
cex.axis = 1.2)
abline(h = 0)
title(main = "SARerr residuals", cex = 1.5)
#| eval: false
summary(sar_nb1.5.w)
#| eval: false
summary(fols2)
#| eval: false
fdata %>%
ggplot(aes(x = MAT, y = SR)) +
geom_point(alpha = 0.5, color = "darkgray") +
labs(x = "Mean annual temperature",
y = "Species richness") +
geom_smooth(method = "lm", # coefficient OLS
se = FALSE,
color = "blue",
linewidth = 2) +
geom_abline(intercept = coef(sar_nb1.5.w)[2], # coefficients SAR
slope = coef(sar_nb1.5.w)[3],
color = "red",
linewidth = 2)
#| eval: false
fdata %>%
ggplot(aes(x = MAP, y = SR)) +
geom_point(alpha = 0.5, color = "darkgray") +
labs(x = "Annual precipitation",
y = "Species richness") +
geom_smooth(method = "lm", # coefficient OLS
se = FALSE,
color = "blue",
linewidth = 2) +
geom_abline(intercept = coef(sar_nb1.5.w)[2], # coefficients SAR
slope = coef(sar_nb1.5.w)[4],
color = "red",
linewidth = 2)
#| eval: false
fdata %>%
ggplot(aes(x = MRD, y = SR)) +
geom_point(alpha = 0.5, color = "darkgray") +
labs(x = "Mean annual temperature",
y = "Species richness") +
geom_smooth(method = "lm", # coefficient OLS
se = FALSE,
color = "blue",
linewidth = 2) +
geom_abline(intercept = coef(sar_nb1.5.w)[2], # coefficients SAR
slope = coef(sar_nb1.5.w)[5],
color = "red",
linewidth = 2)
#| eval: false
source("https://raw.githubusercontent.com/jesusNPL/BetaDivNA/master/SARr2.R")
#| eval: false
SARr2(Lfull = sar_nb1.5.w$LL, # log likelihood of the model that includes the spatial weights
Lnull = sar_nb1.5.w$logLik_lm.model, # log likelihood null model
N = nrow(fdata) # number of observation
)
