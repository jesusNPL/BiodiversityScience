---
title: "Measuring phylogenetic diversity within communities"
description: Showing some neat features of R!
date: today # other options: now, last-modified
authors:
  - name: JesÃºs N. Pinto-Ledezma 
    url: https://jesusnpl.github.io
    affiliation: Ecology, Evolution & Behavior, University of Minnesota
                Biodiversity Science - EBB 3534-5534
    affiliation-url: https://github.com/jesusNPL/BiodiversityScience
title-block-banner: true
#title-block-banner: "#562457"
format: 
  html: 
    embed-resources: true # save contained file.
    theme: spacelab # check other themes https://quarto.org/docs/output-formats/html-themes.html 
    code-fold: true
    toc: true
    number-sections: true
bibliography: lab_4_metrics_biodiversity.bib
link-citations: true
csl: ../apa-single-spaced.csl
---

:::{.callout-note}
The main goal of this practice is to present basic understanding about measuring phylogenetic diversity within communities or best known as the analysis of community phylogenetics. The community phylogenetics integrates ecological and evolutionary concepts and explores the mechanisms (e.g., biotic interactions or environmental filters) governing the assembly of ecological communities. 

There are different sources of information and web pages with a lot of information about this field. The most common and useful are the web pages of the books: [Modern Phylogenetic Comparative Methods and Their Application in Evolutionary Biology](http://www.mpcm-evolution.org/) and [Phylogenies in Ecology](https://www.utsc.utoronto.ca/~mcadotte/page-3/). Among the most influential papers in this field are [Phylogenies and Community Ecology](https://www.annualreviews.org/doi/abs/10.1146/annurev.ecolsys.33.010802.150448) by @webb_phylogenies_2002 and [The merging of community ecology and phylogenetic biology](https://onlinelibrary.wiley.com/doi/10.1111/j.1461-0248.2009.01314.x) by @cavender-bares_merging_2009.

:::

# Set up your data and your working directory

For today's practice we will use data from the [**National Ecological Observatory Network (NEON)**](https://www.neonscience.org). We strongly recommend to look at the NEON website to get a deeper understanding about NEON and how it works. Also you can read these papers: [A continental strategy for the National Ecological Observatory Network](https://doi.org/10.1890/1540-9295(2008)6[282:ACSFTN]2.0.CO;2) and [The plant diversity sampling design for The National Ecological Observatory Network](https://doi.org/10.1002/ecs2.2603). 

To do this laboratory you will need to install the following packages:

```{r}
#| eval: false

packages <- c("picante", "neonUtilities", "car", "phytools", 
              "vegan", "devtools", "magrittr", "corrplot") 
# Package vector names

```

:::{.callout-tip}
## Function install.packages()
You can use the function **install.packages()** to install the packages.
:::

If you don't want to install the packages one by one, you can use the next command. 
```{r}
#| eval: false

# Install packages not yet installed
installed_packages <- packages %in% rownames(installed.packages())

if (any(installed_packages == FALSE)) {
  install.packages(packages[!installed_packages], dependencies = TRUE)
}

```

We will also need the R package {V.PhyloMaker} to obtain a phylogenetic tree for our species. Note that this package is not located in CRAN, so we will install the package directly from the [author's github](https://github.com/jinyizju/V.PhyloMaker).

```{r}
#| eval: false

if ( ! ("V.PhyloMaker" %in% installed.packages())) {remotes::install_github("jinyizju/V.PhyloMaker")}

```


This command, will, first, check if you already the packages installed, then if a package is not installed in your computer, will install it.

Load installed packages:

```{r}
#| eval: false

sapply(packages, require, character.only = TRUE)

library(V.PhyloMaker)
library(tidyverse)

```

Double-check your working directory. 

:::{.callout-tip}
## Function getwd()
You can use the function **getwd()** to get the current working directory.
:::

# Prepare data

## Download community data from NEON

We will download data of plant communities directly from NEON and to do that we will use the **R** package {**neonUtilities**} and the function '*loadByProduct*'. Before proceed let's take a look at the core information required in this function. To do that you just can type **?loadByProduct** in your console and the documentation for this function will appear in the Help window of RStudio.

The core information we need to inform in the '*loadByProduct*' function are:

1. __dpID__ = The identifier of the NEON data product to pull, in the form DPL.PRNUM.REV, e.g. DP1.10023.001.

2. __site__ = Either the string 'all', meaning all available sites, or a character vector of 4-letter NEON site codes, e.g. c('ONAQ','RMNP'). Defaults to all.

3. __package__ = Either 'basic' or 'expanded', indicating which data package to download. Defaults to basic.

As you can see, the __dpID__ and __site__ correspond to the kind of data we want to download and the site to the location where the data were collected, respectively. We can open the NEON website to find the information required for downloading the data for [**plant presence and percent cover**](https://data.neonscience.org/data-products/DP1.10058.001/RELEASE-2021/). Also, you can look at the map of [NEON sites](https://data.neonscience.org/data-products/explore) to see the distribution of NEON sites across The United States.

For this practice we will use the next information: __dpID__ = __"DP1.10058.001"__ and __site__ = __c("HARV", "CPER","ABBY")__ that correspond to __plant presence and percent cover__ and three sites: __HARV__ (Harvard Forest & Quabbin Watershed NEON, MA), __CPER__ (Central Plains Experimental Range NEON, CO) and __ABBY__ (Abby Road NEON, WA). Note that you can download data only for one site but for the sake of getting more practice in data management in R we will download the full data of plant community data for three sites (you can download data for more sites if you prefer).

```{r}
#| eval: false

# Set global option to NOT convert all character variables to factors
options(stringsAsFactors = FALSE)

NEON_data <- loadByProduct(dpID = "DP1.10058.001", 
                        site = c("HARV", "CPER", "ABBY"), 
                        package = "expanded", 
                        check.size = TRUE)

# type "y" (with no quotes) in your console to start downloading the data from NEON
```

Let's inspect the downloaded data.

```{r}
#| eval: false

names(NEON_data)

View(NEON_data$div_10m2Data100m2Data)

View(NEON_data$div_1m2Data)

```

Save the raw data in your hard drive - this is a common practice that allow reproducibility and also save you a lot of time.

```{r}
#| eval: false

dir.create("data") # You can skip this line if you already have this folder
dir.create("data/NEON")

save(NEON_data, file = "data/NEON/RawData_NEON_lab4.RData")

```

The data of abundance of plants correspond to the object __"div_1m2Data"__, thus let's isolate that data from the rawdata. 

```{r}
#| eval: false

sel <- NEON_data$div_1m2Data %>% 
  select(namedLocation, domainID, siteID, plotType, plotID, subplotID, endDate, 
         taxonID, taxonRank, family, scientificName, nativeStatusCode, 
         percentCover, heightPlantSpecies)

unique(sel$namedLocation)
unique(sel$siteID)
unique(sel$endDate)

```

The isolated data is a data.frame of 86,813 rows and 14 columns. Some information is not required so let's clean the data a little bit and select information for only one site and a single period of time.

```{r}
#| eval: false

sel <- sel %>% 
  drop_na(scientificName) %>% # Removing NAs in the column of species
  mutate(Date = endDate) %>% 
  separate(endDate, sep = "-", 
           into = c("Year", "Month", "Day"))

unique(sel$Year)
unique(sel$siteID)

```

Select the site __HARV__ and the year __2022__.

```{r}
#| eval: false

HARV <- sel %>% 
  filter(siteID == "HARV" & Year == 2022)

unique(HARV$Year)
unique(HARV$siteID)

head(HARV)

```

## Check taxonomy

The data corresponding to NEON site HARV for the 2022 contains 1220 rows or observations and 17 columns or variables. If we look at the data, specifically to the column __scientificName__ we can see that the taxonomy used in NEON correspond to the taxonomy used by the [USDA](https://plants.sc.egov.usda.gov/classification.html), however this taxonomy is not necessarily used by scientist (ðŸ¤”ðŸ˜µðŸ«£) that rely for example on the taxonomy of the APG [Angiosperm Phylogeny Group](http://www.mobot.org/MOBOT/research/APweb/) for Angiosperms and WCSP [World Checklist of Conifers](http://wcsp.science.kew.org/prepareChecklist.do?checklist=selected_families%40%40080210320211453826) for Gymnosperms. More recently the initiative [**Plants of the World**](https://powo.science.kew.org) was launched and as today is the most reliable source to check the taxonomic names of plant species. 

```{r}
#| eval: false

glimpse(HARV)

```

In any case, we need to standardize the species names in order to proceed with the calculation of metrics.

We will use the **Plants of the World** source through the **Taxonomic Name Resolution Service (TNRS)** tool. 

The only thing we need to do is to copy the scientific names and paste on the TNRS tool.

```{r}
#| eval: false

# vector with scientific names
spp <- HARV %>% 
  select(scientificName) %>% 
  distinct()

# print the species names
spp

# save names and open with excel or numbers
write_csv(spp, 
          file = "data/HARV_spp_names_2020.csv")

```

The next step is to open the file **HARV_spp_names_2020.csv**. Then, copy the species names and paste them into the TRNL website. The next step is to click on the **submit** tab and then click on the **Download Data** tab. A small window will pop out (see image below), and click in **DOWNLOAD**.

![TRNL](Screenshot_TRNL.png)

A **.CSV** file named **tnrs_result.csv** will be downloaded to your **Downloads** folder. Please copy the file and paste it into the folder **data** of this tutorial.

Now we will upload the standardized species names through the TRNL tool and match these names with the ones in the species composition dataset or **HARV data**.

```{r}
#| eval: false

spp_check <- read_csv("data/tnrs_result.csv")

View(spp_check)

```

Select the necessary information and combine it with the HARV data.

```{r}
#| eval: false

taxonomy <- spp_check %>% 
  select(Name_submitted, Accepted_family, Genus_matched, Specific_epithet_matched) %>% 
  mutate(Specific_epithet_matched = if_else(is.na(Specific_epithet_matched), "sp.", Specific_epithet_matched)) %>% 
  mutate(species = paste(Genus_matched, Specific_epithet_matched)) %>% 
  rename(genus = Genus_matched) %>% 
  drop_na(Accepted_family, genus)

taxonomy$Name_submitted[4] <- "Tsuga canadensis (L.) CarriÃ¨re"
taxonomy$Name_submitted[16] <- "Ilex mucronata (L.) Powell, Savolainen & Andrews"
taxonomy$Name_submitted[55] <- "Lysimachia terrestris (L.) Britton, Sterns & Poggenb."
taxonomy$Name_submitted[77] <- "Lycopodium hickeyi W.H. Wagner, Beitel & Moran"

```

Now let's combine the new taxonomic information with our NEON data.

```{r}
#| eval: false

HARV_data <- full_join(x = HARV, y = taxonomy, 
                       by = c("scientificName" = "Name_submitted"))

```

We can select some specific columns that we will use from now on.

```{r}
#| eval: false

HARV_data <- HARV_data %>% 
  select(siteID, plotID, subplotID, family, genus, species, percentCover) %>% 
  drop_na(species)

head(HARV_data)

```

We can save the cleaned data and remove the unnecessary information from the environment.

```{r}
#| eval: false

save(HARV, HARV_data, taxonomy, file = "data/NEON/CleanData_NEON_lab4.RData")

# remove the information that we don't need anymore (for now)
rm(HARV, NEON_data, sel, spp_check, taxonomy, installed_packages, packages, spp)

```

As a last step the cleaned data will be transformed from the long format to a wide format, in other words, we will transform the NEON data to a matrix in which the species are the columns and the plots (or communities) are the rows.

```{r}
#| eval: false

HARV_CDM <- HARV_data %>% 
  mutate(sciname = gsub(" ", "_", species)) %>% 
  select(plotID, percentCover, sciname) %>% 
  sample2matrix(.)

#HARV_mat <- sample2matrix(HARV_data[, c(2, 7, 6)])
nrow(HARV_CDM)
ncol(HARV_CDM)

```

## Get phylogenetic hypothesis

Alright, until here we have downloaded, cleaned and prepared plant community data for the NEON site HARV. The next step is to prepare the phylogeny for those communities or a community level phylogeny. To do that we will use the most up to date phylogeny of vascular plants [Constructing a broadly inclusive seed plant phylogeny](https://bsapubs.onlinelibrary.wiley.com/doi/full/10.1002/ajb2.1019) and the R package {**V.PhyloMaker**}.

```{r}
#| eval: false

# Prepare the taxonomy data to extract the phylogeny

sppPhylo <- HARV_data %>% 
  distinct(family, genus, species) %>% # identify unique values
  select(species, genus, family)  # select columns
  
sppPhylo

```

Prepare the phylogeny and plot it.

```{r}
#| eval: false

result <- V.PhyloMaker::phylo.maker(sppPhylo, 
                                    scenarios = "S3") # this will take some time.

phylo <- multi2di(result$scenario.3)

# Check if our phylogeny is ultrametric
is.ultrametric(phylo)

# Check is our phylogeny is bifurcated 
is.binary.phylo(phylo)

plot(phylo, show.tip.label = FALSE)

```

Before continuing with the lab let's check again if our data (phylogeny and community) match each other. To do this we will use the amazing function **match.phylo.com()** from the package {**picante**}.

```{r}
#| eval: false

matched <- picante::match.phylo.comm(phy = phylo, 
                                     comm = HARV_CDM)

matched$phy

matched$comm

```

Alright, we have all data necessary for calculating different phylogenetic diversity metrics, hooray!

Save the phylogenetic data and clean the R environment.

```{r}
#| eval: false

save(phylo, sppPhylo, result, 
     file = "data/NEON/Phylo_NEON_lab4.RData")

rm(sppPhylo, result)

```

Ok, let's inspect the data that were stored in the object matched.

```{r}
#| eval: false

matched$comm[1:10, 1:10]

```

Now the phylogeny

```{r}
#| eval: false

plot(matched$phy, 
     show.tip.label = FALSE, 
     type = "fan")

```

Awesome, we are now ready to explore the **jungle** of metrics for the evaluation of taxonomic, phenotypic and phylogenetic structure of communities [@pausas_jungle_2010]. Let's start with metrics for the taxonomic dimension.

# Taxonomic diversity metrics

Let's explore the most common metrics of taxonomic diversity. For this exercise, we are going to use the R package {vegan}. 

### Species richness (*S*)

Simply the number of species recorded in a plot or community.

```{r}
#| eval: false

HARV_tax <- data.frame(S = specnumber(matched$comm))

```

### Shannon Index (*H*) 

Metric that characterizes species diversity in a sample. Assumes that all species are represented in the sample and that individuals within species were sampled randomly.

```{r}
#| eval: false

HARV_tax <- HARV_tax %>% 
  mutate(H = diversity(matched$comm, 
                       index = "shannon")
         )
  
```

### Simpson Index (*D*) 

Metric that characterizes species diversity in a sample. Contrary to Shannonâ€™s *H*, Simpsonâ€™s *D* captures the variance of the species abundance distribution.

```{r}
#| eval: false

HARV_tax <- HARV_tax %>% 
  mutate(D = diversity(matched$comm, 
                       index = "simpson")
         )

HARV_tax

```

### Pielou's evenness (*J*)

Metric that count the individuals of each species in a sample, rather than the number of species. A *J* value ranges from 0 (no evenness) to 1 (complete evenness).

```{r}
#| eval: false

HARV_tax <- HARV_tax %>% 
  mutate(J = H/log(S)
         )
  
HARV_tax

```

We just embedded {vegan} functions into {dplyr} to do the taxonomic metric calculations in a tidyverse framework ðŸ˜¬...

# Phylogenetic diversity metrics

## Explore diversity metrics

Let's calculate some metrics manually and then using the package {**picante**} we will calculate the same metrics but for all communities at once.

### Phylogenetic diversity

Phylogenetic diversity is just the sum of the total branch lengths in the community. In this case we are calculating PD using all species in the phylogeny, in other words, assuming that a single community contain the same number of species as the phylogeny.

```{r}
#| eval: false

sum(matched$phy$edge.length) #  sum of the total branch lengths in the community

```

We can calculate PD for individual plots or communities, for example the plot **HARV_001**

```{r}
#| eval: false

# Select species that are only present in the plot HARV_001
HARV_001 <- matched$comm %>% 
  filter(rownames(.) == "HARV_001") %>% 
  t() %>% 
  data.frame() %>% 
  filter(HARV_001 > 0)

# Drop species in the phylogeny that are not present in the plot HARV_001
HARV_001_phy <- drop.tip(matched$phy, 
                         setdiff(matched$phy$tip.label, 
                                 rownames(HARV_001)))

sum(HARV_001_phy$edge.length)

```

We can confirm the result by calculating PD using the package {**picante**}. However, instead of calculating plot by plot {picante} will calculate PD for all of the plots.

```{r}
#| eval: false

HARV_PD <- pd(samp = matched$comm, 
              tree = matched$phy, 
              include.root = FALSE) # Faith's PD

head(HARV_PD)

```

We NOW can confirm the PD value estimated by hand is equal to the PD estimated using {picante}.

:::{.callout-tip}
## Argument include.root = TRUE

Using the argument "include.root = TRUE" in the function pd() of {picante} will return a slightly different PD value as the root of the phylogeny is considered in the calculation.

:::

You can see both metrics SR and PD are highly correlated, that is because PD is highly sensitive to the sample size, i.e., as more species are added to the community more branch lengths are added to the phylogeny and consequently the expected relationship is high.

```{r}
#| eval: false

HARV_PD %>% 
  ggplot(aes(x = SR, y = PD)) + 
  geom_point(size = 3, color = "darkgray") 

```

Now see correlation between the two metrics

```{r}
#| eval: false

HARV_PD %$% 
  cor.test(SR, PD, use = "complete.obs")

```
Let's plot the association again...

```{r}
#| eval: false

# Aux function for visualization
theme_biosci <- function() {
  theme_bw() + #base_family = "Noto Sans") +
    theme(panel.grid.minor = element_blank(),
          plot.background = element_rect(fill = "white", color = NA),
          strip.background = element_rect(fill = "grey80", color = NA),
          legend.title = element_text(face = "bold", size = 15), 
          legend.text = element_text(size = 12))
}

# plot
HARV_PD %>% 
  ggplot(aes(x = SR, y = PD)) + 
  geom_point(size = 3, color = "darkgray") + 
  labs(x = "Species richness", y = "PD (millions of years)") + 
  theme_biosci()

```

### Mean pairwise distance (MPD) and mean nearest-pairwise distance (MNTD)

Other common metrics are MPD (mean pairwise distance) and MNTD (mean nearest taxon distance). As in PD, let's calculate MPD and MNTD manually.

```{r}
#| eval: false

# MPD
dist.trMB <- cophenetic(HARV_001_phy)

dist.trMB <- dist.trMB[lower.tri(dist.trMB, diag = FALSE)]

mean(dist.trMB)

```

```{r}
#| eval: false

# MNTD
dist.trMB2 <- cophenetic(HARV_001_phy)
diag(dist.trMB2) <- NA
apply(dist.trMB2, 2, min, na.rm = TRUE)

mean(apply(dist.trMB2, 2, min, na.rm = TRUE))

```

And now using the package **{picante}**

```{r}
#| eval: false

# MPD
HARV_MPD <- mpd(matched$comm, 
                cophenetic(matched$phy)) 

head(HARV_MPD)

```

```{r}
#| eval: false

# MNTD
HARV_MNTD <- mntd(matched$comm, 
                  cophenetic(matched$phy)) 

head(HARV_MNTD)

```

Until here we just played with the data and also confirmed that we can calculate different metrics by hand. Now let's do a more formal evaluation of the biodiversity in Harvard Forest & Quabbin Watershed NEON, MA.

# Community phylogenetic diversity metrics

The analyses of community phylogenetic started making inferences about the mechanisms structuring the local communities through the evaluation of phylogenetic arrangements in local communities (see @cavender-bares_merging_2009 for an initial criticism). However, new methods are now available, such that more complex balance between ecological and historical processes at local and regional scales can be incorporated into the analyses [@pigot_new_2015; @pinto-ledezma_drivers_2019; @pintoledezma_testing_2020].

Let's calculate some of the most common metrics.

Note - we will use the object __HARV_CDM__ to store all the results.

### Phylogenetic diversity in a community - PD

PD or phylogenetic diversity is the sum of the total phylogenetic branch length for one or multiple samples.

```{r}
#| eval: false

HARV_CDM <- ses.pd(samp = matched$comm, 
                   tree = matched$phy, 
                   runs = 999) # this will take some time

HARV_CDM <- HARV_CDM %>% 
  select(ntaxa, pd.obs, pd.obs.z)

#HARV_CDM <- HARV_CDM[, c(1, 2, 6, 7)]

head(HARV_CDM)

```

### Phylogenetic Rao's quadratic entropy - RaoD

Rao's quadratic entropy (Rao 1982) is a measure of diversity in ecological communities that can optionally take species differences (e.g. phylogenetic dissimilarity) into account.

```{r}
#| eval: false

HARV_CDM <- HARV_CDM %>% 
  mutate(RaoD = raoD(matched$comm, 
                     force.ultrametric(matched$phy))$Dkk)

head(HARV_CDM)

```

### Mean pairwise distance separating taxa in a community - MPD 

```{r}
#| eval: false

# SES-MPD
HARVsesmpd <- ses.mpd(samp = matched$comm, 
                      dis = cophenetic(matched$phy), 
                      null.model = "taxa.labels", 
                      abundance.weighted = TRUE, 
                      runs = 999)

HARVsesmpd <- HARVsesmpd %>% 
  select(mpd.obs, mpd.obs.z)

HARV_CDM <- bind_cols(HARV_CDM, HARVsesmpd)

```

### Mean nearest taxon distance for taxa in a community - MNTD
 
```{r}
#| eval: false

# SES-MNTD
HARVsesmntd <- ses.mntd(samp = matched$comm, 
                        dis = cophenetic(matched$phy), 
                        null.model = "taxa.labels", 
                        abundance.weighted = TRUE,
                        runs = 999)

HARVsesmntd <- HARVsesmntd %>% 
  select(mntd.obs, mntd.obs.z)

HARV_CDM <- bind_cols(HARV_CDM, HARVsesmntd)

```

### Phylogenetic species variability - PSV

Phylogenetic species variability quantifies how phylogenetic relatedness decreases the variance of a hypothetical unselected/neutral trait shared by all species in a community. 

```{r}
#| eval: false

# PSV or phylogenetic species variability
HARV_CDM <- HARV_CDM %>% 
  mutate(PSV = psv(samp = matched$comm, 
               tree = matched$phy, 
               compute.var = TRUE)$PSVs)

HARV_CDM

```

### Phylogenetic species richness - PSR

Phylogenetic species richness is the number of species in a sample multiplied by PSV.

```{r}
#| eval: false

# PSR or phylogenetic species richness
HARV_CDM <- HARV_CDM %>% 
  mutate(PSR = psr(samp = matched$comm, 
               tree = matched$phy, 
               compute.var = TRUE)$PSR)

HARV_CDM

```

### Phylogenetic species evenness - PSE

Phylogenetic species evenness is the metric PSV modified to incorporate relative species abundances.

```{r}
#| eval: false

# PSE or phylogenetic species evenness
HARV_CDM <- HARV_CDM %>% 
  mutate(PSE = pse(samp = matched$comm, 
               tree = matched$phy)$PSEs)

HARV_CDM

```

### qDp

**qD(p)** is a metric that measure the variation in speciesâ€™ divergences within communities. This metric is a modification of the Hill index, weighting a speciesâ€™ proportional abundance by its relative share of phylogenetic information.

```{r}
#| eval: false

# Scheiner 2012 qD(p)
source("https://raw.githubusercontent.com/jesusNPL/BiodiversityScience/master/Spring2021/R-Functions/qDp.R")

HARV_CDM <- HARV_CDM %>% 
  mutate(qDP = qDp(matched$phy, 
                   matched$comm, q = 2))

HARV_CDM

```

We have calculated several metrics that describe the phylogenetic structure of communities at Harvard Forest & Quabbin Watershed NEON (HARV) site.

# Compare the metrics

```{r}
#| eval: false

scatterplotMatrix(HARV_CDM)

```
Hmmm, Kinda ugly...

Let's use the package {corrplot} to get a more informative figure.

```{r}
#| eval: false

cor_mat <- cor(HARV_CDM, method = 'spearman')

corrplot.mixed(cor_mat, 
               tl.pos = "lt", 
               tl.cex = 0.7, 
               number.cex = 0.7, 
               addCoefasPercent = TRUE, 
               mar = c(0, 0, 1, 0))

```

Explore the correlation among metrics.

```{r}
#| eval: false

HARV_CDM %>% 
  cor.table()

```

You can also plot the relationship between metrics.

```{r}
#| eval: false

HARV_CDM %>% 
  ggplot(aes(x = RaoD, y = PSE)) + 
  geom_point(size = 3, color = "darkgray") + 
  labs(x = "RaoD", y = "PSE") + 
  theme_biosci()

```

*RaoD and PSE are highly correlated; explain why*

```{r}
#| eval: false

HARV_mds <- HARV_CDM %>% 
  select(-c(pd.obs.z, mpd.obs.z, mntd.obs.z)) %>% # MNDS does not like negative values
  na.omit() %>% 
  metaMDS(.)


ordiplot(HARV_mds, type = "t", display = "species")

```

Let's use {ggplot2} to make a better figure.

```{r}
#| eval: false

## Metrics scores
HARV_mds_scores <- data.frame(HARV_mds$species) %>% 
  mutate(Metric = rownames(.))

HARV_mds_scores %>% 
  ggplot(aes(x = MDS1, y = MDS2, color = Metric)) + 
  geom_point(size = 3, alpha = 0.5) + 
  theme_biosci()

```

*What do you think?* 

*Which metric would you use for your paper?*

# The challenge

The challenge for this assignment is:

* **Option 1** 

Repeat all process but select two NEON sites across the United States, compare the results of both sites and discuss the difference in the results if there any. For example, you can use the other two sites we have downloaded at the beginning of the lab, i.e., "CPER" and "ABBY".

* **Option 2** 

Another option is to calculate the phylogenetic diversity metrics for each year on a NEON site. For example, you can use the data from HARV but instead of doing the analysis only for the 2018 (as we did here) you can repeat the process for all years from 2013 to 2022 and discuss if the taxonomic (species richness) and phylogenetic diversities changed.

The end! for now...