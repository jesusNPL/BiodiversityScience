#| eval: false
covid_mn %>%
ggplot(aes(x = as.POSIXct(Date),
y = abs(new_deaths))) +
geom_point(color = "gray") +
labs(x = NULL, y = "Number of Deaths") +
geom_line(mapping = aes(x = as.POSIXct(Date)),
linewidth = 2,
colour = alpha(PrettyCols::prettycols("Purples")[4], 0.3)) +
geom_smooth(colour = PrettyCols::prettycols("Purples")[1],
linewidth = 1) +
scale_y_continuous(labels = scales::label_number(suffix = " K",
scale = 1e-6)) +
scale_x_datetime(date_breaks = "2 month", labels = label_date_short()) +
theme_biosci()
covid_mn
covid_mn %>%
ggplot(aes(x = as.POSIXct(Date),
y = abs(total_deaths))) +
geom_point(color = "gray") +
labs(x = NULL, y = "Number of Deaths") +
geom_line(mapping = aes(x = as.POSIXct(Date)),
linewidth = 2,
colour = alpha(PrettyCols::prettycols("Purples")[4], 0.3)) +
geom_smooth(colour = PrettyCols::prettycols("Purples")[1],
linewidth = 1) +
scale_y_continuous(labels = scales::label_number(suffix = " K",
scale = 1e-6)) +
scale_x_datetime(date_breaks = "2 month", labels = label_date_short()) +
theme_biosci()
covid_mn %>%
ggplot(aes(x = as.POSIXct(Date),
y = abs(tot_deaths))) +
geom_point(color = "gray") +
labs(x = NULL, y = "Number of Deaths") +
geom_line(mapping = aes(x = as.POSIXct(Date)),
linewidth = 2,
colour = alpha(PrettyCols::prettycols("Purples")[4], 0.3)) +
geom_smooth(colour = PrettyCols::prettycols("Purples")[1],
linewidth = 1) +
scale_y_continuous(labels = scales::label_number(suffix = " K",
scale = 1e-6)) +
scale_x_datetime(date_breaks = "2 month", labels = label_date_short()) +
theme_biosci()
covid_mn %>%
ggplot(aes(x = as.POSIXct(Date),
y = abs(new_deaths))) +
geom_point(color = "gray") +
labs(x = NULL, y = "Number of Deaths") +
geom_line(mapping = aes(x = as.POSIXct(Date)),
linewidth = 2,
colour = alpha(PrettyCols::prettycols("Purples")[4], 0.3)) +
geom_smooth(colour = PrettyCols::prettycols("Purples")[1],
linewidth = 1) +
scale_y_continuous(labels = scales::label_number(suffix = " K",
scale = 1e-6)) +
scale_x_datetime(date_breaks = "2 month", labels = label_date_short()) +
theme_biosci()
#| eval: false
covid_mn %>%
ggplot(aes(x = as.POSIXct(Date),
y = abs(new_deaths))) +
geom_point(color = "gray") +
labs(x = NULL, y = "Number of Deaths") +
geom_line(mapping = aes(x = as.POSIXct(Date)),
linewidth = 2,
colour = alpha(PrettyCols::prettycols("Purples")[4], 0.3)) +
geom_smooth(colour = PrettyCols::prettycols("Purples")[1],
linewidth = 1) +
scale_y_continuous(labels = scales::label_number(suffix = "K",
scale = 1e-6)) +
scale_x_datetime(date_breaks = "2 month", labels = label_date_short()) +
theme_biosci()
#| eval: false
SIR <- function(time, state, parameters) {
par <- as.list(c(state, parameters))
with(par, {
dS <- -Beta * I * S / N # Equation one
dI <- Beta * I * S / N - Gamma * I # Equation two
dR <- Gamma * I # Equation three
list(c(dS, dI, dR))
})
}
#| eval: false
RSS <- function(parameters) {
names(parameters) <- c("Beta", "Gamma")
out <- ode(y = init, times = Days, func = SIR, parms = parameters)
# the out object includes the SIR function we wrote above
fit <- out[, 3]
sum((Infected - fit)^2)
}
#| eval: false
covid_mn %>%
filter(Date == "2020-03-06")
covid_mn
#| eval: false
covid_mn %>%
filter(Date == "2020-01-23")
View(covid_mn)
covid_mn %>%
filter(Date == "2020-3-12")
#| eval: false
covid_mn %>%
filter(Date == "2020-03-12")
#| eval: false
N <- 5737915 # Total population for the State of Minnesota by July 2023
start_date <- "2020-03-12"
end_date <- "2020-07-30"
# isolating the infected subjects in the state of Minnesota since the start date
Infections <- covid_mn %>%
filter(Date >= ymd(start_date) & Date <= ymd(end_date))
#Infected2 <- subset(covid_mn, Date >= ymd(start_date) & Date <= ymd(end_date))$new_case
start_date <- "2020-03-12"
end_date <- "2020-07-30"
covid_mn %>%
filter(Date >= ymd(start_date) & Date <= ymd(end_date))
ymd(start_date)
ymd(end_date)
covid_mn %>%
filter(Date >= ymd(start_date) | Date <= ymd(end_date))
Infections <- covid_mn %>%
filter(Date >= ymd(start_date), Date <= ymd(end_date))
subset(covid_mn, Date >= ymd(start_date) & Date <= ymd(end_date))$new_case
covid_mn
covid_mn %>%
filter(Date >= start_date, Date <= end_date)
covid_mn %>%
filter(Date >= start_date & Date <= end_date)
covid_mn %>%
filter(Date >= ymd(start_date))
start_date <- "2020-03-12"
end_date <- "2020-07-30"
covid_mn %>%
filter(Date >= ymd(start_date))
subset(covid_mn, Date >= ymd(start_date) & Date <= ymd(end_date))$new_case
subset(covid_mn, Date >= ymd(start_date) & Date <= ymd(end_date))$new_cases
library(lubridate)
#| eval: false
covid_mn %>%
ggplot(aes(x = as.POSIXct(Date),
y = abs(new_deaths))) +
geom_point(color = "gray") +
labs(x = NULL, y = "Number of Deaths") +
geom_line(mapping = aes(x = as.POSIXct(Date)),
linewidth = 2,
colour = alpha(PrettyCols::prettycols("Purples")[4], 0.3)) +
geom_smooth(colour = PrettyCols::prettycols("Purples")[1],
linewidth = 1) +
scale_y_continuous(labels = scales::label_number(suffix = "K",
scale = 1e-6)) +
scale_x_datetime(date_breaks = "2 month", labels = label_date_short()) +
theme_biosci()
covid_mn %>%
filter(as.POSIXct(Date) >= ymd(start_date))
?as.POSIXct
covid_mn %>%
filter(as.Date(Date) >= ymd(start_date))
Infections <- covid_mn %>%
filter(Date >= ymd(as.POSIXct(start_date))) # & Date <= end_date)
library(tidyverse)
covid_mn %>%
filter(Date >= ymd(start_date))
ymd(start_date)
covid_mn %>%
filter(Date >= start_date)
Infections <- covid_mn %>%
filter(Date >= as.Date(start_date)) # & Date <= end_date)
Infections <- covid_mn %>%
filter(Date >= ymd(start_date)) # & Date <= end_date)
Infections <- covid_mn %>%
filter(Date >= mdy(start_date)) # & Date <= end_date)
Infections <- covid_mn %>%
filter(Date >= mdy(start_date) & Date <= mdy(end_date))
View(Infections)
end_date
mdy(end_date)
mdy(start_date)
covid_mn %>%
filter(Date >= mdy(start_date))
Infections <- covid_mn %>%
filter(Date >= mdy(start_date), Date <= mdy(end_date))
Infections <- covid_mn %>%
filter(Date >= mdy(start_date) | Date <= mdy(end_date))
View(Infections)
Infections <- covid_mn %>%
filter(Date >= mdy(start_date))
View(Infections)
Infections %>%
filter(Date <= mdy(end_date))
Infections
Infections <- covid_mn %>%
filter(Date >= ymd(start_date) & Date <= ydm(end_date))
#| eval: false
githubURL <-
"https://github.com/jesusNPL/BiodiversityScience/raw/master/Spring2023/Lab_3/Data/covidUS.RData"
load(url(githubURL))
glimpse(covid_us)
#| eval: false
covid_us %>%
arrange(state) %>%
drop_na(tot_cases) %>%
ggplot(aes(y = state, x = tot_cases)) +
geom_bar(stat = "identity") +
labs(x = "Number of cases", y = "Reported cases by State") +
scale_x_continuous(labels = scales::label_number(suffix = " M", scale = 1e-6)) +
theme_biosci()
#| eval: false
covid_us <- covid_us %>%
mutate(Date = date_updated) %>%
mutate(Date = mdy(Date)) %>%
select(Date, everything()) %>%
separate(date_updated, sep = "/", into = c("month", "day", "year"))
#| eval: false
githubURL <-
"https://github.com/jesusNPL/BiodiversityScience/raw/master/Spring2023/Lab_3/Data/covidUS.RData"
load(url(githubURL))
glimpse(covid_us)
#| eval: false
covid_us %>%
arrange(state) %>%
drop_na(tot_cases) %>%
ggplot(aes(y = state, x = tot_cases)) +
geom_bar(stat = "identity") +
labs(x = "Number of cases", y = "Reported cases by State") +
scale_x_continuous(labels = scales::label_number(suffix = " M", scale = 1e-6)) +
theme_biosci()
#| eval: false
covid_us <- covid_us %>%
mutate(Date = submission_date) %>%
mutate(Date = mdy(Date)) %>%
select(Date, everything()) %>%
separate(submission_date, sep = "/", into = c("month", "day", "year"))
# Sort the data in an increasing order
covid_us <- covid_us[order(covid_us$Date), ]
head(covid_us)
#| eval: false
covid_mn <- covid_us %>%
filter(state == "MN")
head(covid_mn)
#| eval: false
covid_mn %>%
ggplot(aes(x = as.POSIXct(Date),
y = new_cases)) +
geom_point(color = "gray") +
labs(x = NULL, y = "COVID-19 new cases") +
geom_line(mapping = aes(x = as.POSIXct(Date)),
linewidth = 2,
colour = alpha(PrettyCols::prettycols("Purples")[4], 0.3)) +
geom_smooth(colour = PrettyCols::prettycols("Purples")[1],
linewidth = 2) +
scale_y_continuous(labels = scales::label_number(suffix = " M",
scale = 1e-6)) +
scale_x_datetime(date_breaks = "2 month",
labels = label_date_short()) +
theme_biosci()
#| eval: false
library(tidyverse)
library(lubridate)
library(coronavirus)
library(PrettyCols)
library(scales)
library(deSolve)
#| eval: false
covid_mn %>%
ggplot(aes(x = as.POSIXct(Date),
y = new_cases)) +
geom_point(color = "gray") +
labs(x = NULL, y = "COVID-19 new cases") +
geom_line(mapping = aes(x = as.POSIXct(Date)),
linewidth = 2,
colour = alpha(PrettyCols::prettycols("Purples")[4], 0.3)) +
geom_smooth(colour = PrettyCols::prettycols("Purples")[1],
linewidth = 2) +
scale_y_continuous(labels = scales::label_number(suffix = " M",
scale = 1e-6)) +
scale_x_datetime(date_breaks = "2 month",
labels = label_date_short()) +
theme_biosci()
#| eval: false
covid_mn %>%
ggplot(aes(x = as.POSIXct(Date),
y = new_case)) +
geom_point(color = "gray") +
labs(x = NULL, y = "COVID-19 new cases") +
geom_line(mapping = aes(x = as.POSIXct(Date)),
linewidth = 2,
colour = alpha(PrettyCols::prettycols("Purples")[4], 0.3)) +
geom_smooth(colour = PrettyCols::prettycols("Purples")[1],
linewidth = 2) +
scale_y_continuous(labels = scales::label_number(suffix = " M",
scale = 1e-6)) +
scale_x_datetime(date_breaks = "2 month",
labels = label_date_short()) +
theme_biosci()
#| eval: false
covid_mn %>%
ggplot(aes(x = as.POSIXct(Date),
y = tot_cases)) +
geom_point(color = "gray") +
labs(x = NULL, y = "Total COVID-19 cases") +
geom_line(mapping = aes(x = as.POSIXct(Date)),
linewidth = 2,
colour = alpha(PrettyCols::prettycols("Purples")[4], 0.3)) +
geom_smooth(colour = PrettyCols::prettycols("Purples")[1],
linewidth = 1) +
scale_y_continuous(labels = scales::label_number(suffix = " M",
scale = 1e-6)) +
scale_x_datetime(date_breaks = "2 month", labels = label_date_short()) +
theme_biosci()
#| eval: false
covid_mn %>%
ggplot(aes(x = as.POSIXct(Date),
y = abs(new_deaths))) +
geom_point(color = "gray") +
labs(x = NULL, y = "Number of Deaths") +
geom_line(mapping = aes(x = as.POSIXct(Date)),
linewidth = 2,
colour = alpha(PrettyCols::prettycols("Purples")[4], 0.3)) +
geom_smooth(colour = PrettyCols::prettycols("Purples")[1],
linewidth = 1) +
scale_y_continuous(labels = scales::label_number(suffix = "K",
scale = 1e-6)) +
scale_x_datetime(date_breaks = "2 month", labels = label_date_short()) +
theme_biosci()
#| eval: false
covid_mn %>%
ggplot(aes(x = as.POSIXct(Date),
y = abs(new_death))) +
geom_point(color = "gray") +
labs(x = NULL, y = "Number of Deaths") +
geom_line(mapping = aes(x = as.POSIXct(Date)),
linewidth = 2,
colour = alpha(PrettyCols::prettycols("Purples")[4], 0.3)) +
geom_smooth(colour = PrettyCols::prettycols("Purples")[1],
linewidth = 1) +
scale_y_continuous(labels = scales::label_number(suffix = "K",
scale = 1e-6)) +
scale_x_datetime(date_breaks = "2 month", labels = label_date_short()) +
theme_biosci()
#| eval: false
SIR <- function(time, state, parameters) {
par <- as.list(c(state, parameters))
with(par, {
dS <- -Beta * I * S / N # Equation one
dI <- Beta * I * S / N - Gamma * I # Equation two
dR <- Gamma * I # Equation three
list(c(dS, dI, dR))
})
}
#| eval: false
RSS <- function(parameters) {
names(parameters) <- c("Beta", "Gamma")
out <- ode(y = init, times = Days, func = SIR, parms = parameters)
# the out object includes the SIR function we wrote above
fit <- out[, 3]
sum((Infected - fit)^2)
}
#| eval: false
covid_mn %>%
filter(Date == "2020-03-06")
#| eval: false
N <- 5737915 # Total population for the State of Minnesota by July 2023
start_date <- "2020-03-06"
end_date <- "2020-05-10"
# isolating the infected subjects in the state of Minnesota since the start date
Infections <- covid_mn %>%
filter(Date >= ymd(start_date) & Date <= ymd(end_date))
#Infected2 <- subset(covid_mn, Date >= ymd(start_date) & Date <= ymd(end_date))$new_case
View(Infections)
View(covid_mn)
#| eval: false
N <- 5737915 # Total population for the State of Minnesota by July 2023
start_date <- "2020-03-06"
end_date <- "2020-07-31"
# isolating the infected subjects in the state of Minnesota since the start date
Infections <- covid_mn %>%
filter(Date >= ymd(start_date) & Date <= ymd(end_date))
#Infected2 <- subset(covid_mn, Date >= ymd(start_date) & Date <= ymd(end_date))$new_case
#| eval: false
Infections %>%
ggplot(aes(x = as.POSIXct(Date), y = log(new_case))) +
geom_point(color = "gray") +
#geom_line(mapping = aes(x = as.POSIXct(Date)), linewidth = 2,
#         colour = alpha(PrettyCols::prettycols("Purples")[4], 0.3)) +
geom_smooth(colour = PrettyCols::prettycols("Purples")[1], linewidth = 1) +
labs(x = NULL, y = "log - COVID-19 cases") +
theme_nice()
Infections %>%
ggplot(aes(x = as.POSIXct(Date), y = log(new_case))) +
geom_point(color = "gray") +
#geom_line(mapping = aes(x = as.POSIXct(Date)), linewidth = 2,
#         colour = alpha(PrettyCols::prettycols("Purples")[4], 0.3)) +
geom_smooth(colour = PrettyCols::prettycols("Purples")[1], linewidth = 1) +
labs(x = NULL, y = "log - COVID-19 cases") +
theme_biosci()
#| eval: false
# ODE does not like tidy format, so we are going to isolate the number of cases in R base.
Infected <- Infections$new_case
Days <- 1:length(Infected) # Number of days since the first case
# Initial values for our SIR model
init <- c(
S = N - Infected[1], # Susceptible group
I = Infected[1], # Infected group
R = 0 # Recovered group.
)
#| eval: false
Opt <- optim(c(0.5, 0.5),
RSS,
method = "L-BFGS-B",
lower = c(0, 0),
upper = c(1, 1)
)
#| eval: false
# optimize with some sensible conditions
Opt$message
# [1] "CONVERGENCE: REL_REDUCTION_OF_F <= FACTR*EPSMCH"
#| eval: false
N <- 5737915 # Total population for the State of Minnesota by July 2023
start_date <- "2020-03-06"
end_date <- "2020-05-10"
# isolating the infected subjects in the state of Minnesota since the start date
Infections <- covid_mn %>%
filter(Date >= ymd(start_date) & Date <= ymd(end_date))
#Infected2 <- subset(covid_mn, Date >= ymd(start_date) & Date <= ymd(end_date))$new_case
#| eval: false
N <- 5737915 # Total population for the State of Minnesota by July 2023
start_date <- "2020-03-06"
end_date <- "2020-05-10"
# isolating the infected subjects in the state of Minnesota since the start date
Infections <- covid_mn %>%
filter(Date >= ymd(start_date) & Date <= ymd(end_date))
#Infected2 <- subset(covid_mn, Date >= ymd(start_date) & Date <= ymd(end_date))$new_case
#| eval: false
Infections %>%
ggplot(aes(x = as.POSIXct(Date), y = log(new_case))) +
geom_point(color = "gray") +
#geom_line(mapping = aes(x = as.POSIXct(Date)), linewidth = 2,
#         colour = alpha(PrettyCols::prettycols("Purples")[4], 0.3)) +
geom_smooth(colour = PrettyCols::prettycols("Purples")[1], linewidth = 1) +
labs(x = NULL, y = "log - COVID-19 cases") +
theme_biosci()
#| eval: false
# ODE does not like tidy format, so we are going to isolate the number of cases in R base.
Infected <- Infections$new_case
Days <- 1:length(Infected) # Number of days since the first case
# Initial values for our SIR model
init <- c(
S = N - Infected[1], # Susceptible group
I = Infected[1], # Infected group
R = 0 # Recovered group.
)
#| eval: false
Opt <- optim(c(0.5, 0.5),
RSS,
method = "L-BFGS-B",
lower = c(0, 0),
upper = c(1, 1)
)
#| eval: false
# optimize with some sensible conditions
Opt$message
# [1] "CONVERGENCE: REL_REDUCTION_OF_F <= FACTR*EPSMCH"
#| eval: false
Opt_par <- setNames(Opt$par, c("Beta", "Gamma"))
Opt_par
#| eval: false
# get the fitted values from our SIR model
fit_incidence <- data.frame(ode(
y = init, times = Days,
func = SIR, parms = Opt_par
))
head(fit_incidence)
tail(fit_incidence)
#| eval: false
matplot(fit_incidence$time, fit_incidence$I,
type = "l", log = "y",
xlab = "Days", ylab = "Number of infected subjects",
lwd = 2, lty = 1)
points(Days, Infected)
#| eval: false
R0 <- setNames(Opt_par["Beta"] / Opt_par["Gamma"], "R0")
round(R0, 3)
#| eval: false
times <- 1:350 # time in days
fit_350 <- data.frame(ode(
y = init, times = times,
func = SIR, parms = Opt_par))
head(fit_350)
tail(fit_350)
#| eval: false
cols <- 1:3 # colors: black = susceptible, red = infected and green = recovered
#| eval: false
matplot(fit_350$time, fit_350[, 2:4], type = "l",
xlab = "Days", ylab = "Number of subjects",
lwd = 2, lty = 1, col = cols)
legend("left", c("Susceptible", "Infected", "Recovered"),
lty = 1, lwd = 2, col = cols, inset = 0.05)
#| eval: false
matplot(fit_350$time, fit_350[ , 2:4], type = "l",
xlab = "Days", ylab = "Number of subjects",
lwd = 2, lty = 1, col = cols, log = "y")
## Warning in xy.coords(x, y, xlabel, ylabel, log = log): 1 y value <= 0
## omitted from logarithmic plot
points(Days, Infected)
legend("bottomright", c("Susceptible", "Infected", "Recovered"),
lty = 1, lwd = 2, col = cols, inset = 0.05)
title("SIR model 2019-nCoV United States", outer = TRUE, line = -2)
#| eval: false
# Peak of the pandemic for the first 60 days
fit_incidence[fit_incidence$I == max(fit_incidence$I), c("time", "I")]
#| eval: false
max(fit_incidence$I) * 0.02 # Assuming 2% of fatality rate
