scale_y_continuous(labels = scales::label_number(suffix = " M",
scale = 1e-6)) +
scale_x_datetime(date_breaks = "2 month",
labels = scales::label_date_short()) +
theme_biosci()
coronavirus_us %>%
filter(type == "recovery") %>%
ggplot(aes(x = as.POSIXct(date), y = cases)) +
geom_point(color = "gray") +
labs(x = NULL, y = "COVID-19 new cases") +
geom_line(mapping = aes(x = as.POSIXct(date)),
linewidth = 2,
colour = alpha(PrettyCols::prettycols("Purples")[4],
0.3))
#| eval: true
coronavirus_us %>%
filter(type == "recovery") %>%
filter(cases > 0) %>%
ggplot(aes(x = as.POSIXct(date), y = cases)) +
geom_point(color = "gray") +
labs(x = NULL, y = "COVID-19 new cases") +
geom_line(mapping = aes(x = as.POSIXct(date)),
linewidth = 2,
colour = alpha(PrettyCols::prettycols("Purples")[4],
0.3)) +
geom_smooth(colour = PrettyCols::prettycols("Purples")[1],
linewidth = 2) +
scale_y_continuous(labels = scales::label_number(suffix = " M",
scale = 1e-6)) +
scale_x_datetime(date_breaks = "2 month",
labels = scales::label_date_short()) +
theme_biosci()
#| eval: true
coronavirus_us %>%
filter(type == "recovery") %>%
filter(cases >= 0) %>%
ggplot(aes(x = as.POSIXct(date), y = cases)) +
geom_point(color = "gray") +
labs(x = NULL, y = "COVID-19 new cases") +
geom_line(mapping = aes(x = as.POSIXct(date)),
linewidth = 2,
colour = alpha(PrettyCols::prettycols("Purples")[4],
0.3)) +
geom_smooth(colour = PrettyCols::prettycols("Purples")[1],
linewidth = 2) +
scale_y_continuous(labels = scales::label_number(suffix = " M",
scale = 1e-6)) +
scale_x_datetime(date_breaks = "2 month",
labels = scales::label_date_short()) +
theme_biosci()
coronavirus_us %>%
filter(type == "recovery") %>%
filter(cases > 0) %>%
ggplot(aes(x = as.POSIXct(date), y = cases)) +
geom_point(color = "gray") +
labs(x = NULL, y = "COVID-19 new cases") +
geom_line(mapping = aes(x = as.POSIXct(date)),
linewidth = 2,
colour = alpha(PrettyCols::prettycols("Purples")[4],
0.3)) +
geom_smooth(colour = PrettyCols::prettycols("Purples")[1],
linewidth = 2) +
scale_y_continuous(labels = scales::label_number(suffix = " M",
scale = 1e-6)) +
scale_x_datetime(date_breaks = "2 month",
labels = scales::label_date_short()) +
theme_biosci()
coronavirus_us %>%
filter(type == "recovery") %>%
filter(cases >=1) %>%
ggplot(aes(x = as.POSIXct(date), y = cases)) +
geom_point(color = "gray") +
labs(x = NULL, y = "COVID-19 new cases") +
geom_line(mapping = aes(x = as.POSIXct(date)),
linewidth = 2,
colour = alpha(PrettyCols::prettycols("Purples")[4],
0.3)) +
geom_smooth(colour = PrettyCols::prettycols("Purples")[1],
linewidth = 2) +
scale_y_continuous(labels = scales::label_number(suffix = " M",
scale = 1e-6)) +
scale_x_datetime(date_breaks = "2 month",
labels = scales::label_date_short()) +
theme_biosci()
coronavirus_us %>%
filter(type == "recovery") %>%
filter(cases >= 0.01) %>%
ggplot(aes(x = as.POSIXct(date), y = cases)) +
geom_point(color = "gray") +
labs(x = NULL, y = "COVID-19 new cases") +
geom_line(mapping = aes(x = as.POSIXct(date)),
linewidth = 2,
colour = alpha(PrettyCols::prettycols("Purples")[4],
0.3)) +
geom_smooth(colour = PrettyCols::prettycols("Purples")[1],
linewidth = 2) +
scale_y_continuous(labels = scales::label_number(suffix = " M",
scale = 1e-6)) +
scale_x_datetime(date_breaks = "2 month",
labels = scales::label_date_short()) +
theme_biosci()
coronavirus_us %>%
filter(type == "recovery") %>%
filter(cases >= 0) %>%
ggplot(aes(x = as.POSIXct(date), y = cases)) +
geom_point(color = "gray") +
labs(x = NULL, y = "COVID-19 new cases") +
geom_line(mapping = aes(x = as.POSIXct(date)),
linewidth = 2,
colour = alpha(PrettyCols::prettycols("Purples")[4],
0.3)) +
geom_smooth(colour = PrettyCols::prettycols("Purples")[1],
linewidth = 2) +
scale_y_continuous(labels = scales::label_number(suffix = " M",
scale = 1e-6)) +
scale_x_datetime(date_breaks = "2 month",
labels = scales::label_date_short()) +
theme_biosci()
coronavirus_us %>%
filter(type == "recovery") %>%
filter(cases > 0) %>%
ggplot(aes(x = as.POSIXct(date), y = cases)) +
geom_point(color = "gray") +
labs(x = NULL, y = "COVID-19 new cases") +
geom_line(mapping = aes(x = as.POSIXct(date)),
linewidth = 2,
colour = alpha(PrettyCols::prettycols("Purples")[4],
0.3))
#| eval: true
coronavirus_us %>%
filter(type == "recovery") %>%
filter(cases >= 0) %>%
ggplot(aes(x = as.POSIXct(date), y = cases)) +
geom_point(color = "gray") +
labs(x = NULL, y = "COVID-19 new cases") +
geom_line(mapping = aes(x = as.POSIXct(date)),
linewidth = 2,
colour = alpha(PrettyCols::prettycols("Purples")[4],
0.3)) +
geom_smooth(colour = PrettyCols::prettycols("Purples")[1],
linewidth = 2) +
scale_y_continuous(labels = scales::label_number(suffix = " M",
scale = 1e-6)) +
scale_x_datetime(date_breaks = "2 month",
labels = scales::label_date_short()) +
theme_biosci()
#| eval: true
githubURL <-
"https://github.com/jesusNPL/BiodiversityScience/raw/master/Spring2024/Lab_3_Infectious_diseases/data/covidUS.RData"
load(url(githubURL))
# Explore the content
glimpse(covid_us)
#| eval: true
covid_us %>%
arrange(state) %>%
drop_na(tot_cases) %>%
group_by(state) %>% # group cases by state
summarise(total = sum(new_case)) %>% # sum all cases
ggplot(aes(y = state, x = total)) +
geom_bar(stat = "identity") +
labs(x = "Number of cases", y = "Reported cases by State") +
scale_x_continuous(labels = scales::label_number(suffix = " M", scale = 1e-6)) +
theme_biosci()
#| eval: true
covid_us <- covid_us %>%
mutate(Date = submission_date) %>%
mutate(Date = mdy(Date)) %>%
select(Date, everything()) %>%
separate(submission_date, sep = "/", into = c("month", "day", "year"))
# Sort the data in an increasing order
covid_us <- covid_us[order(covid_us$Date), ]
head(covid_us)
#| eval: true
covid_mn <- covid_us %>%
filter(state == "MN")
head(covid_mn)
#| eval: true
covid_mn %>%
ggplot(aes(x = as.POSIXct(Date),
y = new_case)) +
geom_point(color = "gray") +
labs(x = NULL, y = "COVID-19 new cases") +
geom_line(mapping = aes(x = as.POSIXct(Date)),
linewidth = 2,
colour = alpha(PrettyCols::prettycols("Purples")[4], 0.3)) +
geom_smooth(colour = PrettyCols::prettycols("Purples")[1],
linewidth = 2) +
scale_y_continuous(labels = scales::label_number(suffix = " M",
scale = 1e-6)) +
scale_x_datetime(date_breaks = "2 month",
labels = label_date_short()) +
theme_biosci()
#| eval: true
covid_mn %>%
ggplot(aes(x = as.POSIXct(Date),
y = tot_cases)) +
geom_point(color = "gray") +
labs(x = NULL, y = "Total COVID-19 cases") +
geom_line(mapping = aes(x = as.POSIXct(Date)),
linewidth = 2,
colour = alpha(PrettyCols::prettycols("Purples")[4], 0.3)) +
geom_smooth(colour = PrettyCols::prettycols("Purples")[1],
linewidth = 1) +
scale_y_continuous(labels = scales::label_number(suffix = " M",
scale = 1e-6)) +
scale_x_datetime(date_breaks = "2 month", labels = label_date_short()) +
theme_biosci()
#| eval: true
covid_mn %>%
ggplot(aes(x = as.POSIXct(Date),
y = abs(new_death))) +
geom_point(color = "gray") +
labs(x = NULL, y = "Number of Deaths") +
geom_line(mapping = aes(x = as.POSIXct(Date)),
linewidth = 2,
colour = alpha(PrettyCols::prettycols("Purples")[4], 0.3)) +
geom_smooth(colour = PrettyCols::prettycols("Purples")[1],
linewidth = 1) +
scale_y_continuous(labels = scales::label_number(suffix = "K",
scale = 1e-6)) +
scale_x_datetime(date_breaks = "2 month", labels = label_date_short()) +
theme_biosci()
#| eval: true
SIR <- function(time, state, parameters) {
par <- as.list(c(state, parameters))
with(par, {
dS <- -Beta * I * S / N # Equation one
dI <- Beta * I * S / N - Gamma * I # Equation two
dR <- Gamma * I # Equation three
list(c(dS, dI, dR))
})
}
#| eval: true
RSS <- function(parameters) {
names(parameters) <- c("Beta", "Gamma")
out <- ode(y = init, times = Days, func = SIR, parms = parameters)
# the out object includes the SIR function we wrote above
fit <- out[, 3]
sum((Infected - fit)^2)
}
#| eval: true
# Total population for the State of Minnesota by July 2023
N <- 5737915
#| eval: true
covid_mn %>%
filter(Date == "2020-03-06")
#| eval: true
start_date <- "2020-03-06"
end_date <- "2020-04-20"
# isolating the infected subjects in the state of Minnesota since the start date
Infections <- covid_mn %>%
filter(Date >= ymd(start_date) & Date <= ymd(end_date))
#Infected2 <- subset(covid_mn, Date >= ymd(start_date) & Date <= ymd(end_date))$new_case
#| eval: true
Infections %>%
ggplot(aes(x = as.POSIXct(Date), y = log(new_case))) +
geom_point(color = "gray") +
geom_smooth(colour = PrettyCols::prettycols("Purples")[1],
linewidth = 1) +
labs(x = NULL, y = "log - COVID-19 cases") +
theme_biosci()
#| eval: true
# ODE does not like tidy format, so we are going to isolate the number of cases in R base.
Infected <- Infections$new_case
Days <- 1:length(Infected) # Number of days since the first case
# Initial values for our SIR model
init <- c(
S = N - Infected[1], # Susceptible group
I = Infected[1], # Infected group
R = 0 # Recovered group.
)
#| eval: true
Opt <- optim(c(0.5, 0.5),
RSS,
method = "L-BFGS-B",
lower = c(0, 0),
upper = c(1, 1)
)
#| eval: true
# optimize with some sensible conditions
Opt$message
# [1] "CONVERGENCE: REL_REDUCTION_OF_F <= FACTR*EPSMCH"
#| eval: true
Opt_par <- setNames(Opt$par, c("Beta", "Gamma"))
Opt_par
#| eval: true
# get the fitted values from our SIR model
fit_incidence <- data.frame(ode(
y = init, times = Days,
func = SIR, parms = Opt_par
))
head(fit_incidence)
tail(fit_incidence)
#| eval: true
#matplot(fit_incidence$time, fit_incidence$I,
#       type = "l", log = "y",
#      xlab = "Days", ylab = "Number of infected subjects",
#     lwd = 2, lty = 1)
#points(Days, Infected)
fit_incidence %>%
ggplot(aes(x = time, y = log(I))) +
geom_smooth(colour = PrettyCols::prettycols("Purples")[1],
linewidth = 1) +
geom_point(data = Infections, aes(x = Days, y = log(new_case))) +
labs(x = "Days", y = "Number of infected subjects") +
theme_biosci()
Infections
fit_incidence
#| eval: true
R0 <- setNames(Opt_par["Beta"] / Opt_par["Gamma"], "R0")
round(R0, 3)
#| eval: false
times <- 1:350 # time in days
fit_350 <- data.frame(ode(
y = init, times = times,
func = SIR, parms = Opt_par))
head(fit_350)
tail(fit_350)
#| eval: true
cols <- 1:3 # colors: black = susceptible, red = infected and green = recovered
#| eval: false
matplot(fit_350$time, fit_350[, 2:4], type = "l",
xlab = "Days since infection", ylab = "Number of subjects",
lwd = 2, lty = 1, col = cols)
legend("left", c("Susceptible", "Infected", "Recovered"),
lty = 1, lwd = 2, col = cols, inset = 0.05)
## GGPLOT format
tt <- fit_350 %>%
pivot_longer(!time, values_to = "estimation", names_to = "compartment")
tt %>%
ggplot(aes(x = time, y = estimation,
group = compartment,
color = compartment)) +
geom_line(linewidth = 2) +
theme_biosci()
#| eval: true
#matplot(fit_350$time, fit_350[, 2:4], type = "l",
#       xlab = "Days since infection", ylab = "Number of subjects",
#      lwd = 2, lty = 1, col = cols)
#legend("left", c("Susceptible", "Infected", "Recovered"),
#      lty = 1, lwd = 2, col = cols, inset = 0.05)
## GGPLOT format
tt <- fit_350 %>%
pivot_longer(!time, values_to = "estimation", names_to = "compartment")
tt %>%
ggplot(aes(x = time, y = estimation,
group = compartment,
color = compartment)) +
geom_line(linewidth = 2) +
theme_biosci()
#| eval: true
matplot(fit_350$time, fit_350[ , 2:4],
type = "l",
xlab = "Days",
ylab = "Number of subjects",
lwd = 2,
lty = 1,
col = cols,
log = "y")
## Warning in xy.coords(x, y, xlabel, ylabel, log = log): 1 y value <= 0
## omitted from logarithmic plot
points(Days, Infected)
legend("bottomright", c("Susceptible", "Infected", "Recovered"),
lty = 1, lwd = 2, col = cols, inset = 0.05)
title("SIR model 2019-nCoV - Minnesota", outer = TRUE, line = -2)
tt
tt %>%
ggplot(aes(x = time, y = estimation,
group = compartment,
color = compartment)) +
geom_line(linewidth = 2) +
geom_point(aes(x = Days, y = Infected)) +
theme_biosci()
tt %>%
ggplot(aes(x = time, y = estimation,
group = compartment,
color = compartment)) +
geom_line(linewidth = 2) +
geom_point(data = Infections, aes(x = Days, y = Infected)) +
theme_biosci()
fit_350
#| eval: true
matplot(fit_350$time, fit_350[ , 2:4],
type = "l",
xlab = "Days",
ylab = "Number of subjects",
lwd = 2,
lty = 1,
col = cols,
log = "y")
## Warning in xy.coords(x, y, xlabel, ylabel, log = log): 1 y value <= 0
## omitted from logarithmic plot
points(Days, Infected)
legend("bottomright", c("Susceptible", "Infected", "Recovered"),
lty = 1, lwd = 2, col = cols, inset = 0.05)
title("SIR model 2019-nCoV - Minnesota", outer = TRUE, line = -2)
covid_mn %>%
ggplot(aes(x = as.POSIXct(Date),
y = abs(new_death))) +
geom_point(color = "gray") +
labs(x = NULL, y = "Number of Deaths") +
geom_line(mapping = aes(x = as.POSIXct(Date)),
linewidth = 2,
colour = alpha(PrettyCols::prettycols("Purples")[4], 0.3)) +
geom_smooth(colour = PrettyCols::prettycols("Purples")[1],
linewidth = 1) +
scale_y_continuous(labels = scales::label_number(suffix = "K",
scale = 1e-6)) +
scale_x_datetime(date_breaks = "2 month", labels = label_date_short()) +
theme_biosci()
covid_mn
covid_mn %>%
ggplot(aes(x = as.POSIXct(Date),
y = abs(tot_cases))) +
geom_point(color = "gray") +
labs(x = NULL, y = "Number of Deaths") +
geom_line(mapping = aes(x = as.POSIXct(Date)),
linewidth = 2,
colour = alpha(PrettyCols::prettycols("Purples")[4], 0.3)) +
geom_smooth(colour = PrettyCols::prettycols("Purples")[1],
linewidth = 1) +
scale_y_continuous(labels = scales::label_number(suffix = "K",
scale = 1e-6)) +
scale_x_datetime(date_breaks = "2 month", labels = label_date_short()) +
theme_biosci()
head(covid_mn)
covid_mn %>%
ggplot(aes(x = as.POSIXct(Date),
y = abs(new_cases))) +
geom_point(color = "gray") +
labs(x = NULL, y = "Number of Deaths") +
geom_line(mapping = aes(x = as.POSIXct(Date)),
linewidth = 2,
colour = alpha(PrettyCols::prettycols("Purples")[4], 0.3)) +
geom_smooth(colour = PrettyCols::prettycols("Purples")[1],
linewidth = 1) +
scale_y_continuous(labels = scales::label_number(suffix = "K",
scale = 1e-6)) +
scale_x_datetime(date_breaks = "2 month", labels = label_date_short()) +
theme_biosci()
covid_mn %>%
ggplot(aes(x = as.POSIXct(Date),
y = abs(new_case))) +
geom_point(color = "gray") +
labs(x = NULL, y = "Number of Deaths") +
geom_line(mapping = aes(x = as.POSIXct(Date)),
linewidth = 2,
colour = alpha(PrettyCols::prettycols("Purples")[4], 0.3)) +
geom_smooth(colour = PrettyCols::prettycols("Purples")[1],
linewidth = 1) +
scale_y_continuous(labels = scales::label_number(suffix = "K",
scale = 1e-6)) +
scale_x_datetime(date_breaks = "2 month", labels = label_date_short()) +
theme_biosci()
#| eval: true
#matplot(fit_incidence$time, fit_incidence$I,
#       type = "l", log = "y",
#      xlab = "Days", ylab = "Number of infected subjects",
#     lwd = 2, lty = 1)
#points(Days, Infected)
fit_incidence %>%
ggplot(aes(x = time, y = log(I))) +
#geom_smooth(colour = PrettyCols::prettycols("Purples")[1],
#           linewidth = 1) +
geom_point(data = Infections, aes(x = Days, y = log(new_case))) +
geom_smooth(colour = PrettyCols::prettycols("Purples")[1],
linewidth = 1) +
labs(x = "Days", y = "Number of infected subjects") +
theme_biosci()
#| eval: true
#matplot(fit_incidence$time, fit_incidence$I,
#       type = "l", log = "y",
#      xlab = "Days", ylab = "Number of infected subjects",
#     lwd = 2, lty = 1)
#points(Days, Infected)
fit_incidence %>%
ggplot(aes(x = time, y = log(I))) +
#geom_smooth(colour = PrettyCols::prettycols("Purples")[1],
#           linewidth = 1) +
geom_point(data = Infections, aes(x = Days, y = log(new_case))) +
geom_smooth(colour = PrettyCols::prettycols("Purples")[1],
linewidth = 1) +
labs(x = "Days", y = "Number of infected subjects") +
theme_biosci()
#| eval: true
#matplot(fit_incidence$time, fit_incidence$I,
#       type = "l", log = "y",
#      xlab = "Days", ylab = "Number of infected subjects",
#     lwd = 2, lty = 1)
#points(Days, Infected)
fit_incidence %>%
ggplot(aes(x = time, y = log(I))) +
geom_smooth(colour = PrettyCols::prettycols("Purples")[1],
linewidth = 1) +
geom_point(data = Infections, aes(x = Days, y = log(new_case))) +
labs(x = "Days", y = "Number of infected subjects") +
theme_biosci()
fit_350[ , 2:4]
hist(fit_350$I)
fit_350
round(6.114882e+03)
round(fit_350)
max(fit_350$I)
max(fit_350$R)
max(fit_350$S)
max(fit_350$I, 0)
max(fit_350$R, 0)
#| eval: true
# Peak of the pandemic for the first 45 days
fit_incidence[fit_incidence$I == max(fit_incidence$I), c("time", "I")]
#| eval: true
max(fit_incidence$I) * 0.02 # Assuming 2% of fatality rate
